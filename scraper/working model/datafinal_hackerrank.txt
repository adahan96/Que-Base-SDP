__label__Mathematics __label__Data-Structures You will be given two arrays of integers and asked to determine all integers that satisfy the following two conditions:   The elements of the first array are all factors of the integer being considered The integer being considered is a factor of all elements of the second array These numbers are referred to as being between the two arrays.  You must determine how many such numbers exist. For example, given the arrays  and , there are two numbers between them:  and .  , ,  and  for the first value.  Similarly, ,  and , .   Function Description  Complete the getTotalX function in the editor below.  It should return the number of integers that are betwen the sets.   getTotalX has the following parameter(s):   a: an array of integers   b: an array of integers   Input Format The first line contains two space-separated integers,  and , the number of elements in array  and the number of elements in array .  The second line contains  distinct space-separated integers describing  where .  The third line contains  distinct space-separated integers describing  where . Constraints    Output Format Print the number of integers that are considered to be between  and . Sample Input 2 3 2 4 16 32 96  Sample Output 3  Explanation 2 and 4 divide evenly into 4, 8, 12 and 16.  4, 8 and 16 divide evenly into 16, 32, 96.   4, 8 and 16 are the only three numbers for which each element of a is a factor and each is a factor of all elements of b.
__label__Mathematics An integer  is a divisor of an integer  if the remainder of .   Given an integer, for each digit that makes up the integer determine whether it is a divisor.  Count the number of divisors occurring within the integer.   Note: Each digit is considered to be unique, so each occurrence of the same digit should be counted (e.g. for ,  is a divisor of  each time it occurs so the answer is ). Function Description Complete the findDigits function in the editor below.  It should return an integer representing the number of digits of  that are divisors of .   findDigits has the following parameter(s): n: an integer to analyze Input Format The first line is an integer, , indicating the number of test cases.  The  subsequent lines each contain an integer, .   Constraints    Output Format For every test case, count the number of digits in  that are divisors of .  Print each answer on a new line. Sample Input 2 12 1012  Sample Output 2 3  Explanation The number  is broken into two digits,  and . When  is divided by either of those two digits, the remainder is  so they are both divisors. The number  is broken into four digits, , , , and .  is evenly divisible by its digits , , and , but it is not divisible by  as division by zero is undefined.
__label__Search You are given a number of sticks of varying lengths.  You will iteratively cut the sticks into smaller sticks, discarding the shortest pieces until there are none left.  At each iteration you will determine the length of the shortest stick remaining, cut that length from each of the longer sticks and then discard all the pieces of that shortest length.  When all the remaining sticks are the same length, they cannot be shortened so discard them. Given the lengths of  sticks, print the number of sticks that are left before each iteration until there are none left. For example, there are  sticks of lengths .  The shortest stick length is , so we cut that length from the longer two and discard the pieces of length .  Now our lengths are .  Again, the shortest stick is of length , so we cut that amount from the longer stick and discard those pieces.  There is only one stick left, , so we discard that stick.  Our lengths are .   Function Description  Complete the cutTheSticks function in the editor below.  It should return an array of integers representing the number of sticks before each cut operation is performed.   cutTheSticks has the following parameter(s):   arr: an array of integers representing the length of each stick   Input Format  The first line contains a single integer , the size of .  The next line contains  space-separated integers, each an  where each value represents the length of the  stick. Output Format  For each operation, print the number of sticks that are present before the operation on separate lines.   Constraints    Sample Input 0 6 5 4 4 2 2 8  Sample Output 0 6 4 2 1  Explanation 0 Sample Input 1 8 1 2 3 4 3 3 2 1  Sample Output 1 8 6 4 1  Explanation 1
__label__Search An English text needs to be encrypted using the following encryption scheme.  First, the spaces are removed from the text. Let  be the length of this text.  Then, characters are written into a grid, whose rows and columns have the following constraints:   For example, the sentence , after removing spaces is  characters long.   is between  and , so it is written in the form of a grid with 7 rows and 8 columns.  ifmanwas   meanttos           tayonthe   groundgo   dwouldha   vegivenu   sroots  Ensure that   If multiple grids satisfy the above conditions, choose the one with the minimum area, i.e. .   The encoded message is obtained by displaying the characters in a column, inserting a space, and then displaying the next column and inserting a space, and so on. For example, the encoded message for the above rectangle is:   imtgdvs fearwer mayoogo anouuio ntnnlvt wttddes aohghn sseoau  imtgdvs fearwer mayoogo anouuio ntnnlvt wttddes aohghn sseoau You will be given a message to encode and print. Function Description  Complete the encryption function in the editor below.  It should return a single string composed as described.   encryption has the following parameter(s):   s: a string to encrypt   Input Format One line of text, the string  Constraints    is comprised only of characters in the range ascii[a-z]. Output Format Print the encoded message on one line as described. Sample Input haveaniceday  Sample Output 0 hae and via ecy  Explanation 0  ,  is between  and .  Rewritten with  rows and  columns: have anic eday  Sample Input 1 feedthedog      Sample Output 1 fto ehg ee dd  Explanation 1  ,  is between  and .  Rewritten with  rows and  columns:   feed thed og  Sample Input 2 chillout  Sample Output 2 clu hlt io  Explanation 2  ,  is between  and .  Rewritten with  columns and  rows ( so we have to use .) chi llo ut
__label__Strings __label__Data-Structures Consider an array of numeric strings where each string is a positive number with anywhere from  to  digits. Sort the array's elements in non-decreasing, or ascending order of their integer values and print each element of the sorted array on a new line. Function Description  Complete the bigSorting function in the editor below.  It should return the sorted string array.   bigSorting has the following parameter(s):   unsorted: an unsorted array of integers as strings   Input Format The first line contains an integer, , denoting the number of strings in .  Each of the  subsequent lines contains an integer string . Constraints  Each string is guaranteed to represent a positive integer without leading zeros. The total number of digits across all strings in  is between  and  (inclusive). Output Format Print each element of the sorted array on a new line. Sample Input 0 Sample Output 0 Explanation 0 The initial array of strings is . When we order each string by the real-world integer value it represents, we get:   We then print each value on a new line, from smallest to largest. Sample Input 1 Sample Output 1
__label__Strings Steve has a string of lowercase characters in range ascii[‘a’..’z’].  He wants to reduce the string to its shortest length by doing a series of operations.  In each operation he selects a pair of adjacent lowercase letters that match, and he deletes them.  For instance, the string aab could be shortened to b in one operation.   ascii[‘a’..’z’] aab b Steve’s task is to delete as many characters as possible using this method and print the resulting string.  If the final string is empty, print Empty String Empty String Function Description Complete the superReducedString function in the editor below.  It should return the super reduced string or Empty String if the final string is empty.   Empty String superReducedString has the following parameter(s):   s: a string to reduce   Input Format A single string, . Constraints  Output Format If the final string is empty, print Empty String; otherwise, print the final non-reducible string. Empty String Sample Input 0 Sample Output 0 Explanation 0 Steve performs the following sequence of operations to get the final string: aaabccddd → abccddd → abddd → abd  Sample Input 1 Sample Output 1 Explanation 1 aa → Empty String  Sample Input 2 Sample Output 2 Explanation 2 baab → bb → Empty String
__label__Strings Alice wrote a sequence of words in CamelCase as a string of letters, , having the following properties: It is a concatenation of one or more words consisting of English letters. All letters in the first word are lowercase.  For each of the subsequent words, the first letter is uppercase and rest of the letters are lowercase. Given , print the number of words in  on a new line. For example, .  There are  words in the string.   Function Description Complete the camelcase function in the editor below.  It must return the integer number of words in the input string.   camelcase has the following parameter(s): s: the string to analyze   Input Format A single line containing string . Constraints  Output Format Print the number of words in string . Sample Input saveChangesInTheEditor  Sample Output 5  Explanation String  contains five words: save Changes In The Editor Thus, we print  on a new line. Need help? Try this problem first to get familiar with HackerRank environment.
__label__Strings Louise joined a social networking site to stay in touch with her friends. The signup page required her to input a name and a password. However, the password must be strong. The website considers a password to be strong if it satisfies the following criteria: Its length is at least .   It contains at least one digit.   It contains at least one lowercase English character.  It contains at least one uppercase English character.  It contains at least one special character. The special characters are: !@#$%^&*()-+  !@#$%^&*()-+ She typed a random string of length  in the password field but wasn't sure if it was strong. Given the string she typed, can you find the minimum number of characters she must add to make her password strong? Note: Here's the set of types of characters in a form you can paste in your solution: Input Format The first line contains an integer  denoting the length of the string. The second line contains a string consisting of  characters, the password typed by Louise. Each character is either a lowercase/uppercase English alphabet, a digit, or a special character. Constraints   Output Format Print a single line containing a single integer denoting the answer to the problem. Sample Input 0 Sample Output 0 Explanation 0 She can make the password strong by adding  characters, for example, $hk, turning the password into Ab1$hk which is strong.  $hk Ab1$hk  characters aren't enough since the length must be at least .   Sample Input 1 Sample Output 1 Explanation 1 The password isn't strong, but she can make it strong by adding a single digit.
__label__Strings __label__Greedy-Algorithms In this challenge, you will be given a string.  You must remove characters until the string is made up of any two alternating characters.  When you choose a character to remove, all instances of that character must be removed.  Your goal is to create the longest string possible that contains just two alternating letters. As an example, consider the string abaacdabd.  If you delete the character a, you will be left with the string bcdbd.  Now, removing the character c leaves you with a valid string bdbd having a length of 4. Removing either b or d at any point would not result in a valid string. abaacdabd a bcdbd c bdbd b d Given a string , convert it to the longest possible string  made up only of alternating characters.  Print the length of string  on a new line.  If no string  can be formed, print  instead. Function Description Complete the alternate function in the editor below.  It should return an integer that denotes the longest string that can be formed, or  if it cannot be done.   alternate has the following parameter(s):   s: a string   Input Format The first line contains a single integer denoting the length of .  The second line contains string . Constraints    Output Format Print a single integer denoting the maximum length of  for the given ; if it is not possible to form string , print  instead. Sample Input 10 beabeefeab  Sample Output 5  Explanation The characters present in  are a, b, e, and f. This means that  must consist of two of those characters and we must delete two others.  Our choices for characters to leave are [a,b], [a,e], [a, f], [b, e], [b, f] and [e, f]. a b e f If we delete e and f, the resulting string is babab. This is a valid  as there are only two distinct characters (a and b), and they are alternating within the string. e f babab a b If we delete a and f, the resulting string is bebeeeb. This is not a valid string  because there are consecutive e's present.  Removing them would leave consecutive b's, so this fails to produce a valid string . a f bebeeeb e b's Other cases are solved similarly. babab is the longest string we can create. babab
__label__Strings Julius Caesar protected his confidential information by encrypting it using a cipher. Caesar's cipher shifts each letter by a number of letters.  If the shift takes you past the end of the alphabet, just rotate back to the front of the alphabet.  In the case of a rotation by 3, w, x, y and z would map to z, a, b and c. For example, the given cleartext  and the alphabet is rotated by .  The encrypted string is .   Note: The cipher only encrypts letters; symbols, such as -, remain unencrypted.   - Function Description  Complete the caesarCipher function in the editor below.  It should return the encrypted string.   caesarCipher has the following parameter(s): s: a string in cleartext   k: an integer, the alphabet rotation factor   Input Format The first line contains the integer, , the length of the unencrypted string.  The second line contains the unencrypted string, .  The third line contains , the number of letters to rotate the alphabet by. Constraints      is a valid ASCII string without any spaces.    Output Format For each test case, print the encoded string.   Sample Input 11 middle-Outz 2  Sample Output okffng-Qwvb  Explanation Original alphabet:      abcdefghijklmnopqrstuvwxyz Alphabet rotated +2:    cdefghijklmnopqrstuvwxyzab  m -> o i -> k d -> f d -> f l -> n e -> g -    - O -> Q u -> w t -> v z -> b
__label__Strings Sami's spaceship crashed on Mars! She sends a series of SOS messages to Earth for help.  SOS  Letters in some of the SOS messages are altered by cosmic radiation during transmission. Given the signal received by Earth as a string, , determine how many letters of Sami's SOS have been changed by radiation. SOS SOS For example, Earth receives SOSTOT.  Sami's original message was SOSSOS.  Two of the message characters were changed in transit.   SOSTOT SOSSOS Function Description Complete the marsExploration function in the editor below.  It should return an integer representing the number of letters changed during transmission.   marsExploration has the following parameter(s): s: the string as received on Earth   Input Format There is one line of input: a single string, .  Note: As the original message is just SOS repeated  times, 's length will be a multiple of . SOS Constraints    will contain only uppercase English letters, ascii[A-Z]. Output Format Print the number of letters in Sami's message that were altered by cosmic radiation. Sample Input 0 Sample Output 0 Explanation 0  = SOSSPSSQSSOR, and signal length . Sami sent  SOS messages (i.e.: ). SOS We print the number of changed letters. Sample Input 1 Sample Output 1 Explanation 1  = SOSSOT, and signal length . Sami sent  SOS messages (i.e.: ). SOS We print the number of changed letters, which is . Sample Input 2 Sample Output 2 Explanation 2 Since no character is altered, we print 0.
__label__Strings Roy wanted to increase his typing speed for programming contests.  His friend suggested that he type the sentence "The quick brown fox jumps over the lazy dog" repeatedly.  This sentence is known as a pangram because it contains every letter of the alphabet. After typing the sentence several times, Roy became bored with it so he started to look for other pangrams. Given a sentence, determine whether it is a pangram.  Ignore case. Function Description Complete the function pangrams in the editor below.  It should return the string pangram if the input string is a pangram.  Otherwise, it should return not pangram.   pangram not pangram pangrams has the following parameter(s): s: a string to test Input Format Input consists of a string .  Constraints   Each character of ,  Output Format Output a line containing pangram if  is a pangram, otherwise output not pangram.   Sample Input 0  pangram not pangram We promptly judged antique ivory buckles for the next prize We promptly judged antique ivory buckles for the next prize Sample Output 0 pangram pangram Sample Explanation 0 All of the letters of the alphabet are present in the string.   Sample Input 1  We promptly judged antique ivory buckles for the prize We promptly judged antique ivory buckles for the prize Sample Output 1 not pangram not pangram Sample Explanation 0 The string lacks an x.   x
__label__Strings A weighted string is a string of lowercase English letters where each letter has a weight.  Character weights are  to  from  to  as shown below:  We define the following terms:   The weight of a string is the sum of the weights of all the string's characters.  For example:   The weight of a string is the sum of the weights of all the string's characters.  For example:   A uniform string consists of a single character repeated zero or more times. For example, ccc and a are uniform strings, but bcb and cd are not. ccc a bcb cd Given a string, , let  be the set of weights for all possible uniform contiguous  substrings of string . You have to answer  queries, where each query  consists of a single integer, . For each query, print Yes on a new line if ; otherwise, print No instead. Yes No Note: The  symbol denotes that  is an element of set . Function Description  Complete the weightedUniformStrings function in the editor below. It should return an array of strings, either Yes or No, one for each query.   Yes No weightedUniformStrings has the following parameter(s):   s: a string   queries: an array of integers   Input Format The first line contains a string , the original string.  The second line contains an integer , the number of queries.  Each of the next  lines contains an integer , the weight of a uniform subtring of  that may or may not exist. Constraints    will only contain lowercase English letters, ascii[a-z]. Output Format Print  lines. For each query, print Yes on a new line if .  Otherwise, print No. Yes No Sample Input 0 Sample Output 0 Explanation 0 The weights of every possible uniform substring in the string abccddde are shown below: abccddde  We print Yes on the first four lines because the first four queries match weights of uniform substrings of . We print No for the last two queries because there are no uniform substrings in  that have those weights.  Yes No Note that while de is a substring of  that would have a weight of , it is not a uniform substring.  de Note that we are only dealing with contiguous substrings. So ccc is not a substring of the string ccxxc. ccc ccxxc Sample Input 1 Sample Output 1
__label__Strings A numeric string, , is beautiful if it can be split into a sequence of two or more positive integers, , satisfying the following conditions:  for any  (i.e., each element in the sequence is  more than the previous element). No  contains a leading zero. For example, we can split  into the sequence , but it is not beautiful because  and  have leading zeroes. The contents of the sequence cannot be rearranged. For example, we can split  into the sequence , but it is not beautiful because it breaks our first constraint (i.e., ). The diagram below depicts some beautiful strings:  You must perform  queries where each query consists of some integer string . For each query, print whether or not the string is beautiful on a new line. If it's beautiful, print YES x, where  is the first number of the increasing sequence.  If there are multiple such values of , choose the smallest.  Otherwise, print NO.   YES x NO Function Description  Complete the separateNumbers function in the editor below.  It should print a string as described above.   separateNumbers has the following parameter:   s: an integer value represented as a string   Input Format The first line contains an integer , the number of strings to evaluate.  Each of the next  lines contains an integer string  to query. Constraints    Output Format For each query, print its answer on a new line (i.e., either YES x where  is the smallest first number of the increasing sequence, or NO). YES x NO Sample Input 0 Sample Output 0 Explanation 0 The first three numbers are beautiful (see the diagram above). The remaining numbers are not beautiful: For , all possible splits violate the first and/or second conditions. For , it starts with a zero so all possible splits violate the second condition. For , the only possible split is , which violates the first condition. For , there are no possible splits because  only has one digit. Sample Input 1 Sample Output 1
__label__Strings In this challenge, you will determine whether a string is funny or not.  To determine whether a string is funny, create a copy of the string in reverse e.g. .  Iterating through each string, compare the absolute difference in the ascii values of the characters at positions 0 and 1, 1 and 2 and so on to the end.  If the list of absolute differences is the same for both strings, they are funny. Determine whether a give string is funny.  If it is, return Funny, otherwise return Not Funny. Funny Not Funny For example, given the string , the ordinal values of the charcters are .   and the ordinals are .  The absolute differences of the adjacent elements for both strings are , so the answer is Funny. Funny Function Description Complete the funnyString function in the editor below.  For each test case, it should return a string, either Funny or Not Funny. Funny Not Funny funnyString has the following parameter(s):   s: a string to test Input Format The first line contains an integer , the number of queries.  The next  lines each contain a string, .    Constraints     Output Format For each string   print whether it is Funny or Not Funny on a new line. Funny Not Funny Sample Input 2 acxz bcxz  Sample Output Funny Not Funny  Explanation You can use  to store the reverse of . Test Case 0:  ,   Corresponding ASCII values of characters of the strings:   and   For both the strings the adjacent difference list is [2, 21, 2] so we print Funny.   Funny Test Case 1:  ,   Corresponding ASCII values of characters of the strings:   and   The adjacent difference list for string  is [1, 21, 2] and for string  it is [2, 21, 1]. Since they are not the same we print Not Funny.  Not Funny
__label__Strings John has collected various rocks. Each rock has various minerals embeded in it.  Each type of mineral is designated by a lowercase letter in the range . There may be multiple occurrences of a mineral in a rock. A mineral is called a gemstone if it occurs at least once in each of the rocks in John's collection. Given a list of minerals embedded in each of John's rocks, display the number of types of gemstones he has in his collection. For example, the array of mineral composition strings .  The minerals  and  appear in each composite, so there are  gemstones. Function Description  Complete the gemstones function in the editor below.  It should return an integer representing the number of gemstones found in the list of rocks.   gemstones has the following parameter(s):   arr: an array of strings   Input Format The first line consists of an integer , the size of .  Each of the next  lines contains a string  where each letter represents an occurence of a mineral in the current rock. Constraints    | arr[i] |   Each composition  consists of only lower-case Latin letters ('a'-'z').   Output Format Print the number of types of gemstones in John's collection. If there are none, print . Sample Input 3 abcdde baccd eeabg  Sample Output 2  Explanation Only  and  are gemstones because they are the only types that occur in every rock.
__label__Strings You are given a string containing characters  and  only.  Your task is to change it into a string such that there are no matching adjacent characters. To do this, you are allowed to delete zero or more characters in the string.   Your task is to find the minimum number of required deletions. For example, given the string , remove an  at positions  and  to make  in  deletions. Function Description Complete the alternatingCharacters function in the editor below.  It must return an integer representing the minimum number of deletions to make the alternating string.   alternatingCharacters has the following parameter(s): s: a string Input Format The first line contains an integer , the number of queries.  The next  lines each contain a string . Constraints    Each string  will consist only of characters  and  Output Format For each query, print the minimum number of deletions required on a new line.   Sample Input 5 AAAA BBBBB ABABABAB BABABA AAABBB  Sample Output 3 4 0 0 4  Explanation The characters marked red are the ones that can be deleted so that the string doesn't have matching consecutive characters.
__label__Strings Alice has a binary string. She thinks a binary string is beautiful if and only if it doesn't contain the substring .  In one step, Alice can change a  to a  or vice versa. Count and print the minimum number of steps needed to make Alice see the string as beautiful. For example, if Alice's string is  she can change any one element and have a beautiful string. Function Description  Complete the beautifulBinaryString function in the editor below.  It should return an integer representing the minimum moves required.   beautifulBinaryString has the following parameter(s):   b: a string of binary digits   Input Format The first line contains an integer , the length of binary string.  The second line contains a single binary string . Constraints  . Output Format Print the minimum number of steps needed to make the string beautiful. Sample Input 0 7 0101010  Sample Output 0 2    Explanation 0:  In this sample,  The figure below shows a way to get rid of each instance of :  Because we were able to make the string beautiful by changing  characters ( and ), we print . Sample Input 1 5 01100  Sample Output 1 0  Sample Case 1: In this sample   Explanation 1 The substring  does not occur in , so the string is already beautiful and we print . Sample Input 2 10 0100101010  Sample Output 2 3  Explanation 2  In this sample  One solution is to change the values of  to form a beautiful string.
__label__Search Sorting is useful as the first step in many different tasks. The most common task is to make finding things easier, but there are other uses as well.  In this case, it will make it easier to determine which pair or pairs of elements have the smallest absolute difference between them. For example, if you've got the list , sort it as  to see that several pairs have the minimum difference of : .  The return array would be . Given a list of unsorted integers, , find the pair of elements that have the smallest absolute difference between them. If there are multiple pairs, find them all. Function Description  Complete the closestNumbers function in the editor below.  It must return an array of integers as described. closestNumbers has the following parameter(s):   arr: an array of integers   Input Format The first line contains a single integer , the length of .  The second line contains  space-separated integers, . Constraints   All  are unique in . Output Format Output the pairs of elements with the smallest difference. If there are multiple pairs, output all of them in ascending order, all on the same line with just a single space between each pair of numbers. A number may be part of two pairs when paired with its predecessor and its successor. Sample Input 0 10 -20 -3916237 -357920 -3620601 7374819 -7330761 30 6246457 -6461594 266854   Sample Output 0 -20 30  Explanation 0  (30) - (-20) = 50, which is the smallest difference.   Sample Input 1 12 -20 -3916237 -357920 -3620601 7374819 -7330761 30 6246457 -6461594 266854 -520 -470   Sample Output 1 -520 -470 -20 30  Explanation 1  (-470) - (-520) = 30 - (-20) = 50, which is the smallest difference.  Sample Input 2 4 5 4 3 2  Sample Output 2 2 3 3 4 4 5  Explanation 2  Here, the minimum difference will be 1. Valid pairs are (2, 3), (3, 4), and (4, 5). We print the elements of each pair, space-separated on a single line.
__label__Strings James found a love letter that his friend Harry has written to his girlfriend. James is a prankster, so he decides to meddle with the letter. He changes all the words in the letter into palindromes.    To do this, he follows two rules:   He can only reduce the value of a letter by , i.e. he can change d to c, but he cannot change c to d or d to b.   The letter a may not be reduced any further.   Each reduction in the value of any letter is counted as a single operation. Find the minimum number of operations required to convert a given string into a palindrome. For example, given the string , the following two operations are performed:  cde → cdd → cdc.   Function Description  Complete the theLoveLetterMystery function in the editor below.  It should return the integer representing the minimum number of operations needed to make the string a palindrome.   theLoveLetterMystery has the following parameter(s):   s: a string Input Format The first line contains an integer , the number of queries.  The next  lines will each contain a string . Constraints    | s |   All strings are composed of lower case English letters, *ascii[a-z], with no spaces. Output Format A single line containing the minimum number of operations corresponding to each test case. Sample Input 4 abc abcba abcd cba  Sample Output 2 0 4 2  Explanation For the first test case, abc → abb → aba. For the second test case, abcba is already a palindromic string. For the third test case, abcd → abcc → abcb → abca → abba. For the fourth test case, cba → bba → aba.
__label__Search The median of a list of numbers is essentially it's middle element after sorting.  The same number of elements occur after it as before.  Given a list of numbers with an odd number of elements, can you find the median? For example, the median of  is , the middle element in the sorted array. Function Description Complete the findMedian function in the editor below.  It must return an integer that represents the median of the array.  findMedian has the following parameter(s):   arr: an unsorted array of integers Input Format The first line contains the integer , the size of .  The second line contains  space-separated integers  Constraints    is odd   Output Format Output one integer, the median. Sample Input 0 Sample Output 0 Explanation 0 The sorted .  It's middle element is at .
__label__Strings DNA is a nucleic acid present in the bodies of living things. Each piece of DNA contains a number of genes, some of which are beneficial and increase the DNA's total health. Each gene has a health value, and the total health of a DNA is the sum of the health values of all the beneficial genes that occur as a substring in the DNA. We represent genes and DNA as non-empty strings of lowercase English alphabetic letters, and the same gene may appear multiple times as a susbtring of a DNA. Given the following: An array of beneficial gene strings, . Note that these gene sequences are not guaranteed to be distinct. An array of gene health values, , where each  is the health value for gene . A set of  DNA strands where the definition of each strand has three components, , , and , where string  is a DNA for which genes  are healthy. Find and print the respective total healths of the unhealthiest (minimum total health) and  healthiest (maximum total health) strands of DNA as two space-separated values on a single line. Input Format The first line contains an integer, , denoting the total number of genes.  The second line contains  space-separated strings describing the respective values of  (i.e., the elements of ).  The third line contains  space-separated integers describing the respective values of  (i.e., the elements of ).  The fourth line contains an integer, , denoting the number of strands of DNA to process.  Each of the  subsequent lines describes a DNA strand in the form start end d, denoting that the healthy genes for DNA strand  are  and their respective correlated health values are . start end d Constraints        the sum of the lengths of all genes and DNA strands   It is guaranteed that each  consists of lowercase English alphabetic letters only (i.e., a to z). a z Output Format Print two space-separated integers describing the respective total health of the unhealthiest and the healthiest strands of DNA. Sample Input 0 Sample Output 0 Explanation 0 In the diagrams below, the ranges of beneficial genes for a specific DNA on the left are highlighed in green and individual instances of beneficial genes on the right are bolded. The total healths of the  strands are:    The total health of caaab is . caaab   The total health of xyz is , because it contains no beneficial genes. xyz   The total health of bcdybc is . bcdybc The unhealthiest DNA strand is xyz with a total health of , and the healthiest DNA strand is caaab with a total health of . Thus, we print 0 19 as our answer. xyz caaab 0 19
__label__Strings Given a string of lowercase letters in the range ascii[a-z], determine a character that can be removed to make the string a palindrome.  There may be more than one solution, but any will do.  For example, if your string is "bcbc", you can either remove 'b' at index  or 'c' at index .  If the word is already a palindrome or there is no solution, return -1.  Otherwise, return the index of a character to remove.   Function Description  Complete the palindromeIndex function in the editor below.  It must return the index of the character to remove or .   palindromeIndex has the following parameter(s):   s: a string to analyze Input Format The first line contains an integer , the number of queries.  Each of the next  lines contains a query string . Constraints     All characters are in the range ascii[a-z]. Output Format Print an integer denoting the zero-indexed position of the character to remove to make   a palindrome.  If  is already a palindrome or no such character exists, print .  Sample Input 3 aaab baa aaa  Sample Output 3 0 -1  Explanation Query 1: "aaab"  Removing 'b' at index  results in a palindrome, so we print  on a new line.      Query 2: "baa"  Removing 'b' at index  results in a palindrome, so we print  on a new line. Query 3: "aaa"  This string is already a palindrome, so we print .  Removing any one of the characters would result in a palindrome, but this test comes first. Note: The custom checker logic for this challenge is available here.
__label__Strings Two words are anagrams of one another if their letters can be rearranged to form the other word.   In this challenge, you will be given a string.  You must split it into two contiguous substrings, then determine the minimum number of characters to change to make the two substrings into anagrams of one another. For example, given the string 'abccde', you would break it into two parts: 'abc' and 'cde'.  Note that all letters have been used, the substrings are contiguous and their lengths are equal.  Now you can change 'a' and 'b' in the first substring to 'd' and 'e' to have 'dec' and 'cde' which are anagrams.  Two changes were necessary. Function Description Complete the anagram function in the editor below.  It should return the minimum number of characters to change to make the words anagrams, or  if it's not possible.   anagram has the following parameter(s):   s: a string   Input Format The first line will contain an integer, , the number of test cases.  Each test case will contain a string  which will be concatenation of both the strings described above in the problem.  The given string will contain only characters in the range ascii[a-z]. Constraints      consists only of characters in the range ascii[a-z].   Output Format For each test case, print an integer representing the minimum number of changes required to make an anagram. Print  if it is not possible. Sample Input 6 aaabbb ab abc mnop xyyx xaxbbbxx  Sample Output 3 1 -1 2 0 1  Explanation Test Case #01: We split  into two strings ='aaa' and ='bbb'.  We have to replace all three characters from the first string with 'b' to make the strings anagrams.   Test Case #02: You have to replace 'a' with 'b', which will  generate "bb".   Test Case #03: It is not possible for two strings of unequal length to be anagrams of one another.   Test Case #04: We have to replace both the characters of first string ("mn") to make it an anagram of the other one.   Test Case #05:  and  are already anagrams of one another.   Test Case #06: Here S1 = "xaxb" and S2 = "bbxx". You must replace 'a' from S1 with 'b' so that S1 = "xbxb".
__label__Strings We consider two strings to be anagrams of each other if the first string's letters can be rearranged to form the second string. In other words, both strings must contain the same exact letters in the same exact frequency. For example, bacdc and dcbac are anagrams, but bacdc and dcbad are not. bacdc dcbac bacdc dcbad Alice is taking a cryptography class and finding anagrams to be very useful. She decides on an encryption scheme involving two large strings where encryption is dependent on the minimum number of character deletions required to make the two strings anagrams. Can you help her find this number?  Given two strings,  and , that may not be of the same length, determine the minimum number of character deletions required to make  and  anagrams. Any characters can be deleted from either of the strings.  For example,  and .  The only characters that match are the 's so we have to remove  from  and  from  for a total of  deletions.   Function Description  Complete the makingAnagrams function in the editor below.  It should return an integer representing the minimum number of deletions needed to make the strings anagrams.   makingAnagrams has the following parameter(s):   s1: a string   s2: a string   Input Format The first line contains a single string, .  The second line contains a single string, . Constraints   It is guaranteed that  and  consist of lowercase English letters, ascii[a-z]. Output Format Print a single integer denoting the minimum number of characters which must be deleted to make the two strings anagrams of each other. Sample Input cde abc  Sample Output 4  Explanation We delete the following characters from our two strings to turn them into anagrams of each other: Remove d and e from cde to get c. d e cde c Remove a and b from abc to get c. a b abc c We had to delete  characters to make both strings anagrams.
__label__Strings __label__Mathematics Dothraki are planning an attack to usurp King Robert's throne. King Robert learns of this conspiracy from Raven and plans to lock the single door through which the enemy can enter his kingdom.  But, to lock the door he needs a key that is an anagram of a palindrome.  He starts to go through his box of strings, checking to see if they can be rearranged into a palindrome. For example, given the string , one way it can be arranged into a palindrome is . Function Description  Complete the gameOfThrones function below to determine whether a given string can be rearranged into a palindrome. If it is possible, return YES, otherwise return NO.   YES NO gameOfThrones has the following parameter(s):   s: a string to analyze   Input Format A single line which contains , the input string. Constraints  |s|    contains only lowercase letters in the range  Output Format A single line which contains YES or NO. YES NO Sample Input 0 Sample Output 0 Explanation 0 A palindromic permutation of the given string is bbaaabb.    Sample Input 1 Sample Output 1 Explanation 1 Palindromes longer than 1 character are made up of pairs of characters.  There are none here.   Sample Input 2 Sample Output 2 Explanation 2 An example palindrome from the string:  ddcceefeeccdd.
__label__Strings Given two strings, determine if they share a common substring.  A substring may be as small as one character.   For example, the words "a", "and", "art" share the common substring .  The words "be" and "cat" do not share a substring.   Function Description Complete the function twoStrings in the editor below.  It should return a string, either YES or NO based on whether the strings share a common substring.   YES NO twoStrings has the following parameter(s):   s1, s2: two strings to analyze .  Input Format The first line contains a single integer , the number of test cases.      The following  pairs of lines are as follows: The first line contains string . The second line contains string . Constraints  and  consist of characters in the range ascii[a-z].   Output Format For each pair of strings, return YES or NO. YES NO Sample Input 2 hello world hi world  Sample Output YES NO  Explanation We have  pairs to check: , . The substrings  and  are common to both strings.   , .  and  share no common substrings.
__label__Strings Amanda has a string of lowercase letters that she wants to copy to a new string.  She can perform the following operations with the given costs. She can perform them any number of times to construct a new string : Append a character to the end of string  at a cost of  dollar.  Choose any substring of  and append it to the end of  at no charge. Given  strings , find and print the minimum cost of copying each  to  on a new line. For example, given a string , it can be copied for  dollars.  Start by copying ,  and  individually at a cost of  dollar per character.  String  at this time.  Copy  to the end of  at no cost to complete the copy.   Function Description  Complete the stringConstruction function in the editor below.  It should return the minimum cost of copying a string.   stringConstruction has the following parameter(s):   s: a string   Input Format The first line contains a single integer , the number of strings.  Each of the next  lines contains a single string, . Constraints     Subtasks  for  of the maximum score. Output Format For each string  print the minimum cost of constructing a new string  on a new line. Sample Input 2 abcd abab  Sample Output 4 2  Explanation Query 0: We start with  and . Append character '' to  at a cost of  dollar, .  Append character '' to  at a cost of  dollar, .  Append character '' to  at a cost of  dollar, .  Append character '' to  at a cost of  dollar, .  Because the total cost of all operations is  dollars, we print  on a new line. Query 1: We start with  and . Append character '' to  at a cost of  dollar, .  Append character '' to  at a cost of  dollar, .  Append substring  to  at no cost, .  Because the total cost of all operations is  dollars, we print  on a new line. Note A substring of a string  is another string  that occurs "in"  (Wikipedia). For example, the substrings of the string "" are "", "" ,"", "", "", and "".
__label__Strings __label__Data-Structures Sherlock considers a string to be valid if all characters of the string appear the same number of times.  It is also valid if he can remove just  character at  index in the string, and the remaining characters will occur the same number of times.  Given a string , determine if it is valid.  If so, return YES, otherwise return NO. YES NO For example, if , it is a valid string because frequencies are .  So is  because we can remove one  and have  of each character in the remaining string.  If  however, the string is not valid as we can only remove  occurrence of .  That would leave character frequencies of .   Function Description  Complete the isValid function in the editor below.  It should return either the string YES or the string NO.   YES NO isValid has the following parameter(s):   s: a string   Input Format A single string . Constraints   Each character  Output Format Print YES if string  is valid, otherwise, print NO. YES NO Sample Input 0 Sample Output 0 Explanation 0 Given , we would need to remove two characters, both c and d  aabb or a and b  abcd, to make it valid. We are limited to removing only one character, so  is invalid. c d aabb a b abcd Sample Input 1 Sample Output 1 Explanation 1 Frequency counts for the letters are as follows:   {'a': 2, 'b': 2, 'c': 2, 'd': 2, 'e': 2, 'f': 1, 'g': 1, 'h': 1, 'i': 1} {'a': 2, 'b': 2, 'c': 2, 'd': 2, 'e': 2, 'f': 1, 'g': 1, 'h': 1, 'i': 1} There are two ways to make the valid string: Remove  characters with a frequency of : .    Remove  characters of frequency : .   Neither of these is an option. Sample Input 2 Sample Output 2 Explanation 2 All characters occur twice except for  which occurs  times.  We can delete one instance of  to have a valid string.
__label__Strings Palindromes are strings that read the same from the left or right, for example madam or 0110.   You will be given a string representation of a number and a maximum number of changes you can make.  Alter the string, one digit at a time, to create the string representation of the largest number possible given the limit to the number of changes.  The length of the string may not be altered, so you must consider 's left of all higher digits in your tests.  For example  is valid,  is not.   Given a string representing the starting number and a maximum number of changes allowed, create the largest palindromic string of digits possible or the string -1 if it's impossible to create a palindrome under the contstraints.   Function Description  Complete the highestValuePalindrome function in the editor below.  It should return a string representing the largest value palindrome achievable, or -1.   -1 highestValuePalindrome has the following parameter(s):   s: a string representation of an integer     n: an integer that represents the length of the integer string   k: an integer that represents the maximum number of changes allowed   Input Format The first line contains two space-separated integers,  and , the number of digits in the number and the maximum number of changes allowed.  The second line contains an -digit string of numbers.   Constraints   Each character  in the number is an integer where . Output Format Print a single line with the largest number that can be made by changing no more than  digits. If this is not possible, print -1. -1 Sample Input 0 4 1 3943  Sample Output 0 3993  Sample Input 1 6 3 092282  Sample Output 1 992299  Sample Input 2 4 1 0011  Sample Output 2 -1  Explanation Sample 0 There are two ways to make  a palindrome by changing no more than  digits:   , so we print .
__label__Mathematics Madam Hannah Otto, the CEO of Reviver Corp., is fond of palindromes, or words that read the same forwards or backwards. She thinks palindromic brand names are appealing to millennials.   As part of the marketing campaign for the company's new juicer called the Rotator™, Hannah decided to push the marketing team's palindrome-searching skills to a new level with a new challenge.   In this challenge, Hannah provides a string  consisting of lowercase English letters. Every day, for  days, she would select two integers  and , take the substring  (the substring of  from index  to index ), and ask the following question: Consider all the palindromes that can be constructed from some of the letters from . You can reorder the letters as you need. Some of these palindromes have the maximum length among all these palindromes. How many maximum-length palindromes are there?   For example, if ,  and , then we have,  Your job as the head of the marketing team is to answer all the queries. Since the answers can be very large, you are only required to find the answer modulo .   Complete the functions initialize and answerQuery and return the number of maximum-length palindromes modulo .  initialize answerQuery Input Format The first line contains the string . The second line contains a single integer . The  of the next  lines contains two space-separated integers ,  denoting the  and  values Anna selected on the  day.   Constraints Here,  denotes the length of .      Subtasks For 30% of the total score:    For 60% of the total score:   Output Format For each query, print a single line containing a single integer denoting the answer. Sample Input 0 Sample Output 0 Explanation 0 On the first day,  and . The maximum-length palindromes are "ewe" and "eke". On the second day,  and . The maximum-length palindrome is "ee".  Sample Input 1 Sample Output 1 Explanation 1 Here, the maximum-length palindromes are "abba" and "baab".
__label__Strings Two strings are anagrams of each other if the letters of one string can be rearranged to form the other string. Given a string, find the number of pairs of substrings of the string that are anagrams of each other.   For example , the list of all anagrammatic pairs is  at positions  respectively. Function Description Complete the function sherlockAndAnagrams in the editor below.  It must return an integer that represents the number of anagrammatic pairs of substrings in . sherlockAndAnagrams has the following parameter(s): s: a string .  Input Format The first line contains an integer , the number of queries.  Each of the next  lines contains a string  to analyze.  Constraints     String  contains only lowercase letters  ascii[a-z].  Output Format For each query, return the number of unordered anagrammatic pairs.   Sample Input 0 Sample Output 0 Explanation 0 The list of all anagrammatic pairs is  and  at positions  and  respectively.   No anagrammatic pairs exist in the second query as no character repeats. Sample Input 1 Sample Output 1 Explanation 1 For the first query, we have anagram pairs  and  at positions  and  respectively. For the second query:  There are 6 anagrams of the form  at positions  and .  There are 3 anagrams of the form  at positions  and .  There is 1 anagram of the form  at position . Sample Input 2 Sample Output 2 Explanation 2 There are two anagrammatic pairs of length :  and .  There are three anagrammatic pairs of length :  at positions  respectively.
__label__Strings A string is said to be a child of a another string if it can be formed by deleting 0 or more characters from the other string.  Given two strings of equal length, what's the longest string  that can be constructed such that it is a child of both?   For example, ABCD and ABDC have two children with maximum length 3, ABC and ABD.  They can be formed by eliminating either the D or C from both strings.  Note that we will not consider ABCD as a common child because we can't rearrange characters and ABCD  ABDC.   ABCD ABDC ABC ABD D C ABCD ABCD ABDC Function Description Complete the commonChild function in the editor below.  It should return the longest string which is a common child of the input strings. commonChild has the following parameter(s): s1, s2:  two equal length strings   Input Format There is one line with two space-separated strings,  and .  Constraints   All characters are upper case in the range ascii[A-Z]. Output Format Print the length of the longest string , such that  is a child of both  and .  Sample Input HARRY SALLY  Sample Output  2  Explanation The longest string that can be formed by deleting zero or more characters from  and  is , whose length is 2. Sample Input 1 AA BB  Sample Output 1 0  Explanation 1  and  have no characters in common and hence the output is 0. Sample Input 2 SHINCHAN NOHARAAA  Sample Output 2 3  Explanation 2 The longest string that can be formed between  and  while maintaining the order is . Sample Input 3 ABCDEF FBDAMN  Sample Output 3 2  Explanation 3   is the longest child of the given strings.
__label__Strings A gene is represented as a string of length  (where  is divisible by ), composed of the letters , , , and . It is considered to be steady if each of the four letters occurs exactly  times.  For example,  and  are both steady genes. Bear Limak is a famous biotechnology scientist who specializes in modifying bear DNA to make it steady.  Right now, he is examining a gene represented as a string .  It is not necessarily steady.  Fortunately, Limak can choose one (maybe empty) substring of  and replace it with any string of the same length. Modifying a large substring of bear genes can be dangerous. Given a string , can you help Limak find the length of the smallest possible substring that he can replace to make  a steady gene? Note: A substring of a string  is a subsequence made up of zero or more contiguous characters of . As an example, consider .  The substring  just before or after  can be replaced with  or .  One selection would create . Function Description Complete the  function in the editor below.  It should return an integer that represents the length of the smallest substring to replace.   steadyGene has the following parameter:   gene: a string Input Format The first line contains an interger  divisible by , that denotes the length of a string .  The second line contains a string  of length . Constraints    is divisible by     Subtask   in tests worth  points. Output Format Print the length of the minimum length substring that can be replaced to make  stable. Sample Input 8   GAAATAAA  Sample Output 5  Explanation One optimal solution is to replace  with  resulting in .  The replaced substring has length .
__label__Strings Jack and Daniel are friends. Both of them like letters, especially upper-case ones.  They are cutting upper-case letters from newspapers, and each one of them has his collection of letters stored in a stack.  One beautiful day, Morgan visited Jack and Daniel. He saw their collections. He wondered what is the lexicographically minimal string made of those two collections. He can take a letter from a collection only when it is on the top of the stack.  Morgan wants to use all of the letters in their collections.   As an example, assume Jack has collected  and Daniel has .  The example shows the top at index  for each stack of letters. Assembling the string would go as follows:   Note the choice when there was a tie at CA and CF. CA CF Function Description  Complete the morganAndString function in the editor below.  It should return the completed string.   morganAndString has the following parameter(s):   a: a string representing Jack's letters, top at index   b: a string representing Daniel's letters, top at index   Input Format The first line contains the an integer , the number of test cases.   The next  pairs of lines are as follows:  - The first line contains string   - The second line contains string .   Constraints      and  contain upper-case letters only, ascii[A-Z]. Output Format Output the lexicographically minimal string  for each test case in new line. Sample Input 2 JACK DANIEL ABACABA ABACABA  Sample Output DAJACKNIEL AABABACABACABA  Explanation The first letters to choose from were J and D since they were at the top of the stack. D was chosen, the options then were J and A. A chosen. Then the two stacks have J and N, so J is chosen. (Current string is DAJ) Continuing this way till the end gives us the resulting string.
__label__Strings A regular expression is used to describe a set of strings. For this problem the alphabet is limited to 'a' and 'b'. We define  to be a valid regular expression if:  1)  is "" or "".  2)  is of the form "", where  and  are regular expressions.  3)  is of the form "" where  and  are regular expressions.  4)  is of the form "" where  is a regular expression. Regular expressions can be nested and will always have have two elements in the parentheses. ('' is an element, '' is not; basically, there will always be pairwise evaluation) Additionally, '' will always be the second element; '' is invalid.   The set of strings recognized by  are as follows:  1) If  is "", then the set of strings recognized .  2) If  is "", then the set of strings recognized .  3) If  is of the form "" then the set of strings recognized = all strings which can be obtained by a concatenation of strings  and , where  is recognized by  and  by .  4) If  is of the form "" then the set of strings recognized = union of the set of strings recognized by  and .  5) If  is of the form "" then the the strings recognized are the empty string and the concatenation of an arbitrary number of copies of any string recognized by . Task  Given a regular expression and an integer, , count how many strings of length  are recognized by it. Input Format The first line contains the number of test cases .  test cases follow.  Each test case contains a regular expression, , and an integer, . Constraints      It is guaranteed that  will conform to the definition provided above. Output Format Print  lines, one corresponding to each test case containing the required answer for the corresponding test case. As the answers can be very big, output them modulo . Sample Input 3   ((ab)|(ba)) 2   ((a|b)*) 5   ((a*)(b(a*))) 100  Sample Output 2   32   100  Explanation For the first case, the only strings recognized are "" and "". Of the  possible strings of length ,  of them fit that expression.  For the second case, the RegEx recognizes any string of any length containing only 's and 's. The number of strings of length  recognized by this expression is .  For the third case, the RegEx recognizes any string having one , preceeded and followed by any number of 's. There are  strings of length  which have a single  in them.
__label__Strings Jane loves strings more than anything. She has a string  with her, and value of string  over function  can be calculated as given below:   Jane wants to know the maximum value of  among all the substrings  of string . Can you help her? Input Format  A single line containing string  . Output Format  Print the maximum value of  among all the substrings  of string . Constraints    The string consists of lowercase English alphabets.   Sample Input 0  aaaaaa  Sample Output 0  12  Explanation 0  f('a') = 6 f('aa') = 10 f('aaa') = 12 f('aaaa') = 12 f('aaaaa') = 10 f('aaaaaa') = 6  Sample Input 1  abcabcddd  Sample Output 1  9  Explanation 1 f values of few of the substrings are shown below: f("a") = 2 f("b") = 2 f("c") = 2 f("ab") = 4 f("bc") = 4 f("ddd") = 3 f("abc") = 6 f("abcabcddd") = 9  Among the function values 9 is the maximum one.
__label__Strings You have two strings,  and . Find a string, , such that:  can be expressed as  where  is a non-empty substring of  and  is a non-empty substring of .  is a palindromic string. The length of  is as long as possible. For each of the  pairs of strings ( and ) received as input, find and print string  on a new line. If you're able to form more than one valid string , print whichever one comes first alphabetically. If there is no valid answer, print  instead. Input Format The first line contains a single integer, , denoting the number of queries. The subsequent lines describe each query over two lines: The first line contains a single string denoting . The second line contains a single string denoting . Constraints      and  contain only lowercase English letters. Sum of |a| over all queries does not exceed  Sum of |b| over all queries does not exceed  Output Format For each pair of strings ( and ), find some  satisfying the conditions above and print it on a new line. If there is no such string, print  instead. Sample Input 3 bac bac abc def jdfh fds  Sample Output aba -1 dfhfd  Explanation We perform the following three queries: Concatenate  with  to create . We're given  and ; because both strings are composed of unique characters, we cannot use them to form a palindromic string. Thus, we print . Concatenate  with  to create . Note that we chose these particular substrings because the length of string  must be maximal.
__label__Strings Greg wants to build a string,  of length . Starting with an empty string, he can perform  operations: Add a character to the end of  for  dollars. Copy any substring of , and then add it to the end of  for  dollars. Calculate minimum amount of money Greg needs to build . Input Format The first line contains number of testcases .         The  subsequent lines each describe a test case over  lines:  The first contains  space-separated integers, ,  , and , respectively.  The second contains  (the string Greg wishes to build). Constraints     is composed of lowercase letters only. Output Format On a single line for each test case, print the minimum cost (as an integer) to build . Sample Input 2 9 4 5 aabaacaba 9 8 9 bacbacacb  Sample Output 26 42  Explanation Test Case 0:   "";  ""  Append "";  ""; cost is   Append "";  ""; cost is   Append "";  ""; cost is   Copy and append "";  ""; cost is   Append "";  ""; cost is   Copy and append "";  ""; cost is   Summing each cost, we get , so our output for Test Case 1 is . Test Case 1:   "";  ""  Append "";  ""; cost is   Append "";  ""; cost is   Append "";  ""; cost is   Copy and append "";  ""; cost is   Copy and append "";  ""; cost is  Summing each cost, we get , so our output for Test Case 2 is .
__label__Strings The Kingdom of Gridland contains  provinces. Each province is defined as a  grid where each cell in the grid represents a city. Every cell in the grid contains a single lowercase character denoting the first character of the city name corresponding to that cell. From a city with the coordinates , it is possible to move to any of the following cells in  unit of time (provided that the destination cell is within the confines of the grid):     A knight wants to visit all the cities in Gridland. He can start his journey in any city and immediately stops his journey after having visited each city at least once. Moreover, he always plans his journey in such a way that the total time required to complete it is minimum. After completing his tour of each province, the knight forms a string by concatenating the characters of all the cells in his path. How many distinct strings can he form in each province? Input Format The first line contains a single integer, , denoting the number of provinces. The  subsequent lines describe each province over the following three lines:  The first line contains an integer, , denoting the number of columns in the province.  Each of the next two lines contains a string, , of length  denoting the characters for the first and second row of the province. Constraints       Output Format For each province, print the number of distinct strings the knight can form on a new line. Sample Input 3 1 a a 3 dab abd 5 ababa babab  Sample Output 1 8 2  Explanation Province 0:   The knight can only form one string (aa), so we print  on a new line. aa Province 1:   The knight can form eight different strings (abdbad, adabdb, badabd, bdbada, dababd, dabdba, dbabad, and dbadab), so we print  on a new line.  abdbad adabdb badabd bdbada dababd dabdba dbabad dbadab Province 2:   The knight can form two different strings (ababababab and bababababa), so we print  on a new line. ababababab bababababa
__label__Data-Structures Alice was given the  integers from  to . She wrote all possible permutations in increasing lexicographical order, and wrote each permutation in a new line. For example, for , there are  possible permutations:       She then chose one permutation among them as her favorite permutation. After some time, she forgot some elements of her favorite permutation. Nevertheless, she still tried to write down its elements. She wrote a  in every position where she forgot the true value. She wants to know the sum of the line numbers of the permutations which could possibly be her favorite permutation, i.e., permutations which can be obtained by replacing the s. Can you help her out?  Since the sum can be large, find it modulo . Input Format The first line contains a single integer . The next line contains  space-separated integers  denoting Alice's favorite permutation with some positions replaced by .   Constraints   The positive values appearing in  are distinct. Subtask  For ~33% of the total points,   Output Format Print a single line containing a single integer denoting the sum of the line numbers of the permutations which could possibly be Alice's favorite permutation. Sample Input 0 Sample Output 0 Explanation 0 The possible permutations are  and . The permutation  occurs on line  and the permutation  occurs on line . Therefore the sum is . Sample Input 1 Sample Output 1 Explanation 1 There is no missing number in the permutation. Therefore, the only possible permutation is , and it occurs on line . Therefore the sum is .
__label__Strings Ashton appeared for a job interview and is asked the following question. Arrange all the distinct substrings  of a given string in lexicographical order and concatenate them. Print the  character of the concatenated string. It is assured that given value of  will be valid i.e. there will be a  character. Can you help Ashton out with this?   For example, given the string , its distinct substrings are .  Sorted and concatenated, they make the string .  If  then, the answer is , the  character of the 1-indexed concatenated string.   Note We have distinct substrings here, i.e. if string is aa, it's distinct substrings are a and aa.   aa a aa Function Description  Complete the ashtonString function in the editor below.  It should return the  character from the concatenated string, 1-based indexing.   ashtonString has the following parameters:  - s: a string  - k: an integer   Input Format The first line will contain an integer , the number of test cases.   Each of the subsequent  pairs of lines is as follows:  - The first line of each test case contains a string, .  - The second line contains an integer, .   Constraints     Each character of string    will be an appropriate integer.  Output Format Print the  character (1-based index) of the concatenation of the ordered distinct substrings of . Sample Input 1 dbac 3  Sample Output c  Explanation The substrings when arranged in lexicographic order are as follows    a, ac, b, ba, bac, c, d, db, dba, dbac  On concatenating them, we get  aacbbabaccddbdbadbac  The third character in this string is c.  c
__label__Strings For two strings A and B, we define the similarity of the strings to be the length of the longest prefix common to both strings. For example, the similarity of strings "abc" and "abd" is 2, while the similarity of strings "aaa" and "aaab" is 3. Calculate the sum of similarities of a string S with each of it's suffixes. Input Format The first line contains the number of test cases t.  Each of the next t lines contains a string to process, . Constraints      is composed of characters in the range ascii[a-z]   Output Format Output t lines, each containing the answer for the corresponding test case. Sample Input 2 ababaa   aa  Sample Output 11   3  Explanation For the first case, the suffixes of the string are "ababaa", "babaa", "abaa", "baa", "aa" and "a". The similarities of these strings with the string "ababaa" are 6,0,3,0,1, & 1 respectively. Thus, the answer is 6 + 0 + 3 + 0 + 1 + 1 = 11. For the second case, the answer is 2 + 1 = 3.
__label__Dynamic-Programming __label__Strings We define a function, , on a string, , as follows:   where:  denotes the number of characters in string .  denotes the number of distinct characters in string . Consuela loves creating string challenges and she needs your help testing her newest one! Given a string, , consisting of  lowercase letters, compute the summation of function  (provided above) over all possible distinct substrings of . As the result is quite large, print it modulo . Input Format The first line contains a single integer, , denoting the number of test cases.  Each of the  subsequent lines contains a string, . Constraints     The sum of  over all test cases does not exceed . Scoring  for  of test data.  for  of test data.    for  of test data. Output Format For each test case, print the answer modulo . Sample Input 3 aa aba abc  Sample Output 3 19 38  Explanation Test 0:  and  are the only distinct substrings.     Test 1: , , , , and  are the only distinct substrings.
__label__Strings A palindrome is a string that reads the same from left to right as it does from right to left. Given a string, , of  lowercase English letters, we define a -length rotation as cutting the first  characters from the beginning of  and appending them to the end of . For each , there are  possible -length rotations (where ). See the Explanation section for examples. Given  and , find all  -length rotations of ; for each rotated string, , print the maximum possible length of any palindromic substring of  on a new line. Input Format The first line contains an integer,  (the length of ).  The second line contains a single string, . Constraints    Output Format There should be  lines of output, where each line  contains an integer denoting the maximum length of any palindromic substring of rotation . Sample Input 0 13 aaaaabbbbaaaa  Sample Output 0 12 12 10 8 8 9 11 13 11 9 8 8 10  Sample Input 1 7 cacbbba  Sample Output 1 3 3 3 3 3 3 3  Sample Input 2 12 eededdeedede  Sample Output 2 5 7 7 7 7 9 9 9 9 7 5 4  Explanation Consider Sample Case 1, where .  The possible rotations, , for string  are:  .              The longest palindromic substrings for each  are:   and , so we print their length () on a new line.  , so we print its length () on a new line.   and , so we print their length () on a new line.   and , so we print their length () on a new line.   and , so we print their length () on a new line.   and , so we print their length () on a new line.   and , so we print their length () on a new line.
__label__Strings Jimmy loves playing with strings. He thinks string  is similar to string  if the following conditions are satisfied: Both strings have the same length (i.e.,  and ).  For each valid pair of indices, , in the strings,  and  or  and .   For example, string  and  are similar as for ,  and  and for all other  pairs  as well as .   He has a string, , of size  and gives you  queries to answer where each query is in the form of a pair of integers . For each substring , find the number of substrings  where substring  is similar to substring  and print this number on a new line. Note: Substring  is the contiguous sequence of characters from index  to index . For example, if  abcdefgh, then  cdef.  abcdefgh cdef Input Format The first line contains two space-separated integers describing the respective values of  and .  The second line contains string .  Each line  of the  subsequent lines contains two space-separated integers describing the respective values of  and  for query . Constraints    Output Format For each query, print the number of similar substrings on a new line. Sample Input 8 4 giggabaj 1 1 1 2 1 3 2 4  Sample Output 8 6 2 1  Explanation We perform the following sequence of queries: Strings with length  are all similar, so our answer is . gi, ig, ga, ab, ba, and aj are similar, so our answer is . gi ig ga ab ba aj gig and aba are similar, so our answer is . gig aba igg has no similar string, so our answer is . igg
__label__Strings Oh!! Mankind is in trouble again. This time, it's a deadly disease spreading at a rate never seen before. The need of the hour is to set up efficient virus detectors. You are the lead at Central Hospital and you need to find a fast and reliable way to detect the footprints of the virus DNA in that of the patient. The DNA of the patient as well as of the virus consists of lowercase letters. Since the collected data is raw, there may be some errors. You will need to find all substrings in the patient DNA that either exactly match the virus DNA or have at most one mismatch, i.e., a difference in at most one location.  For example, "aa" and "aa" are matching, "ab" and "aa" are matching, while "abb" and "bab" are not. aa aa ab aa abb bab Function Description Complete the virusIndices function in the editor below.  It should print a list of space-separated integers that represent the starting indices of matching substrings in increasing order, or No match!. No match! virusIndices has the following parameter(s):   p: a string that represents patient DNA   v: a string that represents virus DNA   Input Format The first line contains an integer , the number of test cases.   .  Each of the next  lines contains two space-separated strings  (the patient DNA) and  (the virus DNA).   Constraints    All characters in  and . Output Format For each test case, output a single line containing a space-delimited list of starting indices (-indexed) of substrings of  which are matching with  according to the condition mentioned above. The indices have to be in increasing order. If there is no matching substring, output No Match!.   No Match! Sample Input 0 Sample Output 0 Explanation 0 For the first case, the substrings of  starting at indices  and  are "bb" and "ba" and they are matching with the string  which is "ba".  For the second case, there are no matching substrings so the output is No Match!.  For the third case, the substrings of  starting at indices  and  are "ban" and "nan" and they are matching with the string  which is "nan".   bb ba ba No Match! ban nan nan Sample Input 1 Sample Output 1 Explanation 1 For the first case, the substrings of  starting at indices  and  are "ga" and "gc" and they are matching with the string  which is "gc".  For the second case, the substrings of  starting at indices  and  are "cga" and "cga" and they are matching with the string  which is "cgg".  For the third case, the substrings of  starting at indices ,  and  are "aa", "ar" and "ar" and they are matching with the string  which is "ab".  ga gc gc cga cga cgg aa ar ar ab
__label__Strings A substring is defined as a contiguous sequence of one or more characters in the string. More information on substrings can be found here.   You are given n strings w[1], w[2], ......, w[n]. Let S[i] denote the set of all unique substrings of the string w[i]. Let , that is, S is a set of strings that is the union of all substrings in all sets S[1], S[2], ..... S[n]. There will be many queries.  For each query you will be given an integer 'k'. Your task is to find the kth element of the -indexed lexicographically ordered set of substrings in the set S.  If there is no element , return INVALID.   For example, your strings are .  All of the substrings are  and .  Combine the two sets and sort them to get .  So, for instance if , we return 'a'.  If , we return 'bc'.  If  though, there is not an  so we return INVALID. Function Description  Complete the findStrings function in the editor below.  It should return array of strings.   findStrings has the following parameter(s):   w: an array of strings   queries: an array of integers   Input Format The first line contains an integer n, the number of strings in the array .  Each of the next n lines consists of a string .  The next line contains an integer q, the number of queries.  Each of the next q lines consists of a single integer k. Constraints         Each character of   Output Format Return an array of q strings where the ith string is the answer to the ith query. If a  is invalid, return "INVALID" for that case. Sample Input 2  aab  aac  3  3  8  23   Sample Output aab  c  INVALID   Explanation For the sample test case, we have 2 strings "aab" and "aac".  S1 = {"a", "aa", "aab", "ab", "b"} . These are the 5 unique substrings of "aab".  S2 = {"a", "aa", "aac",  "ac", "c" } . These are the 5 unique substrings of "aac".  Now, S = {S1 U S2} = {"a", "aa", "aab", "aac", "ab", "ac", "b", "c"}. Totally, 8 unique strings are present in the set S.  The lexicographically 3rd smallest string in S is "aab" and the lexicographically 8th smallest string in S is "c". Since there are only 8 distinct substrings, the answer to the last query is "INVALID".
__label__Strings __label__Mathematics __label__Data-Structures A border of a string is a proper prefix of it that is also a suffix. For example: a and abra are borders of abracadabra, a abra abracadabra kan and kankan are borders of kankankan.  kan kankan kankankan de is a border of decode.  de decode Note that decode is not a border of decode because it's not proper. decode decode A palindromic border is a border that is palindromic. For example, a and ana are palindromic borders of anabanana,  a ana anabanana l, lol and lolol are palindromic borders of lololol. l lol lolol lololol Let's define  as the number of palindromic borders of string . For example, if  lololol, then .  lololol Now, a string of length  has exactly  non-empty substrings (we count substrings as distinct if they are of different lengths or are in different positions, even if they are the same string). Given a string , consisting only of the first 8 lowercase letters of the English alphabet, your task is to find the sum of  for all the non-empty substrings  of . In other words, you need to find:   Since the answer can be very large, output the answer modulo . Input Format  The first line contains a string consisting of  characters. Output Format  Print a single integer: the remainder of the division of the resulting number by . Constraints    All characters in the string can be any of the first 8 lowercase letters of the English alphabet (abcdefgh).   abcdefgh Sample Input 1  ababa  Sample Output 1  5  Sample Input 2  aaaa  Sample Output 2  10  Sample Input 3  abcacb  Sample Output 3  3  Explanation   ababa has 15 substrings but only 4 substrings have palindromic borders.   ababa  aba    ababa    bab    aba   aba ababa bab aba
__label__Strings Prof. Twotwo as the name suggests is very fond powers of 2. Moreover he also has special affinity to number 800. He is known for carrying quirky experiments on powers of 2. One day he played a game in his class. He brought some number plates on each of which a digit from 0 to 9 is written. He made students stand in a row and gave a number plate to each of the student. Now turn by turn, he called for some students who are standing continuously in the row say from index i to index j (i<=j) and asked them to find their strength. i j The strength of the group of students from i to j is defined as: strength(i , j) {     if a[i] = 0         return 0; //If first child has value 0 in the group, strength of group is zero     value = 0;     for k from i to j         value = value*10 + a[k]     return value; }   Prof called for all possible combinations of i and j and noted down the strength of each group. Now being interested in powers of 2, he wants to find out how many strengths are powers of two. Now its your responsibility to get the answer for prof. Input Format First line contains number of test cases T  Next T line contains the numbers of number plates the students were having when standing in the row in the form of a string A. Constraints 1 ≤ T ≤ 100  1 ≤ len(A) ≤ 105  0 ≤ A[i] ≤ 9 Output Format Output the total number of strengths of the form 2x such that 0 ≤ x ≤ 800.  Sample Input 0 Sample Output 0 Explanation 0 In following explanations group i-j is group of student from index i to index j (1-based indexing) In first case only 2 is of form power of two. It is present seven times for groups 1-1,2-2,3-3,4-4,5-5,6-6,7-7   In first case only 2 is of form power of two. It is present seven times for groups 1-1,2-2,3-3,4-4,5-5,6-6,7-7   In second case 2,4 and 256 are of required form. 2 is strength of group 1-1 and 3-3, 4 is strength of group 2-2 and 256 is strength of group 3-5. In second case 2,4 and 256 are of required form. 2 is strength of group 1-1 and 3-3, 4 is strength of group 2-2 and 256 is strength of group 3-5. In third case 65536 is only number in required form. It is strength of group 1-5 In third case 65536 is only number in required form. It is strength of group 1-5 In fourth case 2 and 32 are of forms power of 2. Group 1-2 has values 0,2 but its strength is 0, as first value is 0.   In fourth case 2 and 32 are of forms power of 2. Group 1-2 has values 0,2 but its strength is 0, as first value is 0.   In fifth case, None of the group has strength of required form.   In fifth case, None of the group has strength of required form.
__label__Strings Consider the following game for two players: There are two strings A and B. Initially, some strings A' and B' are written on the sheet of paper. A' is always a substring of A and B' is always a substring of B. A move consists of appending a letter to exactly one of these strings: either to A' or to B'. After the move the constraint of A' being a substring of A and B' is a substring of B should still be satisfied. Players take their moves alternately. We call a pair (A', B') a position. Two players are playing this game optimally. That means that if a player has a move that leads to his/her victory, he/she will definitely use this move. If a player is unable to make a move, he loses.  Alice and Bob are playing this game. Alice makes the first move. As always, she wants to win and this time she does a clever trick. She wants the starting position to be the Kth lexicographically winning position for the first player (i.e. her). Consider two positions (A'1, B'1) and (A'2, B'2). We consider the first position lexicographically smaller than the second if A1 is lexicographically smaller than A2, or if A1 is equal to A2 and B1 is lexicographically smaller than B2. Please help her to find such a position, knowing the strings A, B and the integer K. Note: An empty string has higher precedence than character "a" "a" Input Format The first line of input consists of three integers, separated by a single space: N, M and K denoting the length of A, the length of B and K respectively. The second line consists of N small latin letters, corresponding to the string A. The third line consists of M small latin letters, corresponding to the string B. Constraints 1 <= N, M <= 3 * 105  1 <= K <= 1018 Output Format Output A' on the first line of input and B' on the second line of input. Please, pay attention that some of these strings can be empty. If there's no such pair, output "no solution" without quotes. Sample Input 0 Sample Output 0 Explanation 0 The given strings are  and . So there are  =  ways to fill a starting position (each character has two options, either to be present or not present).     ["", ""] : If this is the start position, Alice will append  to . So, the next two moves will consist of appending  and  to  and  respectively. So, Bob will suffer lack of moves and hence Alice wins.     ["", "c"] : If this is the start position, Alice will append  to . Now, Bob will suffer lack of moves and hence Alice wins.     ["a", ""] : If Alice appends  to  then Bob will append  to  and if Alice appends  to  then Bob will append  to . So Alices looses.    ["a", "c"] : If this is the start position, Alice will append  to . Now, Bob will suffer lack of moves and hence Alice wins.    ["ab", ""] : If this is the start position, Alice will append  to . Now, Bob will suffer lack of moves and hence Alice wins.     ["ab", "c"] : If this is the start position, Alice will suffer lack of moves and hence he looses.     ["b", ""] : If this is the start position, Alice will append  to . Now, Bob will suffer lack of moves and hence Alice wins.    ["b", "c"] : If this is the start position, Alice will suffer lack of moves and hence he looses.   So, the list of start positions in lexicographical order where Alice wins are: ["", ""], ["", "c"], ["a", "c"], ["ab", ""], ["b", ""]. The  one in this list is ["a", "c"].
__label__Strings You are given string  and number .  Consider a substring  of string . For each position of string  mark it if there is an occurence of the substring that covers the position. More formally, position  will be marked if there exists such index  that:  and . We will tell  produce  islands if all the marked positions form  groups of contiguous positions.  For example, if we have a string ababaewabaq the substring aba marks the positions 1, 2, 3, 4, 5, 8, 9, 10; that is XXXXXewXXXq (X denotes marked position). We can see 2 groups of contiguous positions, that is 2 islands. Finally, substring aba produces 2 islands in the string ababaewabaq. ababaewabaq aba XXXXXewXXXq X aba ababaewabaq Calculate and print the number of different substrings of string  that produce exactly  islands. Input Format The first line contains string  . The string consists of lowercase letters only. The second line contains an integer  . Output Format Output a single integer  the answer to the problem. Sample Input abaab 2  Sample Output 3  Explanation All the suitable substrings are: a, ab, b. a ab b
__label__Strings Two strings A and B, consisting of small English alphabet letters are called pseudo-isomorphic if   Their lengths are equal For every pair (i,j), where 1 <= i < j <= |A|, B[i] = B[j], iff A[i] = A[j] For every pair (i,j), where 1 <= i < j <= |A|, B[i] != B[j] iff A[i] != A[j] Naturally, we use 1-indexation in these definitions and |A| denotes the length of the string A.   You are given a string S, consisting of no more than 105 lowercase alphabetical characters. For every prefix of S denoted by S', you are expected to find the size of the largest possible set of strings , such that all elements of the set are substrings of S' and no two strings inside the set are pseudo-isomorphic to each other.   if S = abcde  then, 1st prefix of S is 'a'  then, 2nd prefix of S is 'ab'  then, 3rd prefix of S is 'abc'  then, 4th prefix of S is 'abcd' and so on..   Input Format The first and only line of input will consist of a single string S. The length of S will not exceed 10^5.   Constraints   S contains only lower-case english alphabets ('a' - 'z').   Output Format Output N lines. On the ith line, output the size of the largest possible set for the first i alphabetical characters of S such that no two strings in the set are pseudo-isomorphic to each other. Sample Input abbabab    Sample Output 1    2    4    6    9    12    15     Explanation The first character is 'a', the set is {a} hence 1.  The first 2 characters are 'ab', the set is {a, b, ab} but 'a' is pseudo-isomorphic to 'b'. So, we can remove either 'a' or 'b' from the set. We get {a,ab} or {b,ab}, hence 2.  Similarly, the first 3 characters are 'abb', the set is {a, ab, abb, b, bb} and as 'a' is pseudo-isomorphic to 'b', we have to remove either 'a' or 'b' from the set. We get {a,ab, abb, bb}, hence 4. and so on...
__label__Strings Consider a string of  characters, , of where each character is indexed from  to . You are given  queries in the form of two integer indices:  and . For each query, count and print the number of different substrings of  in the inclusive range between  and .  Note: Two substrings are different if their sequence of characters differs by at least one. For example, given the string  aab, substrings  a and  a are the same but substrings  aa and  ab are different. aab a a aa ab Input Format The first line contains two space-separated integers describing the respective values of  and .  The second line contains a single string denoting .  Each of the  subsequent lines contains two space-separated integers describing the respective values of  and  for a query. Constraints   String  consists of lowercase English alphabetic letters (i.e., a to z) only. a z Subtasks  For  of the test cases,   For  of the test cases,   For  of the test cases,   Output Format For each query, print the number of different substrings in the inclusive range between index  and index  on a new line.  Sample Input 0 Sample Output 0 Explanation 0 Given  aabaa, we perform the following  queries: aabaa 1 1: The only substring of a is itself, so we print  on a new line. 1 1 a 1 4: The substrings of abaa are a, b, ab, ba, aa, aba, baa, and abaa, so we print  on a new line. 1 4 abaa a b ab ba aa aba baa abaa 1 1: The only substring of a is itself, so we print  on a new line. 1 1 a 1 4: The substrings of abaa are a, b, ab, ba, aa, aba, baa, and abaa, so we print  on a new line. 1 4 abaa a b ab ba aa aba baa abaa 0 2: The substrings of aab are a, b, aa, ab, and aab, so we print  on a new line. 0 2 aab a b aa ab aab
__label__Greedy-Algorithms The city of Gridland is represented as an  matrix where the rows are numbered from  to  and the columns are numbered from  to . Gridland has a network of train tracks that always run in straight horizontal lines along a row. In other words, the start and end points of a train track are  and , where  represents the row number,  represents the starting column, and  represents the ending column of the train track.  The mayor of Gridland is surveying the city to determine the number of locations where lampposts can be placed. A lamppost can be placed in any cell that is not occupied by a train track. Given a map of Gridland and its  train tracks, find and print the number of cells where the mayor can place lampposts. Note: A train track may overlap other train tracks within the same row.  For example, if Gridland's data is the following:   In this case, there are five open cells (red) where lampposts can be placed. Function Description Complete the gridlandMetro function in the editor below.  It should return an integer that denotes the number of cells where lampposts can be installed.   gridlandMetro has the following parameter(s):   n: an integer, the number of rows in Gridland m: an integer, the number of columns in Gridland k: an integer, the number of tracks track: a 2 dimensional array of integers where each element contains  integers that represent   Input Format The first line contains three space-separated integers  and , the number of rows, columns and tracks to be mapped.    Each of the next  lines contains three space-separated integers,  and , the row number and the track column start and end.   Constraints     Output Format Print a single integer denoting the number of cells where the mayor can install lampposts. Sample Input 4 4 3 2 2 3 3 1 4 4 4 4  Sample Output 9  Explanation   In the diagram above, the yellow cells denote the first train track, green denotes the second, and blue denotes the third. Lampposts can be placed in any of the nine red cells.
__label__Search __label__Mathematics Sunny and Johnny like to pool their money and go to the ice cream parlor.  Johnny never buys the same flavor that Sunny does.  The only other rule they have is that they spend all of their money. Given a list of prices for the flavors of ice cream, select the two that will cost all of the money they have.   For example, they have  to spend and there are flavors costing .  The two flavors costing  and  meet the criteria.  Using -based indexing, they are at indices  and .   Function Description Complete the icecreamParlor function in the editor below.  It should return an array containing the indices of the prices of the two flavors they buy, sorted ascending.   icecreamParlor has the following parameter(s):   m: an integer denoting the amount of money they have to spend   cost: an integer array denoting the cost of each flavor of ice cream   Input Format The first line contains an integer, , denoting the number of trips to the ice cream parlor.   The next  sets of lines each describe a visit.  Each trip is described as follows: The integer , the amount of money they have pooled.  The integer , the number of flavors offered at the time.   space-separated integers denoting the cost of each flavor: .   Note:  The index within the cost array represents the flavor of the ice cream purchased.   Constraints       , ∀   There will always be a unique solution. Output Format For each test case, print two space-separated integers denoting the indices of the two flavors purchased, in ascending order.   Sample Input 2 4 5 1 4 5 3 2 4 4 2 2 4 3  Sample Output 1 4 1 2  Explanation Sunny and Johnny make the following two trips to the parlor: The first time, they pool together  dollars. Of the five flavors available that day, flavors  and  have a total cost of .   The second time, they pool together  dollars. TOf the four flavors available that day, flavors  and  have a total cost of .
__label__Search is a chess piece that moves in an L shape. We define the possible moves of  as any movement from some position  to some  satisfying either of the following: L  and , or    and   Note that  and  allow for the same exact set of movements. For example, the diagram below depicts the possible locations that  or  can move to from its current location at the center of a  chessboard:  Observe that for each possible movement, the Knight moves  units in one direction (i.e., horizontal or vertical) and  unit in the perpendicular direction. Given the value of  for an  chessboard, answer the following question for each  pair where : What is the minimum number of moves it takes for  to get from position  to position ? If it's not possible for the Knight to reach that destination, the answer is -1 instead. -1 Then print the answer for each  according to the Output Format specified below. Input Format A single integer denoting . Constraints  Output Format Print exactly  lines of output in which each line  (where ) contains  space-separated integers describing the minimum number of moves  must make for each respective  (where ). If some  cannot reach position , print -1 instead.   -1 For example, if , we organize the answers for all the  pairs in our output like this: (1,1) (1,2) (2,1) (2,2)  Sample Input 0 Sample Output 0 Explanation 0 The diagram below depicts possible minimal paths for , , and :  One minimal path for  is:   We then print 4 4 2 8 as our first line of output because  took  moves,  took  moves,  took  moves, and  took  moves.  4 4 2 8 In some of the later rows of output, it's impossible for  to reach position . For example,  can only move back and forth between  and  so it will never reach .
__label__Search Lauren has a chart of distinct projected prices for a house over the next several years.  She must buy the house in one year and sell it in another, and she must do so at a loss.  She wants to minimize her financial loss.   For example, the house is valued at  over the next  years.  She can purchase the home in any year, but she must resell the house at a loss in one of the following years.  Her minimum loss would be incurred by purchasing in year  at  and reselling in year  at . Find and print the minimum amount of money Lauren must lose if she buys the house and resells it within the next  years. Note: It's guaranteed that a valid answer exists. Function Description  Complete the minimumLoss function in the editor below.  It should return an integer that represents the minimum loss that can be achieved.   minimumLoss has the following parameter(s):   price: an array of integers that represent prices at each year   Input Format The first line contains an integer , the number of years of house data.  The second line contains  space-separated long integers describing each . Constraints   All the prices are distinct.  A valid answer exists. Subtasks  for  of the maximum score.  Output Format Print a single integer denoting the minimum amount of money Lauren must lose if she buys and resells the house within the next  years. Sample Input 0 Sample Output 0 Explanation 0 Lauren buys the house in year  at  and sells it in year  at  for a minimal loss of . Sample Input 1 Sample Output 1 Explanation 1 Lauren buys the house in year  at  and sells it in year  at  for a minimal loss of .
__label__Search Numeros the Artist had two lists that were permutations of one another.  He was very proud. Unfortunately, while transporting them from one exhibition to another, some numbers were lost out of the first list. Can you find the missing numbers? As an example, the array with some numbers missing, .  The original array of numbers .  The numbers missing are .   Notes  If a number occurs multiple times in the lists, you must ensure that the frequency of that number in both lists is the same. If that is not the case, then it is also a missing number.  You have to print all the missing numbers in ascending order.  Print each missing number once, even if it is missing multiple times.  The difference between maximum and minimum number in the second list is less than or equal to .   Function Description  Complete the missingNumbers function in the editor below.  It should return a sorted array of missing numbers.   missingNumbers has the following parameter(s): arr: the array with missing numbers    brr: the original array of numbers    Input Format There will be four lines of input:    - the size of the first list,    The next line contains  space-separated integers    - the size of the second list,    The next line contains  space-separated integers   Constraints       Output Format Output the missing numbers in ascending order. Sample Input Sample Output Explanation  is present in both arrays. Its frequency in  is , while its frequency in  is . Similarly,  and  occur twice in , but three times in . The rest of the numbers have the same frequencies in both lists.
__label__Search You will be given an array of integers and a target value.  Determine the number of pairs of array elements that have a difference equal to a target value.   For example, given an array of [1, 2, 3, 4] and a target value of 1, we have three values meeting the condition: , , and . Function Description Complete the pairs function below.  It must return an integer representing the number of element pairs having the required difference. pairs has the following parameter(s): k: an integer, the target difference arr: an array of integers Input Format The first line contains two space-separated integers  and , the size of  and the target value.  The second line contains  space-separated integers of the array . Constraints       each integer  will be unique Output Format An integer representing the number of pairs of integers whose difference is .   Sample Input 5 2   1 5 3 4 2    Sample Output 3  Explanation There are 3 pairs of integers in the set with a difference of 2: [5,3], [4,2] and [3,1] .
__label__Search Watson gives Sherlock an array of integers.  His challenge is to find an element of the array such that the sum of all elements to the left is equal to the sum of all elements to the right.  For instance, given the array ,  is between two subarrays that sum to .  If your starting array is , that element satisfies the rule as left and right sum to . You will be given arrays of integers and must determine whether there is an element that meets the criterion. Function Description  Complete the balancedSums function in the editor below.  It should return a string, either YES if there is an element meeting the criterion or NO otherwise.   YES NO balancedSums has the following parameter(s):   arr: an array of integers   Input Format The first line contains , the number of test cases.   The next  pairs of lines each represent a test case.  - The first line contains , the number of elements in the array .  - The second line contains  space-separated integers  where .   Constraints        Output Format For each test case print YES if there exists an element in the array, such that the sum of the elements on its left is equal to the sum of the elements on its right; otherwise print NO.   YES NO Sample Input 0 Sample Output 0 Explanation 0 For the first test case, no such index exists.  For the second test case, , therefore index  satisfies the given conditions. Sample Input 1 Sample Output 1 Explanation 1 In the first test case,  is between two subarrays summing to .  In the second case,  is between two subarrays summing to .  In the third case,  is between two subarrays summing to .
__label__Search We define the following: A subarray of array  of length  is a contiguous segment from  through  where . The sum of an array is the sum of its elements. Given an  element array of integers, , and an integer, , determine the maximum value of the sum of any of its subarrays modulo . For example,  Assume  and .  The following table lists all subarrays and their moduli: The maximum modulus is . Function Description Complete the maximumSum function in the editor below.  It should return a long integer that represents the maximum value of . maximumSum has the following parameter(s): a: an array of long integers, the array to analyze m: a long integer, the modulo divisor Input Format The first line contains an integer , the number of queries to perform. The next  pairs of lines are as follows: The first line contains two space-separated integers  and (long), the length of  and the modulo divisor.   The second line contains  space-separated long integers . Constraints        the sum of  over all test cases   Output Format For each query, return the maximum value of  as a long integer. Sample Input 1 5 7 3 3 9 9 5  Sample Output 6  Explanation The subarrays of array  and their respective sums modulo  are ranked in order of length and sum in the following list:  and    and                        The maximum value for  for any subarray is .
__label__Search Consider a matrix where each cell contains either a  or a .  Any cell containing a  is called a filled cell. Two cells are said to be connected if they are adjacent to each other horizontally, vertically, or diagonally.  In the following grid, all cells marked X are connected to the cell marked Y. X Y XXX XYX   XXX      If one or more filled cells are also connected, they form a region. Note that each cell in a region is connected to zero or more cells in the region but is not necessarily directly connected to all the other cells in the region. Given an  matrix, find and print the number of cells in the largest region in the matrix. Note that there may be more than one region in the matrix. For example, there are two regions in the following  matrix.  The larger region at the top left contains  cells.  The smaller one at the bottom right contains .   110 100 001  Function Description  Complete the connectedCell function in the editor below.  It should return an integer that denotes the area of the largest region.   connectedCell has the following parameter(s):  - matrix: a 2D array of integers where  represents the  row of the matrix   Input Format The first line contains an integer , the number of rows in the matrix.  The second line contains an integer , the number of columns in the matrix.  Each of the next  lines contains  space-separated integers . Constraints  Output Format Print the number of cells in the largest region in the given matrix. Sample Input 4 4 1 1 0 0 0 1 1 0 0 0 1 0 1 0 0 0  Sample Output 5  Explanation The diagram below depicts two regions of the matrix; for each region, the component cells forming the region are marked with an X: X X X 0 0     1 1 0 0 0 X X 0     0 1 1 0 0 0 X 0     0 0 1 0 1 0 0 0     X 0 0 0  The first region has five cells and the second region has one cell. We print the size of the largest region.
__label__Search __label__Dynamic-Programming __label__Strings Consider a string, , of  lowercase English letters where each character,  (, denotes the letter at index  in . We define an  palindromic tuple of  to be a sequence of indices in  satisfying the following criteria: , meaning the characters located at indices  and  are the same. , meaning the characters located at indices  and  are the same. , meaning that , , , and  are ascending in value and are valid indices within string . Given , find and print the number of  tuples satisfying the above conditions. As this value can be quite large, print it modulo . Input Format A single string denoting .  Constraints  It is guaranteed that  only contains lowercase English letters. Output Format Print the the number of  tuples satisfying the conditions in the Problem Statement above. As this number can be very large, your answer must be modulo . Sample Input 0 kkkkkkz  Sample Output 0 15  Explanation 0 The letter z will not be part of a valid tuple because you need at least two of the same character to satisfy the conditions defined above. Because all tuples consisting of four k's are valid, we just need to find the number of ways that we can choose four of the six k's. This means our answer is . z k k Sample Input 1 ghhggh  Sample Output 1 4  Explanation 1 The valid tuples are:     Thus, our answer is . Sample Input 0 Sample Output 0 Sample Input 1 Sample Output 1 Sample Input 2 Sample Output 2 Explanation 2 Tuples possible are
__label__Search Xander Cage has a list of cities he can visit on his new top-secret mission. He represents each city as a tuple of . The values of , , and  are distinct across all cities. We define a mission as a sequence of cities, , that he visits. We define the total  of such a mission to be the sum of the  of all the cities in his mission list. Being eccentric, he abides by the following rules on any mission: He can choose the number of cities he will visit (if any). He can start the mission from any city. He visits cities in order of strictly increasing . The absolute difference in  between adjacent visited cities in his mission must be at most . The absolute difference in  between adjacent visited cities in his mission must be at most . Given , , and the definitions for  cities, find and print the maximum possible total  that Xander can earn on a mission. Input Format The first line contains three space-separated integers describing the respective values of , , and .  Each line  of the  subsequent lines contains four space-separated integers denoting the respective , , , and  for a city. Constraints        Output Format Print a single integer denoting the maximum possible  that Xander can earn on a mission. Sample Input 0 Sample Output 0 Explanation 0 Xander can start at city , then go to city , and then go to city  for a maximum value of total    Note that he cannot go directly from city  to city  as that would violate his rules that the absolute difference in  between adjacent visited cities be  and the absolute difference in  between adjacent visited cities be . Because  and , he cannot directly travel between those cities.
__label__Search Ron and Hermione are deep in the Forbidden Forest collecting potion ingredients, and they've managed to lose their way. The path out of the forest is blocked, so they must make their way to a portkey that will transport them back to Hogwarts.   Consider the forest as an  grid. Each cell is either empty (represented by .) or blocked by a tree (represented by ). Ron and Hermione can move (together inside a single cell) LEFT, RIGHT, UP, and DOWN through empty cells, but they cannot travel through a tree cell. Their starting cell is marked with the character , and the cell with the portkey is marked with a . The upper-left corner is indexed as .  .X.X......X .X*.X.XXX.X .XX.X.XM... ......XXXX.  In example above, Ron and Hermione are located at index  and the portkey is at . Each cell is indexed according to Matrix Conventions.     Hermione decides it's time to find the portkey and leave. They start along the path and each time they have to choose a direction, she waves her wand and it points to the correct direction. Ron is betting that she will have to wave her wand exactly  times. Can you determine if Ron's guesses are correct? The map from above has been redrawn with the path indicated as a series where  is the starting point (no decision in this case),  indicates a decision point and  is just a step on the path: .X.X.10000X .X*0X0XXX0X .XX0X0XM01. ...100XXXX.  There are three instances marked with  where Hermione must use her wand. Note: It is guaranteed that there is only one path from the starting location to the portkey.   Function Description  Complete the countLuck function in the editor below.  It should return a string, either  if Ron is correct or  if he is not.   countLuck has the following parameters:   matrix: a list of strings, each one represents a row of the matrix   k: an integer that represents Ron's guess   Input Format The first line contains an integer , the number of test cases. Each test case is described as follows:  The first line contains  space-separated integers  and , the number of forest matrix rows and columns.  Each of the next  lines contains a string of length  describing a row of the forest matrix.  The last line contains an integer , Ron's guess as to how many times Hermione will wave her wand. Constraints       There will be exactly one  and one  in the forest.   Exactly one path exists between  and . Output Format On a new line for each test case, print  if Ron impresses Hermione by guessing correctly.  Otherwise, print . Sample Input 3 2 3 *.M .X. 1 4 11 .X.X......X .X*.X.XXX.X .XX.X.XM... ......XXXX. 3 4 11 .X.X......X .X*.X.XXX.X .XX.X.XM... ......XXXX. 4  Sample Output Impressed Impressed Oops!  Explanation For each test case,  denotes the number of times Hermione waves her wand.     Case 0: Hermione waves her wand at , giving us . Because , we print  on a new line.  Case 1: Hermione waves her wand at , , and , giving us . Because , we print  on a new line.  Case 2: Hermione waves her wand at , , and , giving us . Because  and ,  and we print  on a new line.
__label__Search Anna loves graph theory! She has a tree where each vertex is numbered from  to , and each contains a data value.   The sum of a tree is the sum of all its nodes' data values.  If she cuts an edge in her tree, she forms two smaller trees.  The difference between two trees is the absolute value between their sums.   Given a tree, determine which edge to cut so that the resulting trees have a minimal difference between them, then return that difference.   For example, your tree's nodes have weights of .  In this case, node numbers match their weights for convenience.  In the diagram below, you have the following edges: .    The values are calculated as follows:   Edge    Tree 1  Tree 2  Absolute Cut     Sum      Sum     Difference 1        8         13         5 2        9         12         3 3        6         15         9 4        4         17        13 5        5         16        11  The minimum absolute difference is . Note: The tree is always rooted at vertex .   Function Description  Complete the cutTheTree function in the editor below.  Return an integer that represents the minimal absolute difference achievable between the resultant two trees.   cutTheTree has the following parameter(s):   data: an array of integers that represent node values   edges: an 2 dimensional array of integer pairs where each pair represents an edge in the graph   Input Format The first line contains an integer , the number of vertices in the tree.  The second line contains  space-separated integers, where each integer  denotes the value of .  Each of the  subsequent lines contains two space-separated integers  and  describing edge  in tree .        Constraints   , where . Output Format A single line containing the minimum difference possible for tree . Sample Input 6 100 200 100 500 100 600 1 2 2 3 2 5 4 5 5 6  Sample Output 400  Explanation We can visualize the initial, uncut tree as:    There are  edges we can cut: Edge  results in   Edge  results in  Edge  results in   Edge  results in  Edge  results in  The minimum difference is .
__label__Search __label__Bit The Tower of Hanoi is a famous game consisting of  rods and a number of discs of incrementally different diameters. The puzzle starts with the discs neatly stacked on one rod, ordered by ascending size with the smallest disc at the top. The game's objective is to move the entire stack to another rod, obeying the following rules: Only one disc can be moved at a time. Each move consists of taking the topmost disc from a stack and moving it to the top of another stack. No disc may be placed on top of a smaller disc. Gena has a modified version of the Tower of Hanoi. His Hanoi has  rods and  discs ordered by ascending size. He made a few moves (following the rules above), but stopped and lost his place. He wants to restore the tower to its original state by making valid moves. Given the state of Gena's Hanoi, help him calculate the minimum number of moves needed to restore the tower to its original state. Note: Gena's rods are numbered from  to . All discs are initially located on rod . Input Format The first line contains a single integer, , denoting the number of discs.  The second line contains  space-separated integers, where the  integer is the index of the rod where the disk with diameter  is located. Constraints  Output Format Print the minimum number of moves Gena must make to restore the tower to its initial, ordered state on the first rod. Sample Input 3 1 4 1  Sample Output 3  Explanation  moves are enough to build the tower. Here is one possible solution:
__label__Search We call an quadruple of positive integers, , beautiful if the following condition is true:   Note:  is the bitwise XOR operator. Given , , , and , count the number of beautiful quadruples of the form  where the following constraints hold:     When you count the number of beautiful quadruples, you should consider two quadruples as same if the following are true: They contain same integers. Number of times each integers occur in the quadruple is same. For example  and  should be considered as same. Input Format A single line with four space-separated integers describing the respective values of , , , and . Constraints  For  of the maximum score,  Output Format Print the number of beautiful quadruples. Sample Input 1 2 3 4  Sample Output 11  Explanation There are  beautiful quadruples for this input:            Thus, we print  as our output. Note that  is same as .
__label__Graph-Algorithms In ordinary chess, the pieces are only of two colors, black and white. In our version of chess, we are including new pieces with unique movements. One of the most powerful pieces in this version is the red knight.   The red knight can move to six different positions based on its current position (UpperLeft, UpperRight, Right, LowerRight, LowerLeft, Left) as shown in the figure below.   The board is a grid of size . Each cell is identified with a pair of coordinates , where  is the row number and  is the column number, both zero-indexed. Thus,  is the upper-left corner and  is the bottom-right corner.  Complete the function printShortestPath, which takes as input the grid size , and the coordinates of the starting and ending position  and  respectively, as input. The function does not return anything.      printShortestPath Given the coordinates of the starting position of the red knight and the coordinates of the destination, print the minimum number of moves that the red knight has to make in order to reach the destination and after that, print the order of the moves that must be followed to reach the destination in the shortest way. If the destination cannot be reached, print only the word "Impossible".  Note: There may be multiple shortest paths leading to the destination. Hence, assume that the red knight considers its possible neighbor locations in the following order of priority: UL, UR, R, LR, LL, L. In other words, if there are multiple possible options, the red knight prioritizes the first move in this list, as long as the shortest path is still achievable. Check sample input  for an illustration. Input Format The first line of input contains a single integer . The second line contains four space-separated integers .  denotes the coordinates of the starting position and  denotes the coordinates of the final position. Constraints     the starting and the ending positions are different Output Format If the destination can be reached, print two lines. In the first line, print a single integer denoting the minimum number of moves that the red knight has to make in order to reach the destination. In the second line, print the space-separated sequence of moves.  If the destination cannot be reached, print a single line containing only the word Impossible. Impossible Sample Input 0 Sample Output 0 Explanation 0  Sample Input 1 Sample Output 1 Explanation 1  Sample Input 2 Sample Output 2 Explanation 2
__label__Search There are  bikers present in a city (shaped as a grid) having  bikes. All the bikers want to participate in the HackerRace competition, but unfortunately only  bikers can be accommodated in the race. Jack is organizing the HackerRace and wants to start the race as soon as possible. He can instruct any biker to move towards any bike in the city. In order to minimize the time to start the race, Jack instructs the bikers in such a way that the first  bikes are acquired in the minimum time. Every biker moves with a unit speed and one bike can be acquired by only one biker. A biker can proceed in any direction. Consider distance between bikes and bikers as Euclidean distance. Jack would like to know the square of required time to start the race as soon as possible.  Input Format The first line contains three integers, , , and , separated by a single space.  The following  lines will contain  pairs of integers denoting the co-ordinates of  bikers. Each pair of integers is separated by a single space. The next  lines will similarly denote the co-ordinates of the  bikes. Constraints       ,   Output Format A single line containing the square of required time. Sample Input 3 3 2 0 1 0 2 0 3 100 1 200 2  300 3  Sample Output 40000  Explanation There's need for two bikers for the race. The first biker (0,1) will be able to reach the first bike (100,1) in 100 time units. The second biker (0,2) will be able to reach the second bike (200,2) in 200 time units. This is the most optimal solution and will take 200 time units. So output will be 2002 = 40000.
__label__Search You have a long list of tasks that you need to do today. To accomplish task  you need  minutes, and the deadline for this task is . You need not complete a task at a stretch. You can complete a part of it, switch to another task, and then switch back. You've realized that it might not be possible to complete all the tasks by their deadline. So you decide to do them in such a manner that the maximum amount by which a task's completion time overshoots its deadline is minimized. Input Format The first line contains the number of tasks, . Each of the next  lines contains two integers,  and . Constraints       Output Format Output  lines. The  line contains the value of the maximum amount by which a task's completion time overshoots its deadline, when the first  tasks on your list are scheduled optimally. See the sample input for clarification. Sample Input 5 2 2 1 1 4 3 10 1 2 1  Sample Output 0   1   2   2   3  Explanation The first task alone can be completed in 2 minutes, and so you won't overshoot the deadline.  With the first two tasks, the optimal schedule can be:  time 1: task 2  time 2: task 1   time 3: task 1 We've overshot task 1 by 1 minute, hence returning 1.  With the first three tasks, the optimal schedule can be:  time 1 : task 2  time 2 : task 1  time 3 : task 3  time 4 : task 1  time 5 : task 3  time 6 : task 3 Task 1 has a deadline 2, and it finishes at time 4. So it exceeds its deadline by 2.  Task 2 has a deadline 1, and it finishes at time 1. So it exceeds its deadline by 0.  Task 3 has a deadline 4, and it finishes at time 6. So it exceeds its deadline by 2.   Thus, the maximum time by which you overshoot a deadline is 2. No schedule can do better than this. Similar calculation can be done for the case containing 5 tasks.
__label__Search __label__Mathematics A pair of nodes, , is a similar pair if the following conditions are true: node  is the ancestor of node   Given a tree where each node is labeled from  to , find the number of similar pairs in the tree. For example, given the following tree:     We have the following pairs of ancestors and dependents:   If  for example, we have  pairs that are similar, where . Function Description Complete the similarPair function in the editor below.  It should return an integer that represents the number of pairs meeting the criteria. similarPair has the following parameter(s):   n: an integer that represents the number of nodes   k: an integer edges: a two dimensional array where each element consists of two integers that represent connected node numbers   Input Format The first line contains two space-separated integers  and , the number of nodes and the similarity threshold.  Each of the next  lines contains two space-separated integers defining an edge connecting nodes  and , where node  is the parent to node . Constraints       Output Format Print a single integer denoting the number of similar pairs in the tree. Sample Input 5 2 3 2 3 1 1 4 1 5  Sample Output 4  Explanation   The similar pairs are , , , and , so we print  as our answer.  Observe that  and  are not similar pairs because they do not satisfy  for .
__label__Search Given an array of integers, you must answer a number of queries. Each query consists of a single integer, , and is performed as follows: Add  to each element of the array, permanently modifying it for any future queries. Find the absolute value of each element in the array and print the sum of the absolute values on a new line. Tip: The Input/Output for this challenge is very large, so you'll have to be creative in your approach to pass all test cases. Function Description  Complete the playingWithNumbers function in the editor below.  It should return an array of integers that represent the responses to each query.   playingWithNumbers has the following parameter(s):   arr: an array of integers   queries: an array of integers   Input Format The first line contains an integer  the number of elements in .  The second line contains  space-separated integers .  The third line contains an integer , the number of queries.  The fourth line contains  space-separated integers  where .     Constraints     , where . , where  Output Format For each query, print the sum of the absolute values of all the array's elements on a new line. Sample Input 3 -1 2 -3 3 1 -2 3   Sample Output 5 7 6  Explanation Query 0:   Array:   The sum of the absolute values of the updated array's elements is .     Query 1:   Array:   The sum of the absolute values of the updated array's elements is .    Query 2:   Array:   The sum of the absolute values of the updated array's elements is .
__label__Search We take a line segment of length  on a one-dimensional plane and bend it to create a circle with circumference  that's indexed from  to . For example, if :  We denote a pair of points,  and , as . We then plot  pairs of points (meaning a total of  individual points) at various indices along the circle's circumference. We define the distance  between points  and  in pair  as . Next, let's consider two pairs:  and . We define distance  as the minimum of the six distances between any two points among points , , , and . In other words:    For example, consider the following diagram in which the relationship between points in pairs at non-overlapping indices is shown by a connecting line:  Given  pairs of points and the value of , find and print the maximum value of , where , among all pairs of points. Input Format The first line contains two space-separated integers describing the respective values of  (the number of pairs of points) and  (the circumference of the circle).  Each line  of the  subsequent lines contains two space-separated integers describing the values of  and  (i.e., the locations of the points in pair ). Constraints    Output Format Print a single integer denoting the maximum , , where . Sample Input 0 Sample Output 0 Explanation 0 In the diagram below, the relationship between points in pairs at non-overlapping indices is shown by a connecting line:  As you can see, the maximum distance between any two pairs of points is , so we print  as our answer. Sample Input 1 Sample Output 1 Explanation 1 In the diagram below, we have four individual points located at three indices:  Because two of the points overlap, the minimum distance between the two pairs of points is . Thus, we print  as our answer.
__label__Search King Richard is leading a troop of  knights into battle! Being very organized, he labels his knights  and arranges them in an  square formation, demonstrated below:  Before the battle begins, he wants to test how well his knights follow instructions. He issues  drill commands, where each command follows the format ai bi di and is executed like so: ai bi di All knights in the square having the top-left corner at location  and the bottom-right corner at location  rotate  in the clockwise direction. Recall that some location  denotes the cell located at the intersection of row  and column . For example:  You must follow the commands sequentially. The square for each command is completely contained within the square for the previous command. Assume all knights follow the commands perfectly. After performing all  drill commands, it's time for battle! King Richard chooses knights  for his first wave of attack; however, because the knights were reordered by the drill commands, he's not sure where his chosen knights are! As his second-in-command, you must find the locations of the knights. For each knight , , print the knight's row and column locations as two space-separated values on a new line.   Input Format This is broken down into three parts: The first line contains a single integer, .        The second line contains a single integer, .  Each line  of the  subsequent lines describes a command in the form of three space-separated integers corresponding to , , and , respectively.   Each line  of the  subsequent lines describes a command in the form of three space-separated integers corresponding to , , and , respectively.   The next line contains a single integer, .  Each line  of the  subsequent lines describes a knight the King wants to find in the form of a single integer corresponding to .   Each line  of the  subsequent lines describes a knight the King wants to find in the form of a single integer corresponding to .   Constraints         and    and       Subtask   for  of the maximum score.   Output Format Print  lines of output, where each line  contains two space-separated integers describing the respective row and column values where knight  is located.   Sample Input 7 4 1 2 4 2 3 3 3 4 1 3 4 0 7 0 6 9 11 24 25 48  Sample Output 1 1 1 7 4 6 3 4 2 5 2 4 7 7  Explanation The following diagram demonstrates the sequence of commands:  Click here to download a larger image. In the final configuration: Knight  is at location  Knight  is at location  Knight  is at location  Knight  is at location  Knight  is at location  Knight  is at location  Knight  is at location
__label__Mathematics Alef the Frog is in an  two-dimensional maze represented as a table.  The maze has the following characteristics:  Each cell can be free or can contain an obstacle, an exit, or a mine. Any two cells in the table considered adjacent if they share a side.   The maze is surrounded by a solid wall made of obstacles.  Some pairs of free cells are connected by a bidirectional tunnel.   When Alef is in any cell, he can randomly and with equal probability choose to move into one of the adjacent cells that don't contain an obstacle in it. If this cell contains a mine, the mine explodes and Alef dies. If this cell contains an exit, then Alef escapes the maze.   When Alef lands on a cell with an entrance to a tunnel, he is immediately transported through the tunnel and is thrown into the cell at the other end of the tunnel. Thereafter, he won't fall again, and will now randomly move to one of the adjacent cells again. (He could possibly fall in the same tunnel later.)    It's possible for Alef to get stuck in the maze in the case when the cell in which he was thrown into from a tunnel is surrounded by obstacles on all sides.   Your task is to write a program which calculates and prints a probability that Alef escapes the maze. Input Format The first line contains three space-separated integers ,  and  denoting the dimensions of the maze and the number of bidirectional tunnels.   The next  lines describe the maze. The 'th line contains a string of length  denoting the 'th row of the maze. The meaning of each character is as follows: # denotes an obstacle. # A denotes a free cell where Alef is initially in.   A * denotes a cell with a mine.  * % denotes a cell with an exit.   % O denotes a free cell (which may contain an entrance to a tunnel).   O The next  lines describe the tunnels. The 'th line contains four space-separated integers , , , . Here,  and  denote the coordinates of both entrances of the tunnel.  denotes the row and column number, respectively.   Constraints         and  are distinct.   A appears exactly once.   A Each free cell contains at most one entrance to a tunnel.   If a cell contains an entrance to a tunnel, then it doesn't contain an obstacle, mine or exit, and Alef doesn't initially stand in it. Tunnels don't connect adjacent cells. Output Format Print one real number denoting the probability that Alef escapes the maze. Your answer will be considered to be correct if its (absolute) difference from the true answer is not greater than .   Sample Input 0 Sample Output 0 Explanation 0 The following depicts this sample case:  In this case, Alef will randomly choose one of four adjacent cells. If he goes up or down, he will explode and die. If he goes right, he will escape. If he goes left, he will go through a tunnel and get stuck in cell . So the probability of Alef escaping is .
__label__Graph-Algorithms __label__Greedy-Algorithms __label__Graph-Algorithms The Ruler of HackerLand believes that every citizen of the country should have access to a library. Unfortunately, HackerLand was hit by a tornado that destroyed all of its libraries and obstructed its roads! As you are the greatest programmer of HackerLand, the ruler wants your help to repair the roads and build some new libraries efficiently.  HackerLand has  cities numbered from  to . The cities are connected by  bidirectional roads. A citizen has access to a library if: Their city contains a library. They can travel by road from their city to a city containing a library. The following figure is a sample map of HackerLand where the dotted lines denote obstructed roads:  The cost of repairing any road is  dollars, and the cost to build a library in any city is  dollars.  If in the above example  and , we would build  roads at a cost of  and  libraries for a cost of .  We don't need to rebuild one of the roads in the cycle .     You are given  queries, where each query consists of a map of HackerLand and value of  and . For each query, find the minimum cost of making libraries accessible to all the citizens and print it on a new line. Function Description Complete the function roadsAndLibraries in the editor below.  It must return the minimal cost of providing libraries to all, as an integer. roadsAndLibraries has the following parameters: n: integer, the number of cities   c_lib: integer, the cost to build a library   c_road: integer, the cost to repair a road   cities: 2D array of integers where each  contains two integers that represent cities connected by an obstructed road .  Input Format The first line contains a single integer , that denotes the number of queries.  The subsequent lines describe each query in the following format:  - The first line contains four space-separated integers that describe the respective values of , ,  and , the number of cities, number of roads, cost of a library and cost of a road.  - Each of the next  lines contains two space-separated integers,  and , that describe a bidirectional road that connects cities  and . Constraints       Each road connects two distinct cities. Output Format For each query, print an integer that denotes the minimum cost to make libraries accessible to all the citizens on a new line. Sample Input 2 3 3 2 1 1 2 3 1 2 3 6 6 2 5 1 3 3 4 2 4 1 2 2 3 5 6  Sample Output 4 12  Explanation Perform the following  queries: HackerLand contains  cities connected by  bidirectional roads. The price of building a library is  and the price for repairing a road is .    The cheapest way to make libraries accessible to all is to: Build a library in city  at a cost of . Repair the road between cities  and  at a cost of . Repair the road between cities  and  at a cost of . This gives a total cost of . Note that the road between cities  and  does not need to be repaired each is connected to city .   HackerLand contains  cities connected by  bidirectional roads. The price of building a library is  and the price for repairing a road is .    The cheapest way to make libraries accessible to all is to: Build a library in city  at a cost of . Repair the road between cities  and  at a cost of . Repair the road between cities  and  at a cost of . This gives a total cost of . Note that the road between cities  and  does not need to be repaired each is connected to city .   In this scenario it is optimal to build a library in each city because the cost of building a library () is less than the cost of repairing a road ().   There are  cities, so the total cost is . In this scenario it is optimal to build a library in each city because the cost of building a library () is less than the cost of repairing a road ().   There are  cities, so the total cost is .
__label__Graph-Algorithms The member states of the UN are planning to send  people to the moon. They want them to be from different countries.  You will be given a list of pairs of astronaut ID's.  Each pair is made of astronauts from the same country.  Determine how many pairs of astronauts from different countries they can choose from. For example, we have the following data on 2 pairs of astronauts, and 4 astronauts total, numbered  through . 1   2 2   3  Astronauts by country are  and .  There are  pairs to choose from:  and . Function Description  Complete the journeyToMoon function in the editor below.  It should return an integer that represents the number of valid pairs that can be formed.   journeyToMoon has the following parameter(s):   n: an integer that denotes the number of astronauts   astronaut: a 2D array where each element  is a  element integer array that represents the ID's of two astronauts from the same country   Input Format The first line contains two integers  and , the number of astronauts and the number of pairs.  Each of the next  lines contains  space-separated integers denoting astronaut ID's of two who share the same nationality.  Constraints     Output Format An integer that denotes the number of ways to choose a pair of astronauts from different coutries. Sample Input 0 Sample Output 0 Explanation 0 Persons numbered  belong to one country, and those numbered  belong to another. The UN has  ways of choosing a pair:    Sample Input 1 Sample Output 1 Explanation 1 Persons numbered   belong to the same country, but persons  and  don't share countries with anyone else.  The UN has  ways of choosing a pair:
__label__Graph-Algorithms Bitville is a seaside city that has a number of shopping centers connected by bidirectional roads, each of which has a travel time associated with it.  Each of the shopping centers may have a fishmonger who sells one or more kinds of fish.  Two cats, Big Cat and Little Cat, are at shopping center  (each of the centers is numbered consecutively from  to ).  They have a list of fish they want to purchase, and to save time, they will divide the list between them.  Determine the total travel time for the cats to purchase all of the types of fish, finally meeting at shopping center .  Their paths may intersect, they may backtrack through shopping center , and one may arrive at a different time than the other.  The minimum time to determine is when both have arrived at the destination.   For example, there are  shopping centers selling  types of fish.  The following is a graph that shows a possible layout of the shopping centers connected by  paths.  Each of the centers is labeled .  Here  and  represent Big Cat and Little Cat, respectively.  In this example, both cats take the same path, i.e.  and arrive at time  having purchased all three types of fish they want.  Neither cat visits shopping centers  or .     Function Description  Complete the shop function in the editor below.  It should return an integer that represents the minimum time required for their shopping.   shop has the following parameters:  - n: an integer, the number of shopping centers  - k: an integer, the number of types of fish  - centers: an array of strings of space-separated integers where the first integer of each element is the number of types of fish sold at a center and the remainder are the types sold  - roads: a 2-dimensional array of integers where the first two values are the shopping centers connected by the bi-directional road, and the third is the travel time for that road   Input Format The first line contains  space-separated integers:  (the number of shopping centers),  (the number of roads), and  (the number of types of fish sold in Bitville), respectively.         Each line  of the  subsequent lines () describes a shopping center as a line of space-separated integers. Each line takes the following form: The first integer, , denotes the number of types of fish that are sold by the fishmonger at the  shopping center. Each of the  subsequent integers on the line describes a type of fish sold by that fishmonger, denoted by , where  going forward. Each line  of the  subsequent lines () contains  space-separated integers that describe a road. The first two integers,  and , describe the two shopping centers it connects. The third integer, , denotes the amount of time it takes to travel the road. Constraints      All  are different for every fixed .   Each road connectes  distinct shopping centers (i.e., no road connects a shopping center to itself). Each pair of shopping centers is directly connected by no more than  road. It is possible to get to any shopping center from any other shopping center. Each type of fish is always sold by at least one fishmonger. Output Format Print the minimum amount of time it will take for the cats to collectively purchase all  fish and meet up at shopping center . Sample Input 5 5 5 1 1 1 2 1 3 1 4 1 5 1 2 10 1 3 10 2 4 10 3 5 10 4 5 10  Sample Output 30  Explanation    represents a location Big Cat visits,  represents a location where Little Cat visits.   Big Cat can travel  and buy fish at all of the shopping centers on his way. Little Cat can then travel , and buy fish from the fishmonger at the  shopping center only.
__label__Graph-Algorithms You are given an array with  -bit integers: . BIT(x, i) = (x >> i) & 1. (where  is the  lower bit of  in binary form.) If we regard every bit as a vertex of a graph G, there exists one undirected edge between vertex  and vertex  if there exists at least one k such that BIT(d[k], i) == 1 && BIT(d[k], j) == 1. For every subset of the input array, how many  connected-components are there in that graph? The number of connected-components in a graph are the sets of nodes, which are accessible to each other, but not to/from the nodes in any other set.   For example if a graph has six nodes, labelled . And contains the edges . There are three connected-components: ,  and . Because  can be accessed from each other through one or more edges,  can access each other and  is isolated from everone else.   You only need to output the sum of the number of connected-component() in every graph. Input Format n d[0] d[1] ... d[n - 1]  Constraints    Output Format Print the value of .
__label__Graph-Algorithms Consider an undirected graph where each edge is the same weight.  Each of the nodes is labeled consecutively. You will be given a number of queries.  For each query, you will be given a list of edges describing an undirected graph.  After you create a representation of the graph, you must determine and report the shortest distance to each of the other nodes from a given starting position using the breadth-first search algorithm (BFS).  Distances are to be reported in node number order, ascending.  If a node is unreachable, print  for that node.  Each of the edges weighs 6 units of distance. For example, given a graph with  nodes and  edges, , a visual representation is:     The start node for the example is node .  Outputs are calculated for distances to nodes  through : .  Each edge is  units, and the unreachable node  has the required return distance of .   Function Description  Complete the bfs function in the editor below.  It must return an array of integers representing distances from the start node to each other node in node ascending order.  If a node is unreachable, its distance is .   bfs has the following parameter(s):   n: the integer number of nodes   m: the integer number of edges   edges: a 2D array of start and end nodes for edges s: the node to start traversals from Input Format The first line contains an integer , the number of queries.  Each of the following  sets of lines has the following format: The first line contains two space-separated integers  and , the number of nodes and edges in the graph.   Each line  of the  subsequent lines contains two space-separated integers,  and , describing an edge connecting node  to node .   The last line contains a single integer, , denoting the index of the starting node. Constraints         Output Format For each of the  queries, print a single line of  space-separated integers denoting the shortest distances to each of the  other nodes from starting position . These distances should be listed sequentially by node number (i.e., ), but should not include node . If some node is unreachable from , print  as the distance to that node. Sample Input 2 4 2 1 2 1 3 1 3 1 2 3 2  Sample Output 6 6 -1 -1 6  Explanation We perform the following two queries: The given graph can be represented as:    where our start node, , is node . The shortest distances from  to the other nodes are one edge to node , one edge to node , and an infinite distance to node  (which it's not connected to). We then print node 's distance to nodes , , and  (respectively) as a single line of space-separated integers: 6, 6, -1.   The given graph can be represented as:    where our start node, , is node . The shortest distances from  to the other nodes are one edge to node , one edge to node , and an infinite distance to node  (which it's not connected to). We then print node 's distance to nodes , , and  (respectively) as a single line of space-separated integers: 6, 6, -1.   6, 6, -1 The given graph can be represented as:    where our start node, , is node . There is only one edge here, so node  is unreachable from node  and node  has one edge connecting it to node . We then print node 's distance to nodes  and  (respectively) as a single line of space-separated integers: -1 6.  The given graph can be represented as:    where our start node, , is node . There is only one edge here, so node  is unreachable from node  and node  has one edge connecting it to node . We then print node 's distance to nodes  and  (respectively) as a single line of space-separated integers: -1 6.  -1 6 Note: Recall that the actual length of each edge is , and we print  as the distance to any node that's unreachable from .
__label__Graph-Algorithms Given an undirected weighted connected graph, find the Really Special SubTree in it. The Really Special SubTree is defined as a subgraph consisting of all the nodes in the graph and:  There is only one exclusive path from a node to every other node.  The subgraph is of minimum overall weight (sum of all edges) among all such subgraphs.   No cycles are formed To create the Really Special SubTree, always pick the edge with smallest weight. Determine if including it will create a cycle.  If so, ignore the edge.  If there are edges of equal weight available: Choose the edge that minimizes the sum  where  and  are vertices and  is the edge weight. If there is still a collision, choose any of them. Print the overall weight of the tree formed using the rules. For example, given the following edges: First choose  at weight .  Next choose  at weight .  All nodes are connected without cycles for a total weight of .   Function Description  Complete the  function in the editor below.  It should return an integer that represents the total weight of the subtree formed.   kruskals has the following parameters:   g_nodes: an integer that represents the number of nodes in the tree   g_from: an array of integers that represent beginning edge node numbers   g_to: an array of integers that represent ending edge node numbers   g_weight: an array of integers that represent the weights of each edge   Input Format The first line has two space-separated integers  and , the number of nodes and edges in the graph.   The next  lines each consist of three space-separated integers ,  and , where  and  denote the two nodes between which the undirected edge exists and  denotes the weight of that edge.   Constraints         **Note: ** If there are edges between the same pair of nodes with different weights, they are to be considered as is, like multiple edges. Output Format Print a single integer denoting the total weight of the Really Special SubTree.
__label__Graph-Algorithms __label__Tree You are given a tree (a simple connected graph with no cycles).  Find the maximum number of edges you can remove from the tree to get a forest such that each connected component of the forest contains an even number of nodes. As an example, the following tree with  nodes can be cut at most  time to create an even forest.     Function Description  Complete the evenForest function in the editor below.  It should return an integer as described.   evenForest has the following parameter(s):   t_nodes: the number of nodes in the tree   t_edges: the number of undirected edges in the tree   t_from: start nodes for each edge   t_to: end nodes for each edge, (Match by index to t_from.)   Input Format The first line of input contains two integers  and , the number of nodes and edges.  The next  lines contain two integers  and  which specify nodes connected by an edge of the tree. The root of the tree is node . Constraints     Note: The tree in the input will be such that it can always be decomposed into components containing an even number of nodes.  is the set of positive even integers. Output Format Print the number of removed edges.
__label__Graph-Algorithms Markov takes out his Snakes and Ladders game, stares at the board and wonders:   "If I can always roll the die to whatever number I want, what would be the least number of rolls to reach the destination?"    Rules The game is played with a cubic die of  faces numbered  to . Starting from square , land on square  with the exact roll of the die.  If moving the number rolled would place the player beyond square , no move is made. Starting from square , land on square  with the exact roll of the die.  If moving the number rolled would place the player beyond square , no move is made. If a player lands at the base of a ladder, the player must climb the ladder.  Ladders go up only. If a player lands at the base of a ladder, the player must climb the ladder.  Ladders go up only. If a player lands at the mouth of a snake, the player must go down the snake and come out through the tail.  Snakes go down only. If a player lands at the mouth of a snake, the player must go down the snake and come out through the tail.  Snakes go down only. Function Description  Complete the quickestWayUp function in the editor below.  It should return an integer that represents the minimum number of moves required.   quickestWayUp has the following parameter(s):   ladders: a 2D integer array where each  contains the start and end cell numbers of a ladder    snakes: a 2D integer array where each  contains the start and end cell numbers of a snake   Input Format The first line contains the number of tests, .    For each testcase:  - The first line contains , the number of ladders.  - Each of the next  lines contains two space-separated integers, the start and end of a ladder.  - The next line contains the integer , the number of snakes.  - Each of the next  lines contains two space-separated integers, the start and end of a snake. Constraints     The board is always  with squares numbered  to .  Neither square  nor square  will be the starting point of a ladder or snake.  A square will have at most one endpoint from either a snake or a ladder.   Output Format For each of the t test cases, print the least number of rolls to move from start to finish on a separate line.  If there is no solution, print -1. -1 Sample Input 2 3 32 62 42 68 12 98 7 95 13 97 25 93 37 79 27 75 19 49 47 67 17 4 8 52 6 80 26 42 2 72 9 51 19 39 11 37 29 81 3 59 5 79 23 53 7 43 33 77 21   Sample Output 3 5  Explanation For the first test:  The player can roll a  and a  to land at square .  There is a ladder to square .  A roll of  ends the traverse in  rolls.   For the second test:  The player first rolls  and climbs the ladder to square .  Three rolls of  get to square .  A final roll of  lands on the target square in  total rolls.
__label__Graph-Algorithms Given an undirected graph and a starting node, determine the lengths of the shortest paths from the starting node to all other nodes in the graph.  If a node is unreachable, its distance is -1.  Nodes will be numbered consecutively from  to , and edges will have varying distances or lengths. For example, consider the following graph of 5 nodes:   Starting at node , the shortest path to  is direct and distance .  Going from  to , there are two paths:  at a distance of  or  at a distance of .  Choose the shortest path, .  From  to , choose the shortest path through  and extend it:  for a distance of   There is no route to node , so the distance is . The distances to all nodes in increasing node order, omitting the starting node, are 5 11 13 -1. 5 11 13 -1 Function Description  Complete the shortestReach function in the editor below.  It should return an array of integers that represent the shortest distance to each node from the start node in ascending order of node number.   shortestReach has the following parameter(s):   n: the number of nodes in the graph   edges: a 2D array of integers where each  consists of three integers that represent the start and end nodes of an edge, followed by its length   s: the start node number   Input Format The first line contains , the number of test cases.  Each test case is as follows:  - The first line contains two space-separated integers  and , the number of nodes and edges in the graph.  - Each of the next  lines contains three space-separated integers , , and , the beginning and ending nodes of an edge, and the length of the edge.  - The last line of each test case has an integer , denoting the starting position.   Constraints           If there are edges between the same pair of nodes with different weights, they are to be considered as is, like multiple edges. Output Format For each of the  test cases, print a single line consisting  space separated integers denoting the shortest distance to the  nodes from starting position  in  increasing order of their labels, excluding .  For unreachable nodes, print . Sample Input 1 4 4 1 2 24 1 4 20 3 1 3 4 3 12 1  Sample Output 24 3 15  Explanation The graph given in the test case is shown as :   * The lines are weighted edges where weight denotes the length of the edge. The shortest paths followed for the three nodes 2, 3 and 4 are as follows : 1/S->2 - Shortest Path Value :  1/S->3 - Shortest Path Value :  1/S->3->4 - Shortest Path Value :
__label__Graph-Algorithms __label__Mathematics __label__Data-Structures One day Bob drew a tree, , with  nodes and  edges on a piece of paper. He soon discovered that parent of a node depends on the root of the tree. The following images shows an example of that:  Learning the fact, Bob invented an exciting new game and decided to play it with Alice. The rules of the game is described below: Bob picks a random node to be the tree's root and keeps the identity of the chosen node a secret from Alice. Each node has an equal probability of being picked as the root. Alice then makes a list of  guesses, where each guess is in the form u v and means Alice guesses that  is true. It's guaranteed that an undirected edge connecting  and  exists in the tree.  u v For each correct guess, Alice earns one point. Alice wins the game if she earns at least  points (i.e., at least  of her guesses were true). Alice and Bob play  games. Given the tree, Alice's guesses, and the value of  for each game, find the probability that Alice will win the game and print it on a new line as a reduced fraction in the format p/q. p/q Input Format The first line contains an integer, , denoting the number of different games. The subsequent lines describe each game in the following format: The first line contains an integer, , denoting the number of nodes in the tree. The  subsequent lines contain two space-separated integers,  and , defining an undirected edge between nodes  and .  The next line contains two space-separated integers describing the respective values of  (the number of guesses) and  (the minimum score needed to win). Each of the  subsequent lines contains two space-separated integers,  and , indicating Alice guesses . Constraints     The sum of  over all test cases won't exceed . No two guesses will be identical.  Scoring For  of the maximum score, . For  of the maximum score, . Output Format Print the probability as a reduced fraction in the format p/q. p/q Note: Print 0/1 if the probability is  and print 1/1 if the probability is . 0/1 1/1 Sample Input 0 Sample Output 0 Explanation 0 Alice and Bob play the following  games: Alice makes two guesses,  and , meaning she guessed that  and . To win the game, at least  of her guesses must be true. In the diagrams below, you can see that at least  guesses are true if the root of the tree is either node  or :  There are  nodes in total and the probability of picking node  or  as the root is , which reduces to . Alice makes two guesses,  and , meaning she guessed that  and . To win the game, at least  of her guesses must be true. In the diagrams below, you can see that at least  guesses are true if the root of the tree is either node  or :  There are  nodes in total and the probability of picking node  or  as the root is , which reduces to . In this game, Alice only wins if node  is the root of the tree. There are  nodes in total, and the probability of picking node  as the root is .
__label__Graph-Algorithms __label__Greedy-Algorithms Given a graph which consists of several edges connecting its nodes, find a subgraph of the given graph with the following properties:   The subgraph contains all the nodes present in the original graph.   The subgraph is of minimum overall weight (sum of all edges) among all such subgraphs.   It is also required that there is exactly one, exclusive path between any two nodes of the subgraph.  One specific node  is fixed as the starting point of finding the subgraph using Prim's Algorithm.  Find the total weight or the sum of all edges in the subgraph.   For example, consider a graph with  nodes.  Possible edges are  weight ,  weight  and  weight .  Starting from node , we select the lower weight path, i.e. , weight .  From node , there is only one path left,  weight .  We have all nodes connected at a cost of .   Function Description Complete the prims function in the editor below.  It should return and integer that represents the minimum weight to connect all nodes in the graph provided.   prims has the following parameter(s):   n: an integer that represents the number of nodes in the graph   edges: a two-dimensional array where each element contains three integers, two nodes numbers that are connected and the weight of that edge   start: an integer that represents the number of the starting node   Input Format The first line has two space-separated integers  and , the number of nodes and edges in the graph.   Each of the next  lines contains three space-separated integers ,  and , the end nodes of , and the edge's weight.  The last line has an integer , denoting the starting node.   Constraints         There may be multiple edges between two nodes. Output Format Print a single integer denoting the total weight of the subgraph.   Sample Input 0 Sample Output 0 Explanation 0 The graph given in the test case is shown as :  The starting node is  (in the given test case) Applying the Prim's algorithm, edge choices available at first are :  (WT. 3)  and  (WT. 4) , out of which  is chosen (smaller weight of edge). Now the available choices are :   (WT. 4) ,  (WT. 5) ,  (WT. 2) and  (WT. 6) , out of which  is chosen by the algorithm.  Following the same method of the algorithm, the next chosen edges , sequentially are :  and . Hence the overall sequence of edges picked up by Prim's are:   and the total weight of the MST (minimum spanning tree) is :
__label__Graph-Algorithms The mayor of Farzville is studying the city's road system to find ways of improving its traffic conditions. Farzville's road system consists of  junctions connected by  bidirectional toll roads, where the  toll road connects junctions  and . In addition, some junctions may not be reachable from others and there may be multiple roads connecting the same pair of junctions.    Each toll road has a toll rate that's paid each time it's used. This rate varies depending on the direction of travel:   If traveling from  to , then the toll rate is .  If traveling from  to , then the toll rate is . It is guaranteed that .    For each digit , the mayor wants to find the number of ordered pairs of  junctions such that  and a path exists from  to  where the total cost of the tolls (i.e., the sum of all toll rates on the path) ends in digit . Given a map of Farzville, can you help the mayor answer this question? For each digit  from  to , print the the number of valid ordered pairs on a new line. Note: Each toll road can be traversed an unlimited number of times in either direction.  Input Format The first line contains two space-separated integers describing the respective values of  (the number of junctions) and  (the number of roads).  Each line  of the  subsequent lines describes a toll road in the form of three space-separated integers, , , and .   Constraints           Output Format Print ten lines of output. Each line  (where ) must contain a single integer denoting the answer for . For example, the first line must contain the answer for , the second line must contain the answer for , and so on. Sample Input 0 Sample Output 0 Explanation 0 The table below depicts the distinct pairs of junctions for each :     Note the following: There may be multiple paths between each pair of junctions.  Junctions and roads may be traversed multiple times. For example, the path  is also valid, and it has total cost of .  An ordered pair can be counted for more than one . For example, the pair  is counted for  and . Each ordered pair must only be counted once for each . For example, the paths  and  both have total costs that end in , but the pair  is only counted once.
__label__Graph-Algorithms You are a real estate broker in ancient Knossos. You have  unsold houses, and each house  has an area, , and a minimum price, . You also have  clients, and each client  wants a house with an area greater than  and a price less than or equal to . Each client can buy at most one house, and each house can have at most one owner. What is the maximum number of houses you can sell? Input Format The first line contains two space-separated integers describing the respective values of  (the number of clients) and  (the number of houses).  Each line  of the  subsequent lines contains two space-separated integers describing the respective values of  and  for client .  Each line  of the  subsequent lines contains two space-separated integers describing the respective values of  and  for house . Constraints  , where . , where . Output Format Print a single integer denoting the maximum number of houses you can sell. Sample Input 0 Sample Output 0 Explanation 0 Recall that each client  is only interested in some house  where  and . The diagram below depicts which clients will be interested in which houses:  Client  will be interested in house  because it has more than  units of space and costs less than . Both of the other houses are outside of this client's price range. Client  will be interested in houses  and , as both these houses have more than  units of space and cost less than . They will not be interested in the remaining house because it's too small. Client  will be interested in house  because it has more than  units of space and costs less than . They will not be interested in the other two houses because they are too small. All three clients are interested in the same two houses, so you can sell at most two houses in the following scenarios:    Client  buys house  and client  buys house . Client  buys house  and client  buys house . Client  buys house  and client  buys house . Thus, we print the maximum number of houses you can sell, , on a new line.
__label__Graph-Algorithms A clique in a graph is set of nodes such that there is an edge between any two distinct nodes in the set. Finding the largest clique in a graph is a computationally difficult problem. Currently no polynomial time algorithm  is known for solving this. However, you wonder what is the minimum size of the largest clique in any graph with  nodes and  edges.   For example, consider a graph with  nodes and  edges.  The graph below shows  nodes with  edges and no cliques.  It is evident that the addition of any  edge must create two cliques with  members each.    Input Format The first line contains an integer , the number of test cases.   Each of the next  lines contains two space-separated integers  and .   Constraints      Output Format For each test case, print the minimum size of the largest clique that must be formed given  and .    Sample Input 3   3 2   4 6   5 7  Sample Output 2   4   3  Explanation For the first case, we have two cliques with two nodes each:     For the second test case, the only valid graph having  nodes and  edges is one where each pair of nodes is connected. So the size of the largest clique cannot be smaller than .     For the third test case, it is easy to verify that any graph with  nodes and .  The  solid lines in the graph below indicate the maximum edges that can be added without forming a clique larger than .  The dashed lines could connect any two nodes not connected by solid lines producing a clique of size .     Hints  Turan's theorem gives us an upper bound on the number of edges a graph can have if we wish that it should not have a clique of size . Though the bound is not exact, it is easy to extend the statement of the theorem to get an exact bound in terms of  and . Once this is done, we can binary search for the largest  such that . See: Turan's Theorem
__label__Graph-Algorithms __label__Bit __label__Graph-Algorithms Consider an undirected graph containing  nodes and  edges. Each edge  has an integer cost, , associated with it. The penalty of a path is the bitwise OR of every edge cost in the path between a pair of nodes,  and . In other words, if a path contains edges , then the penalty for this path is  OR  OR ... OR . Given a graph and two nodes,  and , find the path between  and  having the minimal possible penalty and print its penalty; if no such path exists, print  to indicate that there is no path from  to . Note: Loops and multiple edges are allowed. The bitwise OR operation is known as or in Pascal and as | in C++ and Java. Input Format The first line contains two space-separated integers,  (the number of nodes) and  (the number of edges), respectively. Each line  of the  subsequent lines contains three space-separated integers , , and , respectively, describing edge  connecting the nodes  and  and its associated penalty (). The last line contains two space-separated integers,  (the starting node) and  (the ending node), respectively. Constraints       Output Format Print the minimal penalty for the optimal path from node  to node ; if no path exists from node  to node , print . Sample Input 3 4 1 2 1 1 2 1000 2 3 3 1 3 100 1 3  Sample Output 3  Explanation The optimal path is .   and .  The penalty for this path is:  OR , so we print .
__label__Graph-Algorithms Killgrave wants to use his mind control powers to get money from the Justice League superheroes living in  houses in Happy Harbor that are numbered sequentially from  to . There are  roads, and each road  connects two different houses,  and . Each superhero house  (where ) has  dollars stashed away for a rainy day. As long as a superhero is home at house , Killgrave knows they will hand over all of their saved money, . Once he gets money from them, he moves on to the next house. However, the superheroes are cunning; when Killgrave comes to house , every neighbor immediately connected to house  by a single road skips town for a couple of days (making it impossible for Killgrave to get money from them). In other words, after Killgrave visits all the superheroes he wants, there will be no road in which he was able to get money from both houses on either end of the road. What is the maximum amount of money Killgrave can collect from the superheroes, and how many different ways can Killgrave get that amount of money? Two ways are considered to be different if the sets of visited houses are different. Note: Killgrave can start at an arbitrary house and doesn't have to only use the roads. Input Format The first line contains two space-separated integers,  (the number of houses) and  (the number of roads), respectively.  The second line contains  space-separated integers, where each integer  describes the amount of money, , at house .  Each line  of the  subsequent lines contains two space-separated integers defining a road connecting houses  and . Every road connects a different pair of houses. Constraints    , where  No unordered pair  will appear more than once. Output Format Print two space-separated integers: The first integer must denote the maximum amount of money Killgrave can get out of the Justice League. The second integer must denote the number of different ways he can collect that amount of money. Sample Input 3 2 6 8 2 1 2 3 2  Sample Output 8 2  Explanation  Killgrave has two possible courses of action: Visit house  and get  dollars. Visit houses  and  and get  dollars.  Both of these options result in  dollars, so we know that this is maximal. Thus, we print the maximum amount of money () followed by the number of ways he can get that amount of money () as two space-separated values on a single line.
__label__Graph-Algorithms __label__Mathematics __label__Greedy-Algorithms You're researching friendships between groups of  new college students where each student is distinctly numbered from  to . At the beginning of the semester, no student knew any other student; instead, they met and formed individual friendships as the semester went on. The friendships between students are: Bidirectional. If student  is friends with student , then student  is also friends with student . Transitive. If student  is friends with student  and student  is friends with student , then student  is friends with student . In other words, two students are considered to be friends even if they are only indirectly linked through a network of mutual (i.e., directly connected) friends.  The purpose of your research is to find the maximum total value of a group's friendships, denoted by . Each time a direct friendship forms between two students, you sum the number of friends that each of the  students has and add the sum to .  You are given  queries, where each query is in the form of an unordered list of  distinct direct friendships between  students. For each query, find the maximum value of  among all possible orderings of formed friendships and print it on a new line. Input Format The first line contains an integer, , denoting the number of queries. The subsequent lines describe each query in the following format: The first line contains two space-separated integers describing the respective values of  (the number of students) and  (the number of distinct direct friendships). Each of the  subsequent lines contains two space-separated integers describing the respective values of  and  (where ) describing a friendship between student  and student . Constraints       Output Format For each query, print the maximum value of  on a new line. Sample Input 0 Sample Output 0 Explanation 0  The value of  is maximal if the students form the  direct friendships in the following order: Students  and  become friends:   We then sum the number of friends that each student has to get . Students  and  become friends:   We then sum the number of friends that each student has to get . Students  and  become friends:    We then sum the number of friends that each student has to get . Students  and  become friends:    We then sum the number of friends that each student has to get . Students  and  become friends:    We then sum the number of friends that each student has to get . Students  and  become friends:    We then sum the number of friends that each student has to get . Students  and  become friends:    We then sum the number of friends that each student has to get . Students  and  become friends:    We then sum the number of friends that each student has to get . When we add the sums from each step, we get . We then print  on a new line.
__label__Graph-Algorithms Allison loves graph theory and just started learning about Minimum Spanning Trees(MST). She has three integers, , , and , and uses them to construct a graph with the following properties: The graph has  nodes and  undirected edges where each edge has a positive integer length. No edge may directly connect a node to itself, and each pair of nodes can only be directly connected by at most one edge. The graph is connected, meaning each node is reachable from any other node. The value of the minimum spanning tree is . Value of the MST is the sum of all the lengths of all edges of which are part of the tree. The sum of the lengths of all edges is as small as possible. For example, let's say ,  and . We need to construct a graph with  nodes and  edges. The value of minimum spanning tree must be . The diagram belows shows a way to construct such a graph while keeping the lengths of all edges is as small as possible:  Here the sum of lengths of all edges is . Given , , and  for  graphs satisfying the conditions above, find and print the minimum sum of the lengths of all the edges in each graph on a new line. Note: It is guaranteed that, for all given combinations of , , and , we can construct a valid graph. Input Format The first line contains an integer, , denoting the number of graphs.  Each of the  subsequent lines contains three space-separated integers describing the respective values of  (the number of nodes in the graph),  (the number of edges in the graph), and  (the value of the MST graph). Constraints For  of the maximum score:                      For  of the maximum score:                      For  of the maximum score:                      For  of the maximum score:                      Output Format For each graph, print an integer on a new line denoting the minimum sum of the lengths of all edges in a graph satisfying the given conditions. Sample Input 2 4 5 4 4 3 6  Sample Output 7 6  Explanation Graph : The answer for this sample is already explained the problem statement. Graph : We must construct a graph with  nodes,  edges, and an MST value of . Recall that a connected graph with  nodes and  edges is already a tree, so the MST will contain all  edges and the total length of all the edges of the graph will be equal to the value of the minimum spanning tree. So the answer is .
__label__Graph-Algorithms Jack has just moved to a new city called Rapture. He wants to use the public public transport system. The fare rules are as follows:   Each pair of connected stations has a fare assigned to it regardless of direction of travel.   If a passenger travels from station A to station B, he only has to pay the  difference between the fare from A to B and the cumulative fare that he has paid to reach station A [fare(A,B) - total fare to reach station A].  If the difference is negative, he can travel free of cost from A to B.   Jack is low on cash and needs your help to figure out the most cost efficient way to go from the first station to the last station. Given the number of stations  (numbered from  to ), and the fare between the  pairs of stations that are connected, determine the lowest fare from station  to station .   For example, there are  stations with undirected connections at the costs indicated:     Travel from station  costs  for the first segment () then the cost differential, an additional  for the remainder.  The total cost is .  Travel from station  costs  for the first segment, then an additional  for the remainder, a total cost of .  The lower priced option costs .   Complete the program in the editor below.  It should print the cost of the lowest priced route from station  to station .  If there is no route, print NO PATH EXISTS.   NO PATH EXISTS Function Description  Complete the getCost function in the editor below.  It should print the cost of the lowest priced route from station  to station , or if there is no route, print NO PATH EXISTS.  There is no expected return value from the function. NO PATH EXISTS getCost has the following parameters: : an integer that represents the number of stations in the network   : an array of integers that represent end stations of a bidirectional connection   : an array of integers that represent end stations of a bidirectional connection, where  is connected to   at cost   : an array of integers that represent the cost of travel between associated stations   Input Format The first line contains two space-separated integers,  and , the number of stations and the number of connections between them.  Each of the next  lines contains three space-separated integers,  and , the starting and ending stations that are connected and the fare between them.   Constraints       Output Format The minimum fare to be paid to reach station  from station . If the station  cannot be reached from station , print NO PATH EXISTS NO PATH EXISTS
__label__Graph-Algorithms A crab is an undirected graph which has two kinds of vertices: 1 head, and K feet , and exactly K edges which join the head to each of the feet.( 1 <= K <= T, where T is given) Given an undirected graph, you have to find in it some vertex-disjoint subgraphs where each one is a crab . The goal is to select those crabs in such a way that the total number of vertices covered by them is maximized. Note: two graphs are vertex-disjoint if they do not have any vertices in common.  Input Format The first line of input contains a single integer C. C test-cases follow. The first line of each test-case contains three integers N, T, and M (the number of nodes, max number of feet in the crab graph, and number of edges, respectively). Each of next M lines contains two space separated values v1i, v2i meaning that the there is an edge between vertices v1i and v2i. Note that the graph doesn't have parallel edges or loops. Constraints 1 <= C <= 10   2 <= T <= 100   2 <= N <= 100   0 <= M <= N * (N-1)/2   1 <= v1i <= N   1 <= v2i <= N Output Format For each test-case, output a single integer indicating the maximum number of vertices which can be covered by vertex-disjoint sub-graphs of crab- graphs. Sample Input 2   8 2 7   1 4   2 4   3 4   5 4   5 8   5 7   5 6   6 3 8   1 2   2 3   3 4   4 5   5 6   6 1   1 4   2 5  Sample Output 6   6  Explanation Test #1: The graph for this test-case below. Because T = 2, each crab can have a maximum of 2 feet => each crab can cover a maximum of 3 nodes. We can cover 6 nodes of this graph with these two crabs: One of the crabs has 4 as its head and 1 and 3 as its feet, the other crab has 5 as its head and 7 and 8 as its feet. No additional crabs can be added. The above is not a unique solution: any combination of two crabs, with one head at 4 and one head at 5, will suffice. We could have also chosen Head[4]feet[1,2] and Head[5]feet[6,7] as our two crabs.  Test #2: The graph for this test-case below. We can cover all 6 nodes using two crabs. One of the crabs has 2 as its head and 1 and 3 as its feet, the other crab has 5 as its head and 4 and 6 as its feet.
__label__Graph-Algorithms There are  colors of beads. You have  beads of the  color. You want to make an ornament by joining all the beads together. You create the ornament by using the following algorithm: Step # Arrange all the beads in any order such that beads of the same color are placed together. Step # Arrange all the beads in any order such that beads of the same color are placed together. Step # The ornament initially consists of only the first bead from the arrangement. Step # The ornament initially consists of only the first bead from the arrangement. Step # For each subsequent bead in order, join it to a bead of the same color in the ornament. If there is no bead of the same color, it can be joined to any bead in the ornament. Step # For each subsequent bead in order, join it to a bead of the same color in the ornament. If there is no bead of the same color, it can be joined to any bead in the ornament. All beads are distinct, even if they have the same color. How many different ornaments can be formed by following the above algorithm? Two ornaments are considered different if two beads are joined by a thread in one configuration, but not in the other. Update/clarification Think of the bead formation as a tree and not as a straight line. Any number of beads can be connected to a bead. Input Format The first line contains the number of test cases .  test cases follow. Each test case contains  on the first line - the number of colors of beads. The next line contains  integers, where the  integer  denotes the number of beads of the  color. Constraints    Output Format Output  lines, one for each test case. All answers should be output modulo . Sample Input 5 2 2 1 2 2 2 1 4 2 3 1 5 1 1 1 1 1  Sample Output Explanation Testcase 1: Let us label the beads A1,A2 and B1. Initially, they can be arranged in  ways - "A1,A2,B1", "A2,A1,B1", "B1,A1,A2", and "B1,A2,A1".  For each of the first two arrangements, an ornament can be formed in  ways (A1-A2-B1 or B1-A1-A2 from the first one and A2-A1-B1 or B1-A2-A1 from the second one).  For each of the last two arrangements, an ornament can be formed in  way.  However, of the total  possible ornaments, there are only  unique ones : A1 - A2 - B1, and A2 - A1 - B1. Testcase 2: The possible unique ornaments are A1 - A2 - B1 - B2, A1 - A2 - B2 - B1, A2 - A1 - B1 - B2, and A2 - A1 - B2 - B1. Testcase 3: For the third test-case, it might be easier to see there are only  types of graphs on  vertices: the path or the star. It's not hard to see that there are  paths and  stars (explanation courtesy: zlangley) Testcase 5: For the fifth test-case, a lot of people claimed that the total number of possible ways is . But that is wrong. The correct answer is . Here's the hint: Once again, you've to think of it as a tree.  So one possible arrangement can be: A is a root node and has two edges (A-B and A-C). Now, think of B as a sub-root node with two edges (B-D and B-E). Similarly, you can figure out the other possible bead arrangements. This will lead you to the correct answer.
__label__Graph-Algorithms __label__Tree Byteland has  cities (numbered from  to ) and  bidirectional roads. It is guaranteed that there is a route from any city to any other city.  Jeanie is a postal worker who must deliver  letters to various cities in Byteland. She can start and end her delivery route in any city. Given the destination cities for  letters and the definition of each road in Byteland, find and print the minimum distance Jeanie must travel to deliver all  letters. Note: The letters can be delivered in any order. Input Format The first line contains two space-separated integers,  (the number of cities) and  (the number of letters), respectively.  The second line contains  space-separated integers describing the delivery city for each letter.  Each line  of the  subsequent lines contains  space-separated integers describing a road as , where  is the distance (length) of the bidirectional road between cities  and . Constraints    Output Format Print the minimum distance Jeanie must travel to deliver all  letters. Sample Input 0 Sample Output 0 Explanation 0 Jeanie has  letters she must deliver to cities , , and  in the following map of Byteland:  One of Jeanie's optimal routes is , for a total distanced traveled of . Thus, we print  on a new line.
__label__Graph-Algorithms Given a directed weighted graph where weight indicates distance, for each query, determine the length of the shortest path between nodes.  There may be many queries, so efficiency counts.   For example, your graph consists of  nodes as in the following:   A few queries are from node  to node , node  to node , and node  to node .   There are two paths from  to :  at a distance of    at a distance of   In this case we choose path .   There are two paths from  to :  at a distance of    at a distance of   In this case we choose path .   There is no path from  to , so we return .   There is no path from  to , so we return .   There is one path from  to :    at a distance of .   There is one path from  to :    at a distance of .   Input Format The first line has two integers  and , the number of nodes and the number of edges in the graph.  Each of the next  lines contains three space-separated integers   and , the two nodes between which the directed edge  exists, and , the length of the edge.  The next line contains a single integer , the number of queries.  Each of the next  lines contains two space-separated integers  and , denoting the start and end nodes for traversal.   Constraints           The distance from a node to itself is always  and it is always reachable from itself. If there are edges between the same pair of nodes with different weights, the last one (most recent) is to be considered as the only edge between them. Output Format Print  lines, each containing a single integer specifying the shortest distance for the query.   If the destination node is not reachable, return .   Sample Input 4 5 1 2 5 1 4 24 2 4 6 3 4 4 3 2 7 3 1 2 3 1 1 4  Sample Output 5 -1 11  Explanation The graph given in the test case is shown as :  The shortest paths for the 3 queries are : : The direct Path is shortest with weight 5 : The direct Path is shortest with weight 5 : There is no way of reaching node 1 from node 3 : There is no way of reaching node 1 from node 3  The indirect path is shortest with weight (5+6) = 11 units. The direct path is longer with 24 units length.  The indirect path is shortest with weight (5+6) = 11 units. The direct path is longer with 24 units length.
__label__Graph-Algorithms __label__Graph-Algorithms John lives in HackerLand, a country with  cities and  bidirectional roads. Each of the roads has a distinct length, and each length is a power of two (i.e.,  raised to some exponent). It's possible for John to reach any city from any other city. Given a map of HackerLand, can you help John determine the sum of the minimum distances between each pair of cities? Print your answer in binary representation.  Input Format The first line contains two space-seperated integers denoting  (the number of cities) and  (the number of roads), respectively.  Each line  of the  subsequent lines contains the respective values of , , and  as three space-separated integers. These values define a bidirectional road between cities  and  having length . Constraints   ,   If , then . Output Format Find the sum of minimum distances of each pair of cities and print the answer in binary representation.  Sample Input 5 6 1 3 5 4 5 0 2 1 3 3 2 1 4 3 4 4 2 2  Sample Output 1000100  Explanation In the sample, the country looks like this:  Let  be the minimum distance between city  and city .
__label__Graph-Algorithms __label__Tree It has been a prosperous year for King Charles and he is rapidly expanding his empire. In fact, he recently invaded his neighboring country and set up a new kingdom! This kingdom has many cities connected by one-way roads. To ensure higher connectivity, two cities are sometimes directly linked by more than one road. In the new kingdom, King Charles has made one of the cities his financial capital and another city his warfare capital. He wants a better connectivity between these two capitals. The connectivity of a pair of cities,  and , is defined as the number of different paths from city  to city . A path may use a road more than once if possible. Two paths are considered different if they do not use the same sequence of roads the same number of times. There are  cities numbered  to  in the new kingdom and  one-way roads. City  is the financial capital and city  is the warfare capital.  Determine the number of different paths between cities  and . Since the number may be large, print the result modulo  or .    Note: Two roads may connect the same cities, but they are still considered distinct for path connections.  For example, there are  cities connected by  roads as shown in the following graph:   There are two direct paths and one cyclic path.  Direct paths are  and  and 4 \rightarrow 53 \leftrightarrow 44 \rightarrow 3$ did not exist, there would be only the two direct paths. Function Description Complete the countPaths function in the editor below.  It should print your result, modulo  if there are limited paths or INFINITE PATHS if they are unlimited. There is no expected return value.    INFINITE PATHS countPaths has the following parameters:  - n: the integer number of cities  - edges: a 2D integer array where  is the source city and  is the destination city for the directed road   Input Format The first line contains two integers  and .  Each of the following  lines contains two space-separated integers that represent source and destination cities for a directed connection. Constraints       Output Format Print the number of different paths from city  to city  modulo . If there are infinitely many different paths, print INFINITE PATHS. INFINITE PATHS Sample Input Sample Input 0  5 5   1 2   2 4   2 3   3 4   4 5  Sample Output 0  2  Explanation 0  There are two possible paths from city  to city :      Sample Input 1  5 5   1 2   4 2   2 3   3 4   4 5  Sample Output 1  INFINITE PATHS   Explanation 1   The cycle in the graph can be traversed an infinite number of times on the way to city .
__label__Graph-Algorithms Sophia is playing a game on the computer. There are two random arrays A & B, each having the same number of elements. The game begins with Sophia removing a pair (Ai, Bj) from the array if they are not co-prime. She keeps a count on the number of times this operation is done.  Sophia wants to find out the maximal number of times(S) she can do this on the arrays. Could you help Sophia find the value? Input Format The first line contains an integer n. 2 lines follow, each line containing n numbers separated by a single space. The format is shown below.  n A[0] A[1] ... A[n - 1] B[0] B[1] ... B[n - 1]  Constraints 0 < n <= 105  2 <= A[i], B[i] <= 109  Each element in both arrays are generated randomly between 2 and 109 Output Format Output S which is the maximum number of times the above operation can be made. Sample Input 4 2 5 6 7 4 9 10 12  Sample Output 3  Explanation You can remove: (2, 4) (5, 10) (6, 9)  hence 3.
__label__Graph-Algorithms Detective Rust is investigating a homicide and he wants to chase down the murderer. The murderer knows he would definitely get caught if he takes the main roads for fleeing, so he uses the village roads (or side lanes) for running away from the crime scene. Rust knows that the murderer will take village roads and he wants to chase him down. He is observing the city map, but it doesn't show the village roads (or side lanes) on it and shows only the main roads.  The map of the city is a graph consisting  nodes (labeled  to ) where a specific given node  represents the current position of Rust and the rest of the nodes denote other places in the city, and an edge between two nodes is a main road between two places in the city. It can be suitably assumed that an edge that doesn't exist/isn't shown on the map is a village road (side lane). That means, there is a village road between two nodes  and  iff(if and only if) there is no city road between them.   In this problem, distance is calculated as number of village roads (side lanes) between any two places in the city. Rust wants to calculate the shortest distance from his position (Node ) to all the other places in the city if he travels only using the village roads (side lanes). Note: The graph/map of the city is ensured to be a sparse graph. Input Format The first line contains , denoting the number of test cases.  testcases follow.  First line of each test case has two integers , denoting the number of cities in the map and , denoting the number of roads in the map.  The next  lines each consist of two space-separated integers  and  denoting a main road between city  and city .  The last line has an integer , denoting the current position of Rust.  Constraints         Note  No nodes will have a road to itself.  There will not be multiple edges between any pair of nodes i.e. there is at most one undirected edge between them.  Graph is guaranteed to be sparse.  It is guranteed that there will be a path between any pair of nodes using the side lanes. Output Format For each of T test cases, print a single line consisting of N-1 space separated integers, denoting the shortest distances of the remaining N-1 places from Rust's position (that is all distances, except the source node to itself) using the village roads/side lanes in ascending order based on vertex number.   Sample Input 0 Sample Output 0 Explanation 0 The graph in the first testcase can be shown as:  Here the source node is 1 (marked S).  The distance from 1 to 2 is 3. Path: 1 -> 3 -> 4 -> 2  The distance from 1 to 3 is 1. Path: 1 -> 3  The distance from 1 to 4 is 2. Path: 1 -> 3 -> 4
__label__Graph-Algorithms There are N problems numbered 1..N which you need to complete. You've arranged the problems in increasing difficulty order, and the ith problem has estimated difficulty level i. You have also assigned a rating vi to each problem. Problems with similar vi values are similar in nature. On each day, you will choose a subset of the problems and solve them. You've decided that each subsequent problem solved on the day should be tougher than the previous problem you solved on that day. Also, to make it less boring, consecutive problems you solve should differ in their vi rating by at least K. What is the least number of days in which you can solve all problems? Input Format The first line contains the number of test cases T. T test cases follow. Each case contains an integer N and K on the first line, followed by integers v1,...,vn on the second line. Constraints 1 <= T <= 100  1 <= N <= 300  1 <= vi <= 1000  1 <= K <= 1000 Output Format Output T lines, one for each test case, containing the minimum number of days in which all problems can be solved. Sample Input 2   3 2   5 4 7   5 1   5 3 4 5 6  Sample Output 2   1  Explanation For the first example, you can solve the problems with rating 5 and 7 on the first day and the problem with rating 4 on the next day. Note that the problems with rating 5 and 4 cannot be completed consecutively because the ratings should differ by at least K (which is 2). Also, the problems cannot be completed in order 5,7,4 in one day because the problems solved on a day should be in increasing difficulty level. For the second example, all problems can be solved on the same day.
__label__Graph-Algorithms Fedya is a seasoned traveller and is planning his trip to Treeland. Treeland is a country with an ancient road system which is in the form of a tree structure.  cities of Treeland are numbered by  positive integers: . Fedya has not yet decided the starting point (city) of his journey and the cities he will visit. But there are a few things you know about Fedya's trip: Fedya is fond of travelling to great distances. So if he is currently located in city , his destination will be a city which is most distant from city . Fedya is fond of travelling to great distances. So if he is currently located in city , his destination will be a city which is most distant from city . There might be more than 1 such cities. In that case, Fedya will choose a city that was already visited as less times as possible in this journey. There might be more than 1 such cities. In that case, Fedya will choose a city that was already visited as less times as possible in this journey. There still might be more than 1 such cities. In that case, Fedya will go to the city with the smallest number. There still might be more than 1 such cities. In that case, Fedya will go to the city with the smallest number. Fedya has prepared a list of  possible journeys. Each one is characterized by two integers - the starting city  and the total number of cities to be visited, . For each of them, he is keen to know the total distance travelled by him. Input Format The first line of input will contain two space separated integers  and  - the number of cities and the number of possible journeys. Then, there will be  lines, each of them will contain two space separated integers  , denoting the bi-directional road between the cities with numbers  and  with the unitary length. Then there will be  lines, each of them will have two space separated integers  and , denoting a journey. Constraints    Output Format For each journey, output the travelled distance on a separate line. Sample Input Sample Output   Explanation The tree in question is given in the picture below.   4 6 indicates that Fedya starts at 4. Now we see that the most distant city from 4 is 8. Fedya now travels to city 8.  From 8, the most distance cities are [4, 3]. As 4 is already visited, he chooses to visit city 3. From city 3, he revisits city 8 and so on. The cities in the order of visit is 4 - > 8 -> 3 -> 8 -> 4 -> 8 -> 3 which sums to 24. Hence, the answer.   4 6 6 3 indicates that Fedya starts at city 6. From 6, the most distant cities are [3,4,8]. In this leg of the journey, no city is visited and hence Fedya chooses to visit the city with the smallest number 3. From 3, he visits 8 and then he ends his trip at city 4 which sums to 3 + 4 + 4 = 11. Hence, the answer.   6 3
__label__Graph-Algorithms __label__Tree The kingdom of Zion has cities connected by bidirectional roads.  There is a unique path between any pair of cities. Morpheus has found out that the machines are planning to destroy the whole kingdom.  If two machines can join forces, they will attack.  Neo has to destroy roads connecting cities with machines in order to stop them from joining forces.  There must not be any path connecting two machines. Each of the roads takes an amount of time to destroy, and only one can be worked on at a time.  Given a list of edges and times, determine the minimum time to stop the attack. For example, there are  cities called .  Three of them have machines and are colored red.  The time to destroy is shown next to each road.  If we cut the two green roads, there are no paths between any two machines.  The time required is .     Function Description Complete the function minTime in the editor below.  It must return an integer representing the minimum time to cut off access between the machines. minTime has the following parameter(s): roads: a two-dimensional array of integers, each  where cities are connected by a road that takes  to destroy   machines: an array of integers representing cities with machines   Input Format The first line of the input contains two space-separated integers,  and , the number of cities and the number of machines.   Each of the following  lines contains three space-separated integers, , and .  There is a bidirectional road connecting  and , and to destroy this road it takes  units. Each of the last  lines contains an integer, , the label of a city with a machine.    Constraints       Output Format Return an integer representing the minimum time required to disrupt the connections among all machines. Sample Input 5 3 2 1 8 1 0 5 2 4 5 1 3 4 2 4 0  Sample Output 10  Explanation  The machines are located at the cities ,  and . Neo can destroy the green roads resulting in a time of .  Destroying the road between cities  and  instead of between  and  would work, but it's not minimal.
__label__Graph-Algorithms __label__Graph-Algorithms Dave is a die-hard fan of a show called "HackerRank", in which a young programmer uses her problem-solving abilities to solve crimes. He splurged on a Digital Video Recorder (DVR) so that he can record HackerRank episodes and watch them later. Luckily, Dave managed to get his hands on schedules for all the episodes in each upcoming season. Each season has  episodes numbered from  to . Each episode airs twice; the first time it's called "live", and the second time it's called "repeat". So, for each episode, we have  integers,  and  for the live airing and  and  for the repeat airing, where  is episode's start time and and  is its end time. All times are given as integers representing the number of minutes passed since the start of the season. Episodes broadcast on multiple channels, so some of the air times overlap and the episodes may not broadcast sequentially. It's possible that both the live and repeat broadcasts of some episode  are held before episode , even though . In addition, live and repeat broadcasts of the same episode may differ in length due to the number of advertisements during the broadcast.  Dave only has one TV with a DVR attached to it, and the DVR is capable of recording one episode at a time. For each episode in a season, Dave first decides whether or not he will record it. If he decides to record it, he will either record it during  or . Dave will only ever record one of the two airings of an episode, and he always records full episodes. This means that once he starts recording an episode, he will always record it until the end (i.e., he never records partial episodes).  Dave realizes that it might not be possible for him to record all episodes successfully, so instead of focusing on recording all episodes of HackerRank (which may be impossible), he decides to record all consecutively airing episodes whose episode number occurs in some inclusive  interval such that  (i.e., the number of consecutive episodes recorded) is as large as possible.    Given the programming schedule for each season, find  and  episode numbers for largest range of consecutive episodes Dave can record during that season and print these respective values as two space-separated integers on a new line. If two or more such intervals exist, choose the one having the smallest  value. Input Format The first line contains a single positive integer, , denoting number of seasons of HackerRank.  The subsequent lines describe each of the  seasons in the following format: The first line contains an integer, , denoting the number of episodes in the season. Each line  of the  subsequent line contains four space-separated integers describing the respective values of , , , and . Constraints       Output Format On a new line for each season, print two space-separated integers denoting the respective  and  (inclusive) values for the maximum possible range of consecutive episodes Dave can record such that  is as large as possible. If more than one such interval exists, choose the interval having the smallest . Sample Input 3 3 10 20 30 40 20 35 21 35 14 30 35 50 1 10 20 30 40 3 11 19 31 39 12 38 13 37 10 20 30 40  Sample Output 1 2 1 1 1 1  Explanation For the first season, Dave records the live airing of episode  and the repeat airing of episode . Note that it is not possible to record episodes ,  and  simultaneously. For the second season, there is only one episode so Dave records from episode  to episode  and we print 1 1 on a new line. 1 1 For the third season, Dave must choose to record either episode  or episode  (episode  starts while episode  is still airing and ends after episode  starts); he cannot record both, because he only wants to record consecutive episodes. Thus, we pick the episode with the smallest  value, which is episode , and print 1 1 as we are only recording episode . 1 1
__label__Graph-Algorithms The country of Byteland contains  cities and  bidirectional roads. There is a path between any two cities. The roads in Byteland were built long ago, and now they are in need of repair. You have been hired to fix all the roads. You intend to do this by dispatching robots on some of the roads. Each robot will repair the road he is currently on and then moves to one of the adjacent unrepaired roads. After repairing that, it will move to another adjacent unrepaired road, repair that and so on. Two roads are adjacent if they have the same city at one of their endpoints. For the process to be efficient, no two robots will ever repair the same road, and no road can be visited twice. What is the minimum number of robots needed to accomplish the task? Input Format The first line contains the number of test cases .  test cases follow. The first line of each test case contains , the number of cities in Byteland. The cities are numbered . The following  lines contain the description of the roads. The  line contains two integers  and , meaning that there is a road connecting cities with numbers  and . Constraints      Output Format Print  lines, one corresponding to each test case containing the required answer for that test case. Sample Input 3   4   0 1   0 2   0 3   6   0 1   1 2   2 3   2 4   4 5   7   0 1   1 2   2 3   2 4   4 5   3 6  Sample Output 1   1   2  Explanation For the first case, one robot is enough to repair all roads:   For the second case, one robot is again enough:   The the third case, there is no way to repair all the roads with one robot and at least two are needed.
__label__Graph-Algorithms A tree of  nodes is an un-directed connected graph having  edges. Let us denote  as the root node. If  is a node such that it is at a distance of  from , and  is a node such that it is at at distance of  from   and  is connected to , then we call  as the parent of .  Similarly, if  is at a distance of  from  and  is at a distance of  from  and there is a path of length  from  to , then we call  as the th parent of .  Susan likes to play with graphs and Tree data structure is one of her favorites. She has designed a problem and wants to know if anyone can solve it. Sometimes she adds or removes a leaf node. Your task is to figure out the th parent of a node at any instant. Input Format The first line contain an integer  denoting the number of test cases.  test cases follow. First line of each test case contains an integer , the number of nodes in the tree.  lines follows each containing two integers  and  separated by a single space denoting  as the parent of . If  is , then X is the root node of the tree.  ( is for namesake and is not in the tree).  The next line contains an integer , the number of queries.   lines follow each containing a query.       :  is added as a new leaf node whose parent is  .  is not in the tree while  is in.        : This tells that leaf node  is removed from the tree.  is a leaf in the tree.       : In this query output the th parent of  .  is a node in the tree.  Note  Each node index is any number between 1 and 105 i.e., a tree with a single node can have its root indexed as 105 Constraints             Output Format For each query of type , output the th parent of . If th parent doesn't exist, output  and if the node doesn't exist, output . Sample Input 2 7 2 0 5 2 3 5 7 5 9 8 8 2 6 8 10 0 5 15 2 15 2 1 3 0 15 20 0 20 13 2 13 4 2 13 3 2 6 10 2 11 1 2 9 1 1 10000 0 3 0 10000 4 1 4 2 4 1  Sample Output 2 2 5 0 0 8 0  Explanation There are 2 test cases. The first test case has 7 nodes with 2 as its root. There are 10 queries 0 5 15 -> 15 is added as a leaf node to 5.  2 15 2 -> 2nd parent of 15 is 15->5->2 is 2.  1 3 -> leaf node 3 is removed from the tree.  0 15 20 -> 20 is added as a leaf node to 15.  0 20 13 -> 13 is added as a leaf node to 20. 2 13 4 -> 4th parent of 13 is 2.  2 13 3 -> 3rd parent of 13 is 5. 2 6 10 -> there is no 10th parent of 6 and hence 0.  2 11 1 -> 11 is not a node in the tree, hence 0. 2 9 1 -> 9's parent is 8.   the second testcase has a tree with only 1 node (10000).  0 10000 4 -> 4 is added as a leaf node to 10000. 1 4 -> 4 is removed.  2 4 1 -> as 4 is already removed, answer is 0.
__label__Graph-Algorithms The country of Byteland contains N cities and N - 1 bidirectional roads between them such that there is a path between any two cities. The cities are numbered (0,...,N - 1). The people were very unhappy about the time it took to commute, especially salesmen who had to go about every city selling goods. So it was decided that new roads would be built between any two "somewhat near" cities. Any two cities in Bytleland that can be reached by traveling on exactly two old roads are known as "somewhat near" each other. Now a salesman situated in city 0, just like any other typical salesman, has to visit all cities exactly once and return back to city 0 in the end. In how many ways can he do this? Input Format The first line contains the number of test cases T. T test cases follow. The first line contains N, the number of cities in Byteland. The following N - 1 lines contain the description of the roads. The ith line contains two integers ai and bi, meaning that there was originally a road connecting cities with numbers ai and bi. Constraints 1 <= T <= 20  1 <= N <= 10000  0 <= ai,bi < N   Output Format Output T lines, one corresponding to each test case containing the required answer for that test case. Since the answers can be huge, output them modulo 1000000007. Sample Input 2  3  0 1  1 2  5  0 1  1 2  2 3  2 4 Sample Output 2  4 Explanation For the first case, a new road was build between cities 0 and 2. Now, the salesman has two tour possibilities: 0-1-2-0 or 0-2-1-0.
__label__Graph-Algorithms You are given a table, , with  rows and  columns. The top-left corner of the table has coordinates , and the bottom-right corner has coordinates . The  cell contains integer . A path in the table is a sequence of cells  such that for each , cell  and cell  share a side.  The weight of the path  is defined by  where  is the weight of the cell . You must answer  queries. In each query, you are given the coordinates of two cells,  and . You must find and print the minimum possible weight of a path connecting them. Note: A cell can share sides with at most  other cells. A cell with coordinates  shares sides with , ,  and . Input Format The first line contains  space-separated integers,  (the number of rows in ) and  (the number of columns in ), respectively.  Each of  subsequent lines contains  space-separated integers. The  integer in the  line denotes the value of .  The next line contains a single integer, , denoting the number of queries.  Each of the  subsequent lines describes a query in the form of  space-separated integers: , , , and , respectively.  Constraints     For each query:   Output Format On a new line for each query, print a single integer denoting the minimum possible weight of a path between  and . Sample Input 3 5 0 0 0 0 0 1 9 9 9 1 0 0 0 0 0 3 0 0 2 4 0 3 2 3 1 1 1 3  Sample Output 1 1 18  Explanation The input table looks like this:  The first two queries are explained below: In the first query, we have to find the minimum possible weight of a path connecting  and . Here is one possible path:  The total weight of the path is . In the first query, we have to find the minimum possible weight of a path connecting  and . Here is one possible path:  The total weight of the path is . In the second query, we have to find the minimum possible weight of a path connecting  and . Here is one possible path:  The total weight of the path is .
__label__Graph-Algorithms After completing her final semester, Savita is back home. She is excited to meet all her friends. Her  friends live in different houses spread across the city.     There are  roads connecting the houses. The road network formed is connected and does not contain self loops and multiple roads between same pair of houses. Savita and Friends decide to meet.   Savita wants to choose a point(not necessarily an integer)  on the road numbered , such that, the maximum of  for all  is minimised,  where  is the shortest distance between the 'th friend and .     If 'th road connects friend  and friend  you should print distance of chosen point from . Also, print the  for all . If there is more than one solution, print the one in which the point  is closest to .      Note:  Use scanf/printf instead of cin/cout. Large input files. Order of  and  as given in the input must be maintained. If P is at a distance of 8 from  and 2 from , you should print 8 and not 2.   Input Format First line contain , the number of testcases.  T testcases follow.  First Line of each testcase contains 3 space separated integers  .  Next  lines contain description of the th road : three space separated integers , where  is the length of road connecting  and .       Constraints             Output Format For each testcase, print two space separated values in one line. The first value is the distance of  from the point  and the second value is the maximum of all the possible shortest paths between  and all of Savita's and her friends' houses. Round both answers to  decimal digits and print exactly  digits after the decimal point.    Sample Input 2 2 1 1 1 2 10 4 4 1 1 2 10 2 3 10 3 4 1 4 1 5  Sample Output 5.00000 5.00000 2.00000 8.00000  Explanation First testcase:  As  = 1, they will meet at the point  on the road that connects friend  with friend . If we choose mid point then distance for both of them will be . In any other position the maximum of distance will be more than . Second testcase:  As  = 1, they will meet at a point  on the road connecting friend  and friend . If we choose point at a distance of  from friend : Friend  will have to travel distance .  Friend  will have to travel distance .  Friend  will have to travel distance .  Friend  will have to travel distance .  So, the maximum will be .  In any other position of point choosen, the maximum distance will be more than .    Timelimits Timelimits for this problem is 2 times the environment limit.
__label__Dynamic-Programming __label__Graph-Algorithms You have N soldiers numbered from 1 to N. Each of your soldiers is either a liar or a truthful person. You have M sets of information about them. Each set of information tells you the number of liars among a certain range of your soldiers. Let L be the total number of your liar soldiers. Since you can't find the exact value of L, you want to find the minimum and maximum value of L. Input Format  The first line of the input contains two integers N and M.   Each of next M lines contains three integers:  A B C where the set of soldiers numbered as {A, A+1, A+2, ..., B}, exactly C of them are liars. (1 <= Ai <= Bi <= n) and (0 <= Ci <= Bi-Ai). Note: N and M are not more than 101, and it is guaranteed the given informations is satisfiable. Output Format  Print two integers Lmin and Lmax to the output. Sample Input #1  3 2 1 2 1 2 3 1  Sample Output #1 1 2  Sample Input #2  20 11 3 8 4 1 9 6 1 13 9 5 11 5 4 19 12 8 13 5 4 8 4 7 9 2 10 13 3 7 16 7 14 19 4  Sample Output #2 13 14  Explanation  In the first input, the initial line is "3 2", i.e. that there are 3 soldiers and we have 2 sets of information. The next line says there is one liar in the set of soldiers {1, 2}. The final line says there is one liar in the set {2,3}. There are two possibilities for this scenario: Soldiers number 1 and 3 are liars or soldier number 2 is liar.  So the minimum number of liars is 1 and maximum number of liars is 2. Hence the answer, 1 2.
__label__Graph-Algorithms You are given  unweighted, undirected graphs, , , and , with  vertices each, where the  graph has  edges and the vertices in each graph are numbered from  through . Find the number of ordered triples , where , , such that there is an edge  in , an edge  in , and an edge  in . Input Format The first line contains single integer, , denoting the number of vertices in the graphs. The subsequent lines define , , and . Each graph is defined as follows: The first line contains an integer, , describing the number of edges in the graph being defined. Each line  of the  subsequent lines (where ) contains  space-separated integers describing the respective nodes,  and  connected by edge . Constraints  , and  Each graph contains no cycles and any pair of directly connected nodes is connected by a maximum of  edge. Output Format Print a single integer denoting the number of distinct  triples as described in the Problem Statement above. Sample Input 3 2 1 2 2 3 3 1 2 1 3 2 3 2 1 3 2 3  Sample Output 3  Explanation There are three possible triples in our Sample Input:     Thus, we print  as our output.
__label__Graph-Algorithms Recall that a tree is an undirected, connected acyclic graph. We have a weighted tree, , with  vertices; let  be the total sum of edge weights on the path between nodes  and . Let's consider all the matrices, , such that:    for each  and  We consider the total value of matrix  to be:   Calculate and print the maximum total value of  for a given tree, . Input Format The first line contains a single positive integer, , denoting the number of vertices in tree .  Each line  of the  subsequent lines contains three space-separated positive integers denoting the respective , , and  values defining an edge connecting nodes  and  (where ) with edge weight . Constraints   Test cases with  have  of total score Test cases with  have  of total score  Output Format Print a single integer denoting the maximum total value of matrix  satisfying the properties specified in the Problem Statement above. Sample Input 3 1 2 2 1 3 1  Sample Output 3  Explanation In the sample case, matrix  is:   The sum of the elements of the first row is equal to .
__label__Graph-Algorithms Johnny, like every mathematician, has his favorite sequence of distinct natural numbers.  Let’s call this sequence . Johnny was very bored, so he wrote down  copies of the sequence  in his big notebook. One day, when Johnny was out, his little sister Mary erased some numbers(possibly zero) from every copy of  and then threw the notebook out onto the street. You just found it. Can you reconstruct the sequence?   In the input there are  sequences of natural numbers representing the  copies of the sequence  after Mary’s prank. In each of them all numbers are distinct. Your task is to construct the shortest sequence  that might have been the original . If there are many such sequences, return the lexicographically smallest one. It is guaranteed that such a sequence exists. Note  Sequence  is lexicographically less than sequence  if and only if there exists  such that for all . Input Format In the first line, there is one number  denoting the number of copies of .  This is followed by   and in next line a sequence of length  representing one of sequences after Mary's prank. All numbers are separated by a single space.   Constraints      All values in one sequence are distinct numbers in range . Output Format In one line, write the space-separated sequence  - the shortest sequence that might have been the original . If there are many such sequences, return the lexicographically smallest one. Sample Input 2 2 1 3 3 2 3 4  Sample Output  1 2 3 4  Explanation You have 2 copies of the sequence with some missing numbers:  and . There are two candidates for the original sequence , where the first one is lexicographically least.
__label__Graph-Algorithms __label__Graph-Algorithms It's almost summertime, so Big Cat and Little Cat are getting in shape. They decide the core of their fitness plan is to start jogging every day. Their city consists of  intersections connected by  bidirectional roads. The cats decide that their jogging route should be cyclic (i.e., starting and ending at the same intersection) and consist of  different roads. The cats also love exploring new places, so each day they want to choose a new route to jog on that is not equal to any of their previous routes. Two routes are considered to be equal if their sets of component roads are equal. Given a map of the city, can you help our heroic cats determine the maximum number of days they can go jogging so that every route traveled is different?  Input Format The first line contains a pair of space-separated integers,  (the number of intersections) and  (the number of roads), respectively. Each line  of the  subsequent lines contains a pair of space-separated integers,  and , defining a bidirectional road connecting intersections  and . Constraints    Each bidirectional road connects  distinct intersections (i.e., no road connects an intersection to itself). Each pair of intersections is directly connected by no more than  road. Output Format Print the maximum number of days for which the cats can go jogging without repeating a route. Sample Input 4 6 1 2 2 3 3 4 4 1 1 3 2 4  Sample Output 3  Explanation There are  different routes:    Recall that each route is a set of intersections forming a cycle, so each unique route is the same regardless of which city on the route the cats start out at. Thus, we print  (the number of routes) as our answer.
__label__Graph-Algorithms __label__Tree There are  points on a plane.  Each point  is described by , where . There are three types of queries needed:  X i j Reflect all points in the inclusive range between points  and  along the -axis.   X i j Y i j Reflect all points in the inclusive range between points  and  along the -axis.  Y i j C i j Count the number of points in the inclusive range between points  and  in each of the  quadrants. Then print a single line of four space-separated integers describing the respective numbers of points in the first, second, third, and fourth quadrants in that order.  C i j As a reminder, the four quadrants of a graph are labeled as follows:   Given a set of  points and  queries, perform each query in order. For example, given points  and .  Initially the points are in quadrants  and .  The first query says to reflect points with indices from  to  along the -axis.  After the query,  and quadrants are  and .  The next query prints the number of points in each quadrant: 0 1 0 1.  The third query says to reflect the point with index  to  along the -axis, so now .  The points now lie in quadrants  and , so the fourth query output is 0 1 1 0. 0 1 0 1 0 1 1 0 Note: Points may sometimes share the same coordinates.   Function Description  Complete the quadrants function in the editor below.  It should print the results of each C type query on a new line.   C quadrants has the following parameters:  - p[p[1]...p[n]]: a 2-dimensional array of integers where each element  contains two integers   and   - queries[queries[1]...queries[n]: an array of strings   Input Format The first line contains a single integer, , that denotes the number of points.  Each line  of the  subsequent lines contains two space-separated integers that describe the respective  and  values for point  .  The next line contains a single integer, , that denotes the number of queries.  Each of the  subsequent lines contains three space-separated values that describe a query in one of the three forms defined above.   Constraints    No point lies on the  or  axes.  In all queries, . Output Format For each query of type C i j, print four space-separated integers that describe the number of points having indices in the inclusive range between  and  in the first, second, third, and fourth graph quadrants in that order. C i j Sample Input 4 1 1 -1 1 -1 -1 1 -1 5 C 1 4 X 2 4 C 3 4 Y 1 2 C 1 3  Sample Output 1 1 1 1 1 1 0 0 0 2 0 1  Explanation Initially,  so there is one point in each of the four quadrants.  The first query results in printing 1 1 1 1. 1 1 1 1 The second query, X 2 4, reflects the points in the inclusive range between indices  and  along the -axis. Now . X 2 4 The query C 3 4 requires that the number of points considering  through  be printed: 1 1 0 0 C 3 4 1 1 0 0 The third query, Y 1 2 requires reflection of  along the -axis.  Now .   Y 1 2 The last query, C 1 3 requires that the number of points considering  through  be printed: 0 2 0 1 C 1 3 0 2 0 1
__label__Graph-Algorithms There are N cities in Hacker Country. Each pair of cities are directly connected by a unique directed road, and each road has its own toll that must be paid every time it is used. You're planning a road trip in Hacker Country, and its itinerary must satisfy the following conditions:   You can start in any city. You must use  or more different roads (meaning you will visit  or more cities). At the end of your trip, you should be back in your city of origin. The average cost (sum of tolls paid per road traveled) should be minimum. Can you calculate the minimum average cost of a trip in Hacker Country? Time Limits  Time limits for this challenge are provided here. Input Format The first line is an integer,  (number of cities).  The  subsequent lines of   space-separated integers each describe the respective tolls or traveling from city  to city ; in other words, the  integer of the  line denotes the toll for traveling from city  to city .   Note: As there are no roads connecting a city to itself, the  integer of line  will always be . Constraints       Output Format Print the minimum cost as a rational number  (tolls paid over roads traveled). The greatest common divisor of  and  should be .  Sample Input 2 0 1 2 0  Sample Output 3/2  Explanation The toll from city  to city  is . The toll from  to  is . Your travel cost . Your number of roads traveled is . Thus, we print 3/2 as our answer. 3/2
__label__Graph-Algorithms Update: A slight modification in the problem statement (see below)   Evil Nation A is angry and plans to launch N guided-missiles at the peaceful Nation B in an attempt to wipe out all of Nation B's people. Nation A's missile i will arrive in nation B at time ti. Missile i communicates with its headquarters by unique radio signals with a frequency equal to fi. Can you help the peaceful Nation B survive by building a defensive system that will stop the missiles dead in the sky? Defensive system:  The only way to defend Nation B from the attacking missile is by counter attacking them with a hackerX missile. You have a lot of hackerX missiles and each one of them has its own radio frequency. An individual hackerX missile can destroy Evil Nation A’s attacking missile if the radio frequency of both of the missiles match. Each hackerX missile can be used an indefinite number of times. Its invincible and doesn't get destroyed in the collision. The good news is you can adjust the frequency of the hackerX missile to match the evil missiles' frequency. When changing the hackerX missile's initial frequency fA to the new defending frequency fB, you will need \|fB - fA\| units of time to do.  Each hackerX missile can only destroy one of Nation A's missile at a time. So if two evil missiles with same frequency arrive at the same time, you need at least two hackerX missiles with the same frequency as the evil missiles to avoid damage.  If two evil missles with same frequency arrive at the same time, we can destroy them both with one hackerX missile. You can set the frequency of a hackerX missile to any value when its fired.   What is the minimum number of hackerX missiles you must launch to keep Nation B safe? Input Format:  The first line contains a single integer N denoting the number of missiles.  This is followed by N lines each containing two integers ti and fi denoting the time & frequency of the ith missile. Output Format:  A single integer denoting the minimum number of hackerX missiles you need to defend the nation. Constraints:  1 <=  N  <= 100000  0 <= ti <= 100000  0 <= fi <= 100000  t1 <= t2 <= ... <= tN  Sample Input #00  4 1 1 2 2 3 1 5 1  Sample Output #00  1  Explanation #00 A HackerX missile is launched at t = 1 with a frequency f = 1, and destroys the first missile. It re-tunes its frequency to f = 2 in 1 unit of time, and destroys the missile that is going to hit Nation B at t = 2. It re-tunes its frequency back to 1 in 1 unit of time and destroys the missile that is going to hit the nation at t = 3. It is relaunched at t = 5 with f = 1 and destroys the missile that is going to hit nation B at t = 5. Hence, you need only 1 HackerX to protect nation B.  Sample Input #01  4 1 1 2 3 3 1 5 1  Sample Output #01  2  Explanation #01 Destroy 1 missile at t = 1, f = 1. now at t = 2, there is a missile with frequency 3. The launched missile takes 2 units of time to destroy this, hence we need a new hackerX missile to destroy this one. The first hackerX missile can destroy the 3rd missile which has the same frequency as itself. The same hackerX missile destroys the missile that is hitting its city at t = 5. Thus, we need atleast 2 hackerX missiles.
__label__Graph-Algorithms Huarongdao is a well-known game in China. The purpose of this game is to move the Cao Cao block out of the board.  Acme is interested in this game, and he invents a similar game. There is a N*M board. Some blocks in this board are movable, while some are fixed. There is only one empty position. In one step, you can move a block to the empty position, and it will take you one second. The purpose of this game is to move the Cao Cao block to a given position. Acme wants to finish the game as fast as possible.  But he finds it hard, so he cheats sometimes. When he cheats, he spends K seconds to pick a block and put it in an empty position. However, he is not allowed to pick the Cao Cao block out of the board . Note  Immovable blocks cannot be moved while cheating.  A block can be moved only in the directions UP, DOWN, LEFT or RIGHT.  Input Format The first line contains four integers N, M, K, Q separated by a single space.  N lines follow.  Each line contains M integers 0 or 1 separated by a single space. If the jth integer is 1, then the block in ith row and jth column is movable. If the jth integer is 0 then the block in ith row and jth column is fixed. Then Q lines follows, each line contains six integers EXi, EYi, SXi, SYi, TXi, TYi separated by a single space. The ith query is the Cao Cao block is in row SXi column SYi, the exit is in TXi, TYi, and the empty position is in row EXi column EYi. It is guaranteed that the blocks in these positions are movable. Find the minimum seconds Acme needs to finish the game. If it is impossible to finish the game, you should answer -1. Constraints N,M ≤ 200  1 ≤ Q ≤ 250  10 ≤ K≤ 15  1 ≤ EXi,  SXi,  TXi≤ N  1 ≤ EYi, SYi,TYi ≤ M Output Format You should output Q lines, i-th line contains an integer which is the answer to i-th query. Sample Input 5 5 12 1 1 1 1 1 1 1 1 1 1 1 0 1 1 1 1 1 1 1 1 1 0 1 0 1 1 1 5 4 3 4 1  Sample Output 20  Explanation Move the block in (1, 4) to (1, 5);  Move the block in (1, 3) to (1, 4);  Move the block in (1, 2) to (1, 3);  Move the block in (2, 2) to (1, 2);  Move the block in (3, 2) to (2, 2);  Move the block in (4, 2) to (3, 2);  Move the block in (4, 3) to (4, 2);  Move the block in (4, 1) to (4, 3) by cheating;  Move the block in (4, 2) to (4, 1).   So, 1 + 1 + 1 + 1 + 1 + 1 + 1 + 12 + 1 = 20.
__label__Graph-Algorithms In the magical kingdom of Kasukabe, people strive to possess skillsets. Higher the number of skillset present among the people, the more content people will be.   There are  types of skill set present and initially there exists  people possessing  skill set, where .  There are  wizards in the kingdom and they have the ability to transform the skill set of a person into another skill set. Each of the these wizards has two lists of skill sets associated with them,  and . He can only transform the skill set of person whose initial skill set belongs to the list  to one of the final skill set which belongs to the list . That is, if  and  then following transformation can be done by that trainer.   Once a transformation is done, both skill is removed from the respective lists. In the above example, if he perform   transformation on a person, list  will be updated to  and list  will be . This updated list will be used for further transformations. Few points to note are: One person can possess only one skill set. A wizard can perform zero or more transformation as long as they satisfies the above criteria.  A person can go through multiple transformation of skill set. Same class transformation is also possible. That is a person' skill set can be transformed into his current skill set. Eg.  in the above example. Your goal is to design a series of transformation which results into maximum number of skill set with non-zero number of people knowing it. Input Format The first line contains two numbers, , where  represent the number of skill set and  represent the number of wizards.  Next line contains  space separated integers, ,  where  represents the number of people with  skill. Then follows  lines, where each pair of line represent the configuration of each wizard.  First line of the pair will start with the length of list  and followed by list  in the same line. Similarly second line of the pair starts with the length of list  and then the list .  Constraints                  Output Format The output must consist of one number, the maximum number of distinct skill set that can the people of country learn, after making optimal transformation steps. Sample Input 3 3 3 0 0 1 1 2 2 3 1 2 1 3 1 1 1 2   Sample Output 2    Explanation There are  types of skill sets present along with  wizards. Initially, all three people know the  skill set but no one knows the  and  skill sets.   The  wizard's initial lists are:  and . Suppose, he performs  transformation one any one of person with the  skill set, then it's list  will be updated to an empty list  and list  will be .  Now, we have two people knowing the  skill set and one person knowing the  skill set.   The  wizard's initial lists are:  and . He will use the transformation  one of the person with the  skill set, then it's lists will also be updated to an empty lists A:  and : .    Now, we have 1 person with  skillset and and 2 people knowing the  skillset.   The  wizard's initial lists are:  and . He will transform one of the person with  skillset to  one using the transformation . It's lists will also be updated to an empty lists A:  and : .  At this point, no further transformations are possible and we have achieved our maximum possible answer. Thus, each of the skill set, is known by  person.. This means there are three skill sets available in the kingdom.
__label__Graph-Algorithms During the Steam Summer Sale, Jim's  friends have purchased  games, which are numbered from  to . The games are multiplayer. Jim has invited his friends to his basement where they will play by making a LAN-Party.  Each friend has already decided the game he would like to play for the rest of the day. So there will be a group of friends who will play the same game together. But then, they face a problem: Currently, none of the friends' PCs are connected. So they have to be connected using the available  wires. Jim decides to connect friends  and  with the th wire one by one. So he starts with wire 1, then with wire 2 and so on.  A group can start playing their game, only if all the members are connected (if not directly, then there must exist a path connecting them). They want to start playing as soon as possible.  For each game, find out the wire after adding which the group can start playing. It is also possible that a group will never get connected. In such a case, this group starts crying and you should display -1. -1 Input Format On the first line there will be ,  and  each separated by a single space. On the second line we will give you  integers separated by a single space: The -th integer denotes the game friend  wants to play (all between  and ). The next  lines will denote  wires: ith line denotes ith wire and is denoted by  and  pairs each separated by a single space.  Constraints  For each game , the number of players playing  will be positive.    Note Each game is chosen by at least one player. If a group consists of only one member, then print 0, since this lucky (?) lone player can start right away! 0 Output Format Print on the th line the answer for the th game.  Sample Input 5 2 4 1 2 2 2 1 1 2  2 3 1 5 4 5   Sample Output 3 4  Explanation The group with the game 1 can play after the 3rd wire is added. The group with game 2 can play only after the 4th wire has been added because after adding the 4th wire, a path between (2,3) (3,4) and (2,4) gets created.
__label__Graph-Algorithms HackerLand is a country with  beautiful cities and  undirected roads. Like every other beautiful country, HackerLand has traffic jams. Each road has a crowd value. The crowd value of a path is defined as the maximum crowd value for all roads in the path. For example, if the crowd values for all roads are , then the crowd value for the path will be . Each city  has a type value, , denoting the type of buildings in the city. David just started his vacation in HackerLand. He wants to travel from city  to city . He also wants to see at least  different types of buildings along the path from  to . When choosing a path from city  to city  that has at least  different types of buildings along the path, David always selects the one with the minimum crowd value. You will be given  queries. Each query takes the form of  space-separated integers, , , and , denoting the respective values for starting city, destination city, and minimum number of unique buildings that David wants to see along the way. For each query, you must print the minimum crowd value for a path between  and  that has at least  different buildings along the route. If there is no such path, print -1. -1 Note: A path may contain cycles (i.e., the same roads or cities may be traveled more than once). Input Format The first line contains  space-separated integers denoting the respective values for  (the number of cities),  (the number of roads), and  (the number of queries).  The second line contains  space-separated integers describing the respective building type for each city in array  (where the -th value is  and ).     Each of the  subsequent lines defines a road in the form of  space-separated integers, , , and , defining an undirected road with crowd value  that connects cities  and .   Each of the  subsequent lines defines a query in the form of  space-separated integers, , , and  (where ), respectively.  Constraints    Each road connect  distinct cities, meaning no road starts and ends in the same city. Output Format For each query, print its answer on a new line. Sample Input 7 6 1 1 1 4 5 1 3 2 1 2 3 2 6 2 2 3 4 3 4 3 2 4 9 5 7 9 1 2 4  Sample Output 4  Explanation The diagram below depicts the country given as Sample Input. Different values of  are shown in different colors.  The path for the last query (1 2 4) will be . David sees his first type of building in cities  and , his second type of building in city , his third type of building in city , and his fourth type of building in city . The crowd values for each road traveled on this path are ; the maximum of these values is . Thus, we print  on a new line. 1 2 4
__label__Graph-Algorithms In order to entertain themselves during the long flight, Alex and Fedor invented the following very simple two players game. The game is:   First, Alex draws some graph with bidirectional weighted edges. There are possibly multiple edges (probably, with different or same weights) in this graph. First, Alex draws some graph with bidirectional weighted edges. There are possibly multiple edges (probably, with different or same weights) in this graph. Then Fedor picks some spanning tree of this graph. If the tree appears to be the minimal spanning tree, then the winner is Fedor. Otherwise, the winner is Alex.   Then Fedor picks some spanning tree of this graph. If the tree appears to be the minimal spanning tree, then the winner is Fedor. Otherwise, the winner is Alex.   We consider two trees different if the sets of the numbers of edges that are included in these trees are different. We consider two sets  and  different if there is at least one element that is present in  and not present in  or vice versa.   We should also mention that the graphs with enormous number of spanning trees upset Alex, as well as Fedor, so they will never have a graph that has more than  spanning trees.   At some point, Fedor became too lazy to look for minimal spanning trees and now he just picks some arbitrary spanning tree from the Alex's graph. Each spanning tree has equal probability to be picked by Fedor. What is the probability of Fedor's victory now?    Input Format The first line of input consists of two single space separated integers  and  - the number of nodes in Alex's graph and the number of edges in that graph, respectively.   Then there are  lines, where the  line has three numbers  with the meaning that the edge with the number  connects the nodes  and  and has the weight of .   Constraints The graph is always connected.       Output Format Output the probability of Fedor's victory, if he picks the spanning tree randomly, as an irreducible fraction. Sample Input 4 4 1 2 1 2 3 4 3 4 3 4 1 2  Sample Output 1/4
__label__Graph-Algorithms __label__Tree You have a rooted tree with  vertices numbered from  through  where the root is vertex .  You are given  triplets, the  triplet is denoted by three integers . The  triplet represents a simple path in the tree with endpoints in  and  such that  is ancestor of . The cost of the path is .  You have to select a subset of the paths such that the sum of path costs is maximum and the  edge of the tree belongs to at most  paths from the subset. Print the sum as the output. Input Format The first line contains a single integer, , denoting the number of testcases. Each testcase is defined as follows: The first line contains two space-separated integers,  (the number of vertices) and  (the number of paths), respectively. Each line  of the  subsequent lines contains three space-separated integers describing the respective values of , , and  where (, ) is an edge in the tree and  is maximum number of paths which can include this edge. Each line of the  subsequent lines contains three space-separated integers describing the respective values of , , and  () that define the  path and its cost. Constraints Let  be the sum of  over all the trees.  Let  be the sum of  over all the trees.          Output Format You must print  lines, where each line contains a single integer denoting the answer for the corresponding testcase. Sample Input 1 8 8 1 2 3 1 3 1 2 4 5 2 5 1 2 6 1 3 7 2 4 8 1 1 2 3 2 8 5 1 8 7 1 5 8 1 6 10 3 7 5 1 7 6 1 7 6  Sample Output 37  Explanation  One of the possible subsets contains paths . Its total cost is .
__label__Graph-Algorithms HackerRank is starting a bus service in MountainView, California. The bus starts at time T = 0 at station1 and goes through station2, station3, station4 in that order and reaches the headquarters located at stationn. At every station, the bus waits for various commuters to arrive before it departs to the next station. Ignoring the acceleration, the bus moves at 1 meter / second. i.e., if stationi and stationj are 1000 meters apart, the bus takes 1000 seconds to travel from stationi to stationj.  The bus is equipped with K units of Nitro (N2O). If going from stationi to stationj takes x seconds, then using t units of nitro can decrease the time taken to max(x-t, 0) seconds where max(a,b) denotes the greater of the two values between a & b. The Nitro can be used all at once or in multiples of 1 unit.  If the bus driver travels optimally, what is the minimum sum of travelling time for all commuters? The travelling time equals to the time he/she arrived at the destination minus the time he/she arrived the start station.  Please remember that the driver must take all passengers to their destination.   Input Format The first line contains 3 space separated integers n, m and K which indicate the number of stations, total number of people who board the bus at various stations and the total units of Nitro (N2O) present in the bus.   The second line contains n-1 space separated integers where the ith integer indicates the distance between station(i-1) to stationi.   m lines follow each containing 3 space separated integers. The ith line contains ti, si and ei in that order indicating the arrival time of the commuter at si at time ti with his destination being ei.  n m K   d1 d2 ... dn-1   // di: the distance between station_i to station_(i+1). t1 s1 e1         // commuter 1 arrives at his boarding point at s1 and his destination is e1 t2 s2 e2 ... tm sm em  Constraints 0 < n <= 100000  0 < m <= 100000  0 <= K <= 10000000  0 < di <= 100  0 <= ti <= 10000000  1 <= si < ei <= n   Output Format The minimal total travel time.  Sample Input 3 3 2 1 4 1 1 3 2 1 2 5 2 3  Sample Output 9  Explanation The bus waits for the 1st and the 2nd commuter to arrive at station1 and travels to station2 carrying 2 passengers. The travel time from station1 to station2 is 1 second. It then waits for the 3rd commuter to board the bus at time = 5, 2nd commuter deboards the bus. The 3rd commuter boards the bus at t = 5. The bus now uses 2 units of nitro, this reduces the commute time to travel to station3 from 4 to 2.  Hence, the total time spent by each of the passengers on the bus is  1 (time spent waiting for commuter 2) + 1 (travel time from station1 to station2) + 2 (time spent waiting for commuter 3) + 2 (travel time from station2 to station3) = 6 1 (travel time from station1 to station2) 2 (travel time from station2 to station3) 6+1+2 = 9 2 (travel time from station2 to station3) 6+1+2 = 9 hence the answer.  Timelimits Timelimits for this challenge can be seen here
__label__Graph-Algorithms The travelling salesman has a map containing m*n squares. He starts from the top left corner and visits every cell exactly once and returns to his initial position (top left). The time taken for the salesman to move from a square to its neighbor might not be the same. Two squares are considered adjacent if they share a common edge and the time taken to reach square b from square a and vice-versa are the same. Can you figure out the shortest time in which the salesman can visit every cell and get back to his initial position?  Input Format The first line of the input is 2 integers m and n separated by a single space. m and n are the number of rows and columns of the map.  Then m lines follow, each of which contains (n – 1) space separated integers. The jth integer of the ith line is the travel time from position (i,j) to (i,j+1) (index starts from 1.)  Then (m-1) lines follow, each of  which contains n space integers. The jth integer of the ith line is the travel time from position (i,j) to (i + 1, j).  Constraints 1 ≤ m, n ≤ 10  Times are non-negative integers no larger than 10000.   Output Format Just an integer contains the minimal time to complete his task. Print 0 if its not possible to visit each cell exactly once.  Sample Input 2 2 5 8 6 7  Sample Output 26  Explanation As its a 2*2 square, all cells are visited. 5 + 7 + 8 + 6 = 26
__label__Graph-Algorithms Chinese   Fedor is a research scientist, who has recently found a road map of Ancient Berland. Ancient Berland consisted of N cities that were connected by M bidirectional roads. The road builders weren't knowledgable. Hence, the start city and the end city for each road were always chosen randomly and independently. As a result, there were more than one road between some pairs of cities. Nevertheless, by luck, the country remained connected (i.e. you were able to get from one city to another via these M roads). And for any road, the start and the end city were not the same. Moreover, each road had it's own value of importance. This value was assigned by the Road Minister of Ancient Berland. The Road Minister also was not knowledgable, so these numbers were assigned to the roads randomly and independently from the other roads. When there was a war with the neighboring countries (usually it was with Ancient Herland), it was important to estimate separation number for some pairs of cities. The separation number for a pair of cities - let's call these cities A and B - is explained below:  Consider a set of roads that were built. The subset of this set is good, if after removing all roads from this set, there's no longer a way from A to B. The minimal possible sum of roads' value of importance of any good subset is a separation number for the pair of cities (A, B). For a research, Fedor would like to know the product of separation values over all unordered pairs of cities. Please, find this number. It can be huge, so we ask you to output its product modulo 109+7. Input Format The first line of input consist of two integers N and M, separated by a single space.  Then, M lines follow. Each of these lines consist of three integers Xi, Yi, Zi separated by a single space.  It means that there was a road between the city Xi and the city Yi with a value of importance equal to Zi. Constraints 3 ≤ N ≤ 500  3 ≤ M ≤ 104  1 ≤ value of importance ≤ 105  The cities are indexed from 1 to N. Scoring In the 25% of the test data N = 50 and M = 300. In another 25% of the test data N = 200 and M = 10000 In the rest of the test data N = 500 and M = 10000   Output Format An integer that represents the value, Fedor needs, modulo 109+7.
__label__Graph-Algorithms __label__Tree Ms.Kox enjoys her job, but she does not like to waste extra time traveling to and from her office. After working for many years, she knows the shortest-distance route to her office on a regular day. Recently, the city began regular maintenance of various roads. Every day a road gets blocked and no one can use it that day, but all other roads can be used. You are Ms. Kox's new intern and she needs some help. Every day, you need to determine the minimum distance that she has to travel to reach her office. Input Format There are N cities numbered 0 to N-1 and M bidirectional roads.   The first line of the input contains two integers N and M.   M lines follow, each containing three space-separated integers u , v and w, where u and v are cities connected by a bi-directional road and w is the length of this road. There is at most one road between any two cities and no road connects a city to itself.   The next line contains two integers S and D. S is the city where Ms. Kox lives and D is the city where her office is located.   The next line contains an integer Q, the number of queries.   Q lines follow, each containing two integers u and v, where the road between u and v has been blocked that day. Constraints          Output Format Output Q lines, with each line containing the minimum distance Ms.Kox has to travel on that day. If there is no path, print "Infinity". Sample Input 6 9   0 1 1   1 2 1   2 3 1   3 4 1   4 5 1   2 4 5   3 5 8   1 3 3   0 2 4   0 5   9   0 1   1 2   2 3   3 4   4 5   2 4   3 5   1 3   0 2  Sample Output 7   6   6   8   11   5   5   5   5
__label__Tree __label__Graph-Algorithms Given a tree with vertices numbered from  to . You need to process  queries. Each query represents a vertex number encoded in the following way: Queries are encoded in the following way: Let,  be the  query and  be the answer for the  query where  and  is always . Then vertex . We are assure that  is between  and , and hasn't been removed before.  Note:  is the bitwise XOR operator. For each query, first decode the vertex  and then perform the following: Print the size of the connected component containing .   Remove vertex  and all edges connected to .   Input Format The first line contains a single integer, , denoting the number of vertices in the tree.  Each line  of the  subsequent lines (where ) contains  space-separated integers describing the respective nodes,  and , connected by edge .  The next line contains a single integer, , denoting the number of queries.  Each line  of the  subsequent lines contains a single integer, vertex number .   Constraints   Output Format For each query, print the size of the corresponding connected component on a new line. Sample Input 0 3 1 2 1 3 3 1 1 2  Sample Output 0 3 1 1  Sample Input 1 4 1 2 1 3 1 4 4 3 6 2 6  Sample Output 1 4 3 2 1  Explanation Sample Case 0:  We have,  = 0 and connected component :    has vertex =  =  = . The size of connected component containing  is .  So,  = . Removing vertex  and all of it's edges, we get two disconnected components :    has vertex =  =  = . The size of connected component containing  is .  So,  = .  Removing vertex  and all of it's edges, we are left with only one component :    has vertex =  =  = . The size of connected component containing  is .  So,  = .  Removed vertex . Sample Case 1:  We have,  =  and connected component :    has vertex =  =  = . The size of connected component containing  is .  So,  = .  Removing vertex  and all of it's edges, we get component :    has vertex =  =  = . The size of connected component containing  is .  So,  = .  Removing vertex  and all of it's edges, now, we get two disconnected components :    has vertex =  =  = . The size of connected component containing  is .  So,  = .  Removing vertex  and all of it's edges, now we are left with only one component :    has vertex =  =  = . The size of connected component containing  is .  So,  = .  Removed vertex .
__label__Graph-Algorithms There are  people at the railway station, and each one wants to buy a ticket to go to one of  different destinations. The  people are in a queue.   There are  ticket windows from which tickets can be purchased. The  people will be distributed in the windows such that the order is maintained. In other words, suppose we number the people  to  from front to back. If person  and person  go to the same window and , then person  should still be ahead of person  in the window.   Each ticketing window has an offer. If a person in the queue shares the same destination as the person immediately in front of him/her, a 20% reduction in the ticket price is offered to him/her.   For example, suppose there are  people in the queue for a single ticket window, all with the same destination which costs  bucks. Then the first person in the queue pays  bucks, and the 2nd and 3rd persons get a discount of 20% on  bucks, so they end up paying  bucks each instead of  bucks.   Try to distribute the  people across the  windows such that the total cost  paid by all  people is minimized.   Input Format The first line contains  integers:  is the number of people    is the number of ticket windows    is the number of destinations separated by a single space (in the same order)  Then  lines follow. The  line contains an alphanumeric string  and an integer :  is the  destination    is the ticket price for   Then  lines follow. The  line contains an alphanumeric string  which is the destination of the  person.   Constraints       The  available destinations have nonempty and distinct names.   Each person's destination appears in the list of  available destinations.     Output Format Output  lines. The first line contains , the total cost that is to be minimized. In the  following line, print the ticket window which the  person goes to. The windows are indexed  to . There may be multiple ways to distribute the people among the windows such that the total cost is minimized; any one will be accepted.   The answer  will be accepted if it is within an error of  of the true answer.   Sample Input 5 2 3 CALIFORNIA 10 HAWAII 8 NEWYORK 12 NEWYORK NEWYORK CALIFORNIA NEWYORK HAWAII  Sample Output 49.2 1 1 2 1 1  Explanation At the beginning, all the people are in the same queue, and will go to the ticket windows one by one in the initial order.    will buy ticket in the first window.   will buy ticket in the second window.   In the first ticket window, #1 will pay  bucks to go to NEWYORK, and #2 and #4 have the same destination with the person in front of them, so they will get 20% off, and will pay  bucks each. #5 has a different destination, so it will cost him  bucks to go to HAWAII.   NEWYORK HAWAII In the second ticket window, #3 will pay  bucks to go to CALIFORNIA.   CALIFORNIA
__label__Graph-Algorithms Let  be a connected, directed graph with vertices numbered from  to  such that any vertex is reachable from vertex . In addition, any two distinct vertices,  and , are connected by at most one edge . Consider the standard DFS (Depth-First Search) algorithm starting from vertex . As every vertex is reachable, each edge  of  is classified by the algorithm into one of four groups: tree edge: If  was discovered for the first time when we traversed . back edge: If  was already on the stack when we tried to traverse . forward edge: If  was already discovered while  was on the stack. cross edge: Any edge that is not a tree, back, or forward edge. To better understand this, consider the following C++ pseudocode: Given four integers, , , , and , construct any graph  having exactly  tree edges, exactly  back edges, exactly  forward edges, and exactly  cross edges. Then print  according to the Output Format specified below. Input Format A single line of four space-separated integers describing the respective values of , , , and . Constraints  Output Format If there is no such graph , print -1; otherwise print the following: -1 The first line must contain an integer, , denoting the number of vertices in . Each line  of the  subsequent lines must contain the following space-separated integers: The first integer is the outdegree, , of vertex . This is followed by  distinct numbers, , denoting edges from  to  for . The order of each  should be the order in which a DFS considers edges. The first integer is the outdegree, , of vertex . This is followed by  distinct numbers, , denoting edges from  to  for . The order of each  should be the order in which a DFS considers edges. Sample Input 0 Sample Output 0 Explanation 0 The DFS traversal order is: . Thus, ,  and  are tree edges;  is a back edge;  is a forward edge; and  is a cross edge. This is demonstrated by the diagram below, in which tree edges are black, forward edges are blue, back edges are red, and cross edges are green.  Sample Input 1 Sample Output 1 Explanation 1 No such graph exists satisfying the given values.
__label__Data-Structures __label__Graph-Algorithms __label__Graph-Algorithms We define the diameter of a strongly-connected oriented graph, , as the minimum integer  such that for each  there is a path from  to  of length  (recall that a path's length is its number of edges).   Given two integers,  and , build a strongly-connected oriented graph with  vertices where each vertex has outdegree  and the graph's diameter is as small as possible (see the Scoring section below for more detail). Then print the graph according to the Output Format specified below.   Here's a sample strongly-connected oriented graph with  nodes, whose outdegree is  and diameter is .    Note: Cycles and multiple edges between vertices are allowed. Input Format Two space-separated integers describing the respective values of  (the number of vertices) and  (the outdegree of each vertex). Constraints   Scoring  We denote the diameter of your graph as  and the diameter of the graph in the author's solution as . Your score for each test case (as a real number from  to ) is:  if   if   if  Output Format First, print an integer denoting the diameter of your graph on a new line.  Next, print  lines where each line  () contains  space-separated integers in the inclusive range from  to  describing the endpoints for each of vertex 's outbound edges. Sample Input 0 Sample Output 0 Explanation 0 The diagram below depicts a strongly-connected oriented graph with  nodes where each node has an outdegree of :  The diameter of this graph is , which is minimal as the outdegree of each node must be . We cannot construct a graph with a smaller diameter of  because it requires an outbound edge from each vertex to each other vertex in the graph (so the outdegree of that graph would be ).
__label__Graph-Algorithms Airports are being built on a straight road according to a new construction plan. For convenience, imagine a number line on which at different points airports can be positioned. Because a plane can't take off and start landing immediately, there will be flight between two airports in locations  and  if and only if , where  is a constant. Changing the position of an airport from  to  costs . The cost to fix a certain plan is the minimum total cost of changing the positions of airports. After the changes, it should be possible to travel between any pair of airports, possibly taking flights through some intermediate airports. Note that it's possible that two airports have the same initial position, and this can be the case  after changes too. On  day, a plan to build a new airport with position  is announced. On each day that a new airport is announced, print the smallest cost to fix the set of airports announced so far . Note that you should not change the positions of any airports, just calculate the cost to do it.  Input Format Input contains multiple queries.  The first line consists of an integer  which is the number of queries. Each query is given as follows.  The first line of each query contains two integers  and , the number of days, and the minimum distance respectively.  The second line of each test case contains  space-separated integers  denoting the position of the airport that was announced on  day. Constraints    the sum of  over all test cases in a file will not exceed  Output Format Print one line for each query.  A line for a query with  airports should have  numbers on it where the  one should be the minimum cost to fix airports in positions . Sample Input 0 Sample Output 0 Explanation 0 The answer for a single airport is always zero. When we have many airports in the same position, it's enough to move only one of them to satisfy the condition from the statement. Sample Input 1 Sample Output 1 Explanation 1  For each new day that an airport is inserted, the cheapest rearranging of existing airports is shown on the diagram above. Note that cost changes for every day and travelling between airports can be done possibly flying through some intermediate ones. Costs are calculated without changing actual positions of the airports.
__label__Graph-Algorithms Alex has a board game consisting of: A chip for marking his current location on the board.  fields numbered from  to . Each position  has a value, , denoting the next position for the chip to jump to from that field. A die with  faces numbered from  to . Each face  has a probability, , of being rolled. Alex then performs the following actions: Begins the game by placing the chip at a position in a field randomly and with equiprobability.  Takes  turns; during each turn he: Rolls the die. We'll denote the number rolled during a turn as . Jumps the chip  times. Recall that each field contains a value denoting the next field number to jump to. Rolls the die. We'll denote the number rolled during a turn as . Jumps the chip  times. Recall that each field contains a value denoting the next field number to jump to. After completing  turns, the game ends and he must calculate the respective probabilities for each field as to whether the game ended with the chip in that field. Given , , , the game board, and the probabilities for each die face, print  lines where each line  contains the probability that the chip is on field  at the end of the game. Note: All the probabilities in this task are rational numbers modulo . That is, if the probability can be expressed as the irreducible fraction  where , then it corresponds to the number  (or, alternatively, ). Click here to learn about Modular Multiplicative Inverse. Input Format The first line contains three space-separated integers describing the respective values of  (the number of positions),  (the number of die faces), and  (the number of turns).  The second line contains  space-separated integers describing the respective values of each  (i.e., the index of the field that field  can transition to).  The third line contains  space-separated integers describing the respective values of each  (where ) describing the probabilities of the faces of the -sided die.   Constraints         The sum of  is   Note: The time limit for this challenge is doubled for all languages. Read more about standard time limits at our environment page. Output Format Print  lines of output in which each line  contains a single integer,  (where ), denoting the probability that the chip will be on field  after  turns. Sample Input 0 Sample Output 0 Explanation 0 The diagram below depicts the respective probabilities of each die face being rolled:  The diagram below depicts each field with an arrow pointing to the next field:  There are four equiprobable initial fields, so each field has a  probability of being the chip's initial location. Next, we calculate the probability that the chip will end up in each field after  turn: The only way the chip ends up in this field is if it never jumps from the field, which only happens if Alex rolls a . So, this field's probability is . We then calculate and print the result of  on a new line. The chip can end up in field  after one turn in the following scenarios: Start in field  and roll a , the probability for which is . Start in field  and roll a  or a , the probability for which is . Start in field  and roll a , the probability for which is . After summing these probabilities, we get a total probability of  for the field. We then calculate and print the result of  on a new line. The chip can end up in field  after one turn in the following scenarios: Start in field  and roll a , the probability for which is . Start in field  and roll a  or a , the probability for which is . Start in field  and roll a , the probability for which is . After summing these probabilities, we get a total probability of  for the field. We then calculate and print the result of  on a new line. The chip can end up in field  after one turn in the following scenarios: Start in field  and roll a , the probability for which is . Start in field  and roll a , the probability for which is . Start in field  and roll a  or a , the probability for which is . After summing these probabilities, we get a total probability of  for the field. We then calculate and print the result of  on a new line. The chip can end up in field  after one turn in the following scenarios: Start in field  and roll a , the probability for which is . Start in field  and roll a , the probability for which is . Start in field  and roll a  or a , the probability for which is . After summing these probabilities, we get a total probability of  for the field. We then calculate and print the result of  on a new line. If the chip is initially placed in field , it will always end up in field  regardless of how many turns are taken (because this field loops back onto itself). Thus, this field's probability is . We then calculate and print the result of  on a new line.
__label__Data-Structures Consider an array of integers, . We define the absolute difference between two elements,  and  (where ), to be the absolute value of . Given an array of integers, find and print the minimum absolute difference between any two elements in the array.  For example, given the array  we can create  pairs of numbers:  and .  The absolute differences for these pairs are ,  and .  The minimum absolute difference is . Function Description  Complete the minimumAbsoluteDifference function in the editor below.  It should return an integer that represents the minimum absolute difference between any pair of elements.   minimumAbsoluteDifference has the following parameter(s):   n: an integer that represents the length of arr  arr: an array of integers   Input Format The first line contains a single integer , the size of .  The second line contains  space-separated integers .    Constraints     Output Format Print the minimum absolute difference between any two elements in the array. Sample Input 0 Sample Output 0 Explanation 0 With  integers in our array, we have three possible pairs: , , and . The absolute values of the differences between these pairs are as follows:       Notice that if we were to switch the order of the numbers in these pairs, the resulting absolute values would still be the same. The smallest of these possible absolute differences is . Sample Input 1 Sample Output 1 Explanation 1 The smallest absolute difference is . Sample Input 2 Sample Output 2 Explanation 2 The minimum absolute difference is .
__label__Greedy-Algorithms Marc loves cupcakes, but he also likes to stay fit. Each cupcake has a calorie count, and Marc can walk a distance to expend those calories.  If Marc has eaten  cupcakes so far, after eating a cupcake with  calories he must walk at least   miles to maintain his weight. For example, if he eats  cupcakes with calorie counts in the following order: , the miles he will need to walk are .  This is not the minimum, though, so we need to test other orders of consumption.  In this case, our minimum miles is calculated as . Given the individual calorie counts for each of the cupcakes, determine the minimum number of miles Marc must walk to maintain his weight. Note that he can eat the cupcakes in any order.   Function Description  Complete the marcsCakewalk function in the editor below.  It should return a long integer that represents the minimum miles necessary.   marcsCakewalk has the following parameter(s):   calorie: an integer array that represents calorie count for each cupcake   Input Format The first line contains an integer , the number of cupcakes in .  The second line contains  space-separated integers . Constraints   Output Format Print a long integer denoting the minimum number of miles Marc must walk to maintain his weight.  Sample Input 0 Sample Output 0 Explanation 0 Let's say the number of miles Marc must walk to maintain his weight is . He can minimize  by eating the  cupcakes in the following order:  Eat the cupcake with  calories, so . Eat the cupcake with  calories, so . Eat the cupcake with  calories, so . We then print the final value of , which is , as our answer. Sample Input 1 Sample Output 1 Explanation 1
__label__Greedy-Algorithms Given a square grid of characters in the range ascii[a-z], rearrange elements of each row alphabetically, ascending.  Determine if the columns are also in ascending alphabetical order, top to bottom.  Return YES if they are or NO if they are not. YES NO For example, given: a b c a d e e f g  The rows are already in alphabetical order.  The columns a a e, b d f and c e g are also in alphabetical order, so the answer would be YES.  Only elements within the same row can be rearranged.  They cannot be moved to a different row. a a e b d f c e g YES Function Description  Complete the gridChallenge function in the editor below.  It should return a string, either YES or NO.   YES NO gridChallenge has the following parameter(s):   grid: an array of strings   Input Format The first line contains , the number of testcases.    Each of the next  sets of lines are described as follows:  - The first line contains , the number of rows and columns in the grid.  - The next  lines contains a string of length  Constraints     Each string consists of lowercase letters in the range ascii[a-z]  Output Format For each test case, on a separate line print YES if it is possible to rearrange the grid alphabetically ascending in both its rows and columns, or NO otherwise. YES NO Sample Input 1 5 ebacd fghij olmkn trpqs xywuv  Sample Output YES  Explanation The x grid in the  test case can be reordered to  abcde fghij klmno pqrst uvwxy  This fulfills the condition since the rows 1, 2, ..., 5 and the columns 1, 2, ..., 5 are all lexicographically sorted.
__label__Greedy-Algorithms Lena is preparing for an important coding competition that is preceded by a number of sequential preliminary contests. Initially, her luck balance is 0. She believes in "saving luck", and wants to check her theory. Each contest is described by two integers,  and :  is the amount of luck associated with a contest. If Lena wins the contest, her luck balance will decrease by ; if she loses it, her luck balance will increase by .  denotes the contest's importance rating. It's equal to  if the contest is important, and it's equal to  if it's unimportant. If Lena loses no more than  important contests, what is the maximum amount of luck she can have after competing in all the preliminary contests? This value may be negative. For example,  and: If Lena loses all of the contests, her will be .  Since she is allowed to lose  important contests, and there are only  important contests.  She can lose all three contests to maximize her luck at .  If , she has to win at least  of the  important contests.  She would choose to win the lowest value important contest worth .  Her final luck will be .   Function Description  Complete the luckBalance function in the editor below.  It should return an integer that represents the maximum luck balance achievable.   luckBalance has the following parameter(s):   k: the number of important contests Lena can lose   contests: a 2D array of integers where each  contains two integers that represent the luck balance and importance of the  contest.   Input Format The first line contains two space-separated integers  and , the number of preliminary contests and the maximum number of important contests Lena can lose.  Each of the next  lines contains two space-separated integers,  and , the contest's luck balance and its importance rating. Constraints     Output Format Print a single integer denoting the maximum amount of luck Lena can have after all the contests. Sample Input 6 3 5 1 2 1 1 1 8 1 10 0 5 0  Sample Output 29  Explanation There are  contests. Of these contests,  are important and she cannot lose more than  of them. Lena maximizes her luck if she wins the  important contest (where ) and loses all of the other five contests for a total luck balance of .
__label__Greedy-Algorithms Given an array of stick lengths, use  of them to construct a non-degenerate triange with the maximum possible perimeter. Print the lengths of its sides as  space-separated integers in non-decreasing order. If there are several valid triangles having the maximum perimeter:  Choose the one with the longest maximum side.  If more than one has that maximum, choose from them the one with the longest minimum side.  If more than one has that maximum as well, print any one them. If no non-degenerate triangle exists, print -1. -1 For example, assume there are stick lengths .  The triplet  will not form a triangle.  Neither will  or , so the problem is reduced to  and .  The longer perimeter is .   Function Description  Complete the maximumPerimeterTriangle function in the editor below.  It should return an array of  integers that represent the side lengths of the chosen triangle in non-decreasing order.   maximumPerimeterTriangle has the following parameter(s):   sticks: an integer array that represents the lengths of sticks available   Input Format The first line contains single integer , the size of array .  The second line contains  space-separated integers , each a stick length. Constraints   Output Format Print the lengths of the  chosen sticks as space-separated integers in non-decreasing order. If no non-degenerate triangle can be formed, print -1. -1 Sample Input 0 Sample Output 0 Explanation 0 There are  possible unique triangles:     The second triangle has the largest perimeter, so we print its side lengths on a new line in non-decreasing order. Sample Input 1 Sample Output 1 Explanation 1 The triangle  is degenerate and thus can't be constructed, so we print -1 on a new line. -1 Sample Input 2 Sample Output 2 Explanation 2 The triangle (1,1,1) is the only valid triangle.
__label__Greedy-Algorithms You are given two  arrays,  and , both containing  integers. A pair of indices  is beautiful if the  element of array  is equal to the  element of array . In other words, pair  is beautiful if and only if . A set containing beautiful pairs is called a beautiful set. A beautiful set is called pairwise disjoint if for every pair  belonging to the set there is no repetition of either  or  values. For instance, if  and  the beautiful set  is not pairwise disjoint as there is a repetition of , that is .  Your task is to change exactly  element in  so that the size of the pairwise disjoint beautiful set is maximum. Function Description  Complete the beautifulPairs function in the editor below.  It should return an integer that represents the maximum number of pairwise disjoint beautiful pairs that can be formed.   beautifulPairs has the following parameters:   A: an array of integers   B: an array of integers   Input Format The first line contains a single integer , the number of elements in  and .  The second line contains  space-separated integers .  The third line contains  space-separated integers . Constraints   Output Format Determine and print the maximum possible number of pairwise disjoint beautiful pairs.  Note: You must first change  element in , and your choice of element must be optimal. Sample Input 0 Sample Output 0 Explanation 0 You are given  and .  The beautiful set is  and maximum sized pairwise disjoint beautiful set is either  or .  We can do better. We change the  element of array  from  to . Now new B array is:  and the pairwise disjoint beautiful set is . So, the answer is 4.  Note that we could have also selected index 3 instead of index 2 but it would have yeilded the same result. Any other choice of index is not optimal. Sample Input 1 Sample Output 1
__label__Dynamic-Programming Alice is a kindergarten teacher. She wants to give some candies to the children in her class.  All the children sit in a line and each of them has a rating score according to his or her performance in the class.  Alice wants to give at least 1 candy to each child. If two children sit next to each other, then the one with the higher rating must get more candies. Alice wants to minimize the total number of candies she must buy. For example, assume her students' ratings are [4, 6, 4, 5, 6, 2].  She gives the students candy in the following minimal amounts: [1, 2, 1, 2, 3, 1].  She must buy a minimum of 10 candies.   Function Description Complete the candies function in the editor below.  It must return the minimum number of candies Alice must buy.   candies has the following parameter(s):   n: an integer, the number of children in the class   arr: an array of integers representing the ratings of each student   Input Format The first line contains an integer, , the size of .  Each of the next  lines contains an integer  indicating the rating of the student at position . Constraints     Output Format Output a single line containing the minimum number of candies Alice must buy. Sample Input 0 Sample Output 0 Explanation 0 Here 1, 2, 2 is the rating. Note that when two children have equal rating, they are allowed to have different number of candies. Hence optimal distribution will be 1, 2, 1. Sample Input 1 Sample Output 1 Explanation 1 Optimal distribution will be  Sample Input 2 Sample Output 2 Explanation 2 Optimal distribution will be .
__label__Mathematics __label__Greedy-Algorithms Sherlock Holmes suspects his archenemy Professor Moriarty is once again plotting something diabolical. Sherlock's companion, Dr. Watson, suggests Moriarty may be responsible for MI6's recent issues with their supercomputer, The Beast.  Shortly after resolving to investigate, Sherlock receives a note from Moriarty boasting about infecting The Beast with a virus.  He also gives him a clue:  an integer. Sherlock determines the key to removing the virus is to find the largest Decent Number having that number of digits. A Decent Number has the following properties: Its digits can only be 3's and/or 5's. The number of 3's it contains is divisible by 5. The number of 5's it contains is divisible by 3. It is the largest such number for its length.  Moriarty's virus shows a clock counting down to The Beast's destruction, and time is running out fast. Your task is to help Sherlock find the key before The Beast is destroyed! For example, the numbers  and  are both decent numbers because there are  's and  's in the first, and  's in the second.  They are the largest values for those length numbers that have proper divisibility of digit occurrences.   Function Description Complete the decentNumber function in the editor below.  It should print the decent number for the given length, or  if a decent number of that length cannot be formed.   decentNumber has the following parameter(s):   n: the integer length of the decent number to create Input Format The first line is an integer, , denoting the number of test cases.  The next  lines each contain an integer , the number of digits in the number. Constraints     Output Format Print the Decent Number having  digits; if no such number exists, tell Sherlock by printing -1. -1 Sample Input 4 1 3 5 11  Sample Output -1 555 33333 55555533333  Explanation For , there is no Decent Number having  digit (so we print ).  For ,  is the only possible number. (Decent Number Property 3).  For ,  is the only possible number. (Decent Number Property 2).  For ,  is the Decent Number.  All other permutations of these digits are not decent (Decent Number Property 4).
__label__Greedy-Algorithms Priyanka works for an international toy company that ships by container.  Her task is to the determine the lowest cost way to combine her orders for shipping.  She has a list of item weights.  The shipping company has a requirement that all items loaded in a container must weigh less than or equal to 4 units plus the weight of the minimum weight item.  All items meeting that requirement will be shipped in one container. What is the smallest number of containers that can be contracted to ship the items based on the given list of weights? For example, there are items with weights .  This can be broken into two containers:  and .  Each container will contain items weighing within  units of the minimum weight item.   Function Description  Complete the toys function in the editor below.  It should return the minimum number of containers required to ship.   toys has the following parameter(s):   w: an array of integers that represent the weights of each order to ship   Input Format The first line contains an integer , the number of orders to ship.  The next line contains  space-separated integers, ,  representing the orders in a weight array. Constraints     Output Format Return the integer value of the number of containers Priyanka must contract to ship all of the toys.  Sample Input 8 1 2 3 21 7 12 14 21  Sample Output 4  Explanation The first container holds items weighing ,  and . (weights in range )  The second container holds the items weighing  units. ()  The third container holds the item weighing  units.  ()  The fourth container holds the items weighing  and  units. ()    containers are required.
__label__Greedy-Algorithms You are given an unordered array of unique integers incrementing from .  You can swap any two elements a limited number of times.  Determine the largest lexicographical value array that can be created by executing no more than the limited number of swaps.   For example, if  and the maximum swaps , the following arrays can be formed by swapping the  with the other elements:   The highest value of the four (including the original) is .  If , we can swap to the highest possible value: . Function Description  Complete the largestPermutation function in the editor below.  It must return an array that represents the highest value permutation that can be formed.   largestPermutation has the following parameter(s):   k: an integer that represents the limit of swaps   arr: an array of integers   Input Format The first line contains two space-separated integers  and , the length of  and the maximum swaps that can be performed. The second line contains  unique space-separated integers  where . Constraints     Output Format Print the lexicographically largest permutation you can make with at most  swaps.  Sample Input 0  5 1 4 2 3 5 1  Sample Output 0  5 2 3 4 1  Explanation 0  You can swap any two numbers in  and see the largest permutation is  Sample Input 1 3 1 2 1 3  Sample Output 1  3 1 2  Explanation 1  With 1 swap we can get ,  and .  Of these,  is the largest permutation.   Sample Input 2 2 1 2 1  Sample Output 2  2 1  Explanation 2  We can see that  is already the largest permutation.  We don't make any swaps.
__label__Greedy-Algorithms Mark and Jane are very happy after having their first child. Their son loves toys, so Mark wants to buy some. There are a number of different toys lying in front of him, tagged with their prices.  Mark has only a certain amount to spend, and he wants to maximize the number of toys he buys with this money. Given a list of prices and an amount to spend, what is the maximum number of toys Mark can buy?  For example, if  and Mark has  to spend, he can buy items  for , or  for  units of currency.  He would choose the first group of  items. Function Description Complete the function maximumToys in the editor below.  It should return an integer representing the maximum number of toys Mark can purchase.   maximumToys has the following parameter(s):   prices:  an array of integers representing toy prices   k:  an integer, Mark's budget Input Format The first line contains two integers,  and , the number of priced toys and the amount Mark has to spend.  The next line contains  space-separated integers   Constraints       A toy can't be bought multiple times. Output Format An integer that denotes the maximum number of toys Mark can buy for his son. Sample Input 7 50 1 12 5 111 200 1000 10  Sample Output 4  Explanation He can buy only  toys at most. These toys have the following prices: .
__label__Search __label__Greedy-Algorithms A group of friends want to buy a bouquet of flowers.  The florist wants to maximize his number of new customers and the money he makes.  To do this, he decides he'll multiply the price of each flower by the number of that customer's previously purchased flowers plus .  The first flower will be original price, , the next will be  and so on.   Given the size of the group of friends, the number of flowers they want to purchase and the original prices of the flowers, determine the minimum cost to purchase all of the flowers. For example, if there are  friends that want to buy  flowers that cost  each will buy one of the flowers priced  at the original price.  Having each purchased  flower, the first flower in the list, , will now cost .  The total cost will be .   Function Description Complete the getMinimumCost function in the editor below.  It should return the minimum cost to purchase all of the flowers.   getMinimumCost has the following parameter(s): c: an array of integers representing the original price of each flower k: an integer, the number of friends Input Format The first line contains two space-separated integers  and , the number of flowers and the number of friends.  The second line contains  space-separated positive integers , the original price of each flower. Constraints        Output Format Print the minimum cost to buy all  flowers. Sample Input 0 Sample Output 0 Explanation 0 There are  flowers with costs  and  people in the group. If each person buys one flower, the total cost of prices paid is  dollars. Thus, we print  as our answer.   Sample Input 1 Sample Output 1 Explanation 1 There are  flowers with costs  and  people in the group. We can minimize the total purchase cost like so: The first person purchases  flowers in order of decreasing price; this means they buy the more expensive flower () first at price  dollars and the less expensive flower () second at price  dollars.  The second person buys the most expensive flower at price  dollars.  We then print the sum of these purchases, which is , as our answer. Sample Input 2 Sample Output 2 Explanation 2 The friends buy flowers for ,  and ,  and  for a cost of .
__label__Greedy-Algorithms You will be given a list of integers, , and a single integer .  You must create an array of length  from elements of  such that its unfairness is minimized. Call that array .  Unfairness of an array is calculated as   Where:  - max denotes the largest integer in   - min denotes the smallest integer in   As an example, consider the array  with a  of .  Pick any two elements, test .    Testing for all pairs, the solution  provides the minimum unfairness. Note: Integers in  may not be unique.  Function Description Complete the maxMin function in the editor below.  It must return an integer that denotes the minimum possible value of unfairness.   maxMin has the following parameter(s): k:  an integer, the number of elements in the array to create arr:  an array of integers .  Input Format The first line contains an integer , the number of elements in array .  The second line contains an integer .  Each of the next  lines contains an integer  where .    Constraints       Output Format An integer that denotes the minimum possible value of unfairness. Sample Input 0 Sample Output 0 Explanation 0 Here ; selecting the  integers , unfairness equals   max(10,20,30) - min(10,20,30) = 30 - 10 = 20  Sample Input 1 Sample Output 1 Explanation 1 Here ; selecting the  integers , unfairness equals   max(1,2,3,4) - min(1,2,3,4) = 4 - 1 = 3  Sample Input 2 Sample Output 2 Explanation 2 Here .   or  give the minimum unfairness of .
__label__Greedy-Algorithms Jim's Burgers has a line of hungry customers.  Orders vary in the time it takes to prepare them.  Determine the order the customers receive their orders.  Start by numbering each of the customers from  to , front of the line to the back.  You will then be given an order number and a preparation time for each customer.    The time of delivery is calculated as the sum of the order number and the preparation time.  If two orders are delivered at the same time, assume they are delivered in ascending customer number order. For example, there are  customers in line.  They each receive an order number  and a preparation time .: We see that the orders are delivered to customers in the following order: Function Description  Complete the jimOrders function in the editor below.  It should return an array of integers that represent the order that customers' orders are delivered.   jimOrders has the following parameter(s):   orders: a 2D integer array where each  is in the form .   Input Format The first line contains an integer , the number of customers.  Each of the next  lines contains two space-separated integers, an order number and prep time for .       Constraints      Output Format Print a single line of  space-separated customer numbers (recall that customers are numbered from  to ) that describes the sequence in which the customers receive their burgers. If two or more customers receive their burgers at the same time, print their numbers in ascending order. Sample Input 0 3 1 3 2 3 3 3  Sample Output 0 1 2 3  Explanation 0  Jim has the following orders: . This order is delivered at time . . This order is delivered at time . . This order is delivered at time . The orders were delivered in the same order as the customers stood in line. The index in  is the customer number and is what is printed.  In this case, the customer numbers match the order numbers. Sample Input 1 5 8 1 4 2 5 6 3 1 4 3  Sample Output 1 4 2 5 1 3  Explanation 1  Jim has the following orders: . This order is delivered at time . . This order is delivered at time . . This order is delivered at time . . This order is delivered at time . . This order is delivered at time . When we order these by ascending fulfillment time, we get: : customer . : customer . : customer . : customer . : customer . We print the ordered numbers in the bulleted listed above as 4 2 5 1 3.  4 2 5 1 3 Note: While not demonstrated in these sample cases, recall that any orders fulfilled at the same time must be listed by ascending order number.
__label__Greedy-Algorithms Consider two -element arrays of integers,  and . You want to permute them into some  and  such that the relation  holds for all  where . For example, if , , and , a valid  satisfying our relation would be  and ,  and . You are given  queries consisting of , , and . For each query, print YES on a new line if some permutation ,  satisfying the relation above exists.  Otherwise, print NO.   YES NO Function Description  Complete the twoArrays function in the editor below.  It should return a string, either YES or NO.   YES NO twoArrays has the following parameter(s):   k: an integer   A: an array of integers   B: an array of integers   Input Format The first line contains an integer , the number of queries.  The next  sets of  lines are as follows: The first line contains two space-separated integers  and , the size of both arrays  and , and the relation variable. The second line contains  space-separated integers . The third line contains  space-separated integers . Constraints     Output Format For each query, print YES on a new line if valid permutations exist.  Otherwise, print NO. YES NO Sample Input 2 3 10 2 1 3 7 8 9 4 5 1 2 2 1 3 3 3 4  Sample Output YES NO  Explanation We perform the following two queries: , , and . We permute these into  and  so that the following statements are true:      Thus, we print YES on a new line.  , , and . We permute these into  and  so that the following statements are true:      Thus, we print YES on a new line.  YES , , and . To permute  and  into a valid  and , we would need at least three numbers in  to be greater than ; as this is not the case, we print NO on a new line. NO
__label__Greedy-Algorithms Alice gives Bob a board composed of  wooden squares and asks him to find the minimum cost of breaking the board back down into its individual squares. To break the board down, Bob must make cuts along its horizontal and vertical lines.  To reduce the board to squares, Bob makes horizontal and vertical cuts across the entire board.  Each cut has a given cost,  or  for each cut along a row or column across one board, so the cost of a cut must be multiplied by the number of segments it crosses.  The cost of cutting the whole board down into  squares is the sum of the costs of each successive cut.    Can you help Bob find the minimum cost?  The number may be large, so print the value modulo . For example, you start with a  board.  There are two cuts to be made at a cost of  for the horizontal and  for the vertical.  Your first cut is across  piece, the whole board.  You choose to make the horizontal cut between rows  and  for a cost of .  The second cuts are vertical through the two smaller boards created in step  between columns  and .  Their cost is .  The total cost is  and . Function Description  Complete the boardCutting function in the editor below.  It should return an integer.   boardCutting has the following parameter(s):   cost_x: an array of integers, the costs of vertical cuts   cost_y: an array of integers, the costs of horizontal cuts   Input Format The first line contains an integer , the number of queries. The following  sets of lines are as follows: The first line has two positive space-separated integers  and , the number of rows and columns in the board.     The second line contains  space-separated integers cost_y[i], the cost of a  horizontal cut between rows  and  of one board. The third line contains  space-separated integers cost_x[j], the cost of a vertical cut between columns  and  of one board. Constraints       Output Format For each of the  queries, find the minimum cost () of cutting the board into  squares and print the value of . Sample Input 0 1 2 2 2 1  Sample Output 0 4  Explanation 0  We have a  board, with cut costs  and . Our first cut is horizontal between  and , because that is the line with the highest cost (). Our second cut is vertical, at . Our first cut has a  of  because we are making a cut with cost  across  segment, the uncut board. The second cut also has a  of  but we are making a cut of cost  across  segments. Our answer is . Sample Input 1 1 6 4 2 1 3 1 4 4 1 2  Sample Output 1  42  Explanation 1  Our sequence of cuts is: , , , , , ,  and .  Cut 1: Horizontal with cost  across  segment. .  Cut 2: Vertical with cost  across  segments. .  Cut 3: Horizontal with cost  across  segments. .  Cut 4: Horizontal with cost  across  segments. .  Cut 5: Vertical with cost  across  segments. .  Cut 6: Horizontal with cost  across  segments. .  Cut 7: Horizontal with cost  across  segments. .  Cut 8: Vertical with cost  across  segments. .       . We then print the value of .
__label__Strings __label__Greedy-Algorithms Given a string, , we define some operations on the string as follows: a.  denotes the string obtained by reversing string . Example:    b.  denotes any string that's a permutation of string . Example:    c.  denotes any string that's obtained by interspersing the two strings  & , maintaining the order of characters in both. For example,  & , one possible result of  could be , another could be , another could be  and so on.   Given a string  such that  for some string , find the lexicographically smallest . For example, .  We can split it into two strings of .  The reverse is  and we need to find a string to shuffle in to get .  The middle two characters match our reverse string, leaving the  and  at the ends.  Our shuffle string needs to be .  Lexicographically , so our answer is .   Function Description Complete the reverseShuffleMerge function in the editor below.  It must return the lexicographically smallest string fitting the criteria.   reverseShuffleMerge has the following parameter(s): s: a string Input Format A single line containing the string . Constraints  contains only lower-case English letters, ascii[a-z]    Output Format Find and return the string which is the lexicographically smallest valid . Sample Input 0 Sample Output 0 Explanation 0 Split "eggegg" into strings of like character counts: "egg", "egg"  reverse("egg") = "gge"  shuffle("egg") can be "egg"  "eggegg" belongs to the merge of ("gge", "egg") The merge is: gge. 'egg' < 'gge' Sample Input 1 Sample Output 1 Explanation 1 Split the string into two strings with like characters:  and .  Reverse  =   Shuffle  can be   Merge to bcdefga  Sample Input 2 Sample Output 2 Explanation 2 Split the string into groups of like characters:   Reverse  =   These merge to uoiea
__label__Greedy-Algorithms Goodland is a country with a number of evenly spaced cities along a line.  The distance between adjacent cities is  unit.  There is an energy infrastructure project planning meeting, and the government needs to know the fewest number of power plants needed to provide electricity to the entire list of cities.  Determine that number.  If it cannot be done, return . You are given a list of city data.  Cities that may contain a power plant have been labeled .  Others not suitable for building a plant are labeled .  Given a distribution range of , find the lowest number of plants that must be built such that all cities are served.  The distribution range limits supply to cities where distance is less than k. For example, you are given  and your city data is .  Each city is  unit distance from its neighbors, and we'll use  based indexing.  We see there are  cities suitable for power plants, cities  and .  If we build a power plant at , it can serve  through  because those endpoints are at a distance of  and .  To serve , we would need to be able to build a plant in city  or .  Since none of those is suitable, we must return .  It cannot be done using the current distribution constraint. Function Description  Complete the pylons function in the editor below.  It should return an integer that represents the minimum number of plants required or -1 if it is not possible.   pylons has the following parameter(s):   k: an integer that represents distribution range   arr: an array of integers that represent suitability as a building site   Input Format The first line contains two space-separated integers  and , the number of cities in Goodland and the plants' range constant.  The second line contains  space-separated binary integers where each integer indicates suitability for building a plant.   Constraints  Each . Subtask  for  of the maximum score. Output Format Print a single integer denoting the minimum number of plants that must be built so that all of Goodland's cities have electricity.  If this is not possible for the given value of , print . Sample Input 6 2 0 1 1 1 1 0  Sample Output 2  Explanation Cities , , , and  are suitable for power plants.  Each plant will have a range of . If we build in cities  cities,  and , then all cities will have electricity.
__label__Greedy-Algorithms Quibdó in Colombia is one among the cities that receive maximum rainfall in the world. All year round, the city is covered in clouds. The city has many towns, located on a one-dimensional line. The positions and populations of each town on the number line are known to you.  Every cloud covers all towns located at a certain distance from it. A town is said to be in darkness if there exists at least one cloud such that the town is within the cloud's range. Otherwise, it is said to be sunny.  The city council has determined that they have enough money to remove exactly one cloud using their latest technology. Thus they want to remove the cloud such that the fewest number of people are left in darkness after the cloud is removed. What is the maximum number of people that will be in a sunny town after removing exactly one cloud? Note: If a town is not covered by any clouds, then it is already considered to be sunny, and the population of this town must also be included in the final answer. Complete the function maximumPeople which takes four arrays representing the populations of each town, locations of the towns, locations of the clouds, and the extents of coverage of the clouds respectively, and returns the maximum number of people that will be in a sunny town after removing exactly one cloud. maximumPeople Input Format The first line of input contains a single integer , the number of towns. The next line contains  space-separated integers . The  integer in this line denotes the population of the  town.   The next line contains  space-separated integers  denoting the location of the  town on the one-dimensional line. The next line consists of a single integer  denoting the number of clouds covering the city.   The next line contains  space-separated integers  the  of which denotes the location of the  cloud on the coordinate axis. The next line consists of  space-separated integers  denoting the range of the  cloud.  Note: The range of each cloud is computed according to its location, i.e., the  cloud is located at position  and it covers every town within a distance of  from it. In other words, the  cloud covers every town with location in the range . Constraints    Output Format Print a single integer denoting the maximum number of people that will be in a sunny town by removing exactly one cloud. Sample Input 0 Sample Output 0 Explanation 0 In the sample case, there is only one cloud which covers the first town. Our only choice is to remove this sole cloud which will make all towns sunny, and thus, all  people will live in a sunny town.   As you can see, the only cloud present, is at location  on the number line and has a range , so it covers towns located at ,  and  on the number line. Hence, the first town is covered by this cloud and removing this cloud makes all towns sunny.
__label__Greedy-Algorithms Chief's bot is playing an old DOS based game.  There is a row of buildings of different heights arranged at each index along a number line.  The bot starts at building  and at a height of .  You must determine the minimum energy his bot needs at the start so that he can jump to the top of each building without his energy going below zero.   Units of height relate directly to units of energy.  The bot's energy level is calculated as follows:   If the bot's  is less than the height of the building, his   If the bot's  is greater than the height of the building, his   For example, building heights are given as .  If the bot starts with , we get the following table: botEnergy   height  delta 4               2       +2 6               3       +3 9               4       +5 14              3       +11 25              2       +23 48  That allows the bot to complete the course, but may not be the minimum starting value.  The minimum starting  in this case is .   Function Description  Complete the chiefHopper function in the editor below.  It should return an integer that represents the minimum starting  that will allow completion of the course.   chiefHopper has the following parameter(s):   arr: an array of integers that represent building heights   Input Format The first line contains an integer , the number of buildings.  The next line contains  space separated integers  representing the heights of the buildings.   Constraints     Output Format Print a single integer representing minimum units of energy required to complete the game. Sample Input 0 Sample Output 0 Explanation 0 If initial energy is 4, after step 1 energy is 5, after step 2 it's 6, after step 3 it's 9 and after step 4 it's 16, finally at step 5 it's 28.  If initial energy were 3 or less, the bot could not complete the course.  Sample Input 1 Sample Output 1 Explanation 1 In the second test case if bot has energy 4, it's energy is changed by (4 - 4 = 0) at every step and remains 4.   Sample Input 2 Sample Output 2 Explanation 2 botEnergy   height  delta 3           1       +2 5           6       -1 4           4       0 4  We can try lower values to assure that they won't work.
__label__Greedy-Algorithms Watson gives Sherlock an array of integers.  Given the endpoints of an integer range, for all  in that inclusive range, determine the minimum( abs(arr[i]-M) for all ) ).  Once that has been determined for all integers in the range, return the  which generated the maximum of those values.  If there are multiple 's that result in that value, return the lowest one.   For example, your array  and your range is from  to  inclusive. We look at the Min column and see the maximum of those three values is .  Two 's result in that answer so we choose the lower value, . Min Function Description  Complete the sherlockAndMinimax function in the editor below.  It should return an integer as described.   sherlockAndMinimax has the following parameters:  - arr: an array of integers  - p: an integer that represents the lowest value of the range for   - q: an integer that represents the highest value of the range for   Input Format The first line contains an integer , the number of elements in .  The next line contains  space-separated integers .  The third line contains two space-separated integers  and , the inclusive endpoints for the range of .        Constraints       Output Format Print the value of  on a line. Sample Input 3 5 8 14 4 9  Sample Output 4  Explanation  For , or , the result is . Since we have to output the smallest of the multiple solutions, we print .
__label__Greedy-Algorithms Victoria is splurging on expensive accessories at her favorite stores. Each store stocks  types of accessories, where the  accessory costs  dollars (). Assume that an item's type identifier is the same as its cost, and the store has an unlimited supply of each accessory. Victoria wants to purchase a total of  accessories according to the following rule: Any -element subset of the purchased items must contain at least  different types of accessories.  For example, if , , and , then she must choose  accessories such that any subset of  of the  accessories will contain at least  distinct types of items.  Given , , , and  values for  shopping trips, find and print the maximum amount of money that Victoria can spend during each trip; if it's not possible for Victoria to make a purchase during a certain trip, print SAD instead. You must print your answer for each trip on a new line. SAD Input Format The first line contains an integer, , denoting the number of shopping trips.  Each of the  subsequent lines describes a single shopping trip as four space-separated integers corresponding to , , , and , respectively. Constraints       The sum of the 's for all  shopping trips .   Output Format For each shopping trip, print a single line containing either the maximum amount of money Victoria can spend; if there is no collection of items satisfying her shopping rule for the trip's , , , and  values, print SAD instead. SAD Sample Input 2 6 5 3 2 2 1 2 2  Sample Output 24 SAD  Explanation Shopping Trip 1:  We know that: Victoria wants to buy  accessories.  The store stocks the following  types of accessories: .  For any grouping of  of her  accessories, there must be at least  distinct types of accessories.   Victoria can satisfy her shopping rule and spend the maximum amount of money by purchasing the following set of accessories: . The total cost is , so we print  on a new line. Shopping Trip 2:  We know that: Victoria wants to buy  accessories. The store stocks  type of accessory: .  For any grouping of  of her  accessories, there must be at least  distinct types of accessories.  Because the store only carries  type of accessory, Victoria cannot make a purchase satisfying the constraint that there be at least  distinct types of accessories. Because Victoria will not purchase anything, we print that she is SAD on a new line.  SAD
__label__Greedy-Algorithms For an upcoming programming contest, Roy is forming some teams from the students of his university. A team can have any number of contestants.  Roy knows the skill level of each contestant. To make the teams work as a unit, he forms the teams based on some rules. Each of the team members must have a unique skill level for the team.  If a member's skill level is  where , there exists another team member whose skill level is . Note that a contestant can write buggy code and thus can have a negative skill level. The more contestants on the team, the more problems they can attempt at a time so Roy wants to form teams such that the smallest team is as large as possible. For example, there are  contestants with skill levels .  There are many ways teams could be formed, e.g. [-1], [0],...,[3].  At the other end of the spectrum, we could form  and .  We're looking for the largest smaller team size though.  Two sets that meet the criteria are  and .  The largest smaller team size possible is . Note: There is an edge case where  contestants have registered.  As no teams are to be created, the largest team created will have  members. Input Format The first line contains an integer , the number of test cases.   Each of the next  lines contains a string of space-separated integers,  followed by  integers , a list of the contestants' skill levels. Constraints       Output Format For each test case, print the size of largest possible smallest team on a separate line. Sample Input 4   7 4 5 2 3 -4 -3 -5   1 -4   4 3 2 3 1   7 1 -2 -3 -4 2 0 -1    Sample Output 3 1 1 7  Explanation For the first case, Roy can form two teams: one with contestants with skill levels {-4,-3,-5} and the other one with {4,5,2,3}. The first group containing 3 members is the smallest.   {-4,-3,-5} {4,5,2,3} 3 In the second case, the only team is {-4}  {-4} In the third case, the teams are {3} , {1,2,3}, the size of the smaller group being 1. {3} {1,2,3} 1 In the last case, you can build one group containing all of the contestants. The size of the group equals the total number of contestants. Time limits  Time limits for this challenge are given here Note  If n = 0, print 0.
__label__Mathematics Meereen is famous for its fighting pits where fighters fight each other to the death. Initially, there are  fighters and each fighter has a strength value. The  fighters are divided into  teams, and each fighter belongs exactly one team. For each fight, the Great Masters of Meereen choose two teams,  and , that must fight each other to the death. The teams attack each other in alternating turns, with team  always launching the first attack. The fight ends when all the fighters on one of the teams are dead. Assume each team always attacks optimally. Each attack is performed as follows: The attacking team chooses a fighter from their team with strength . The chosen fighter chooses at most  fighters from other team and kills all of them.  The Great Masters don't want to see their favorite fighters fall in battle, so they want to build their teams carefully and know who will win different team matchups. They want you to perform two type of queries: 1 p x Add a new fighter with strength  to team . It is guaranteed that this new fighter's strength value will not be less than any current member of team . 1 p x 2 x y Print the name of the team that would win a matchup between teams  and  in their current state (recall that team  always starts first). It is guaranteed that .  2 x y Given the initial configuration of the teams and  queries, perform each query so the Great Masters can plan the next fight. Note: You are determining the team that would be the winner if the two teams fought. No fighters are actually dying in these matchups so, once added to a team, a fighter is available for all future potential matchups. Input Format The first line contains three space-separated integers describing the respective values of  (the number of fighters),  (the number of teams), and  (the number of queries).  Each line  of the  subsequent lines contains two space-separated integers describing the respective values of fighter 's strength, , and team number, .  Each of the  subsequent lines contains a space-separated query in one of the two formats defined in the Problem Statement above (i.e., 1 p x or 2 x y). 1 p x 2 x y Constraints     It is guaranteed that both teams in a query matchup will always have at least one fighter. Scoring  This challange has binary scoring. This means you will get a full score if your solution passes all test cases; otherwise, you will get  points. Output Format After each type  query, print the name of the winning team on a new line. For example, if  and  are matched up and  wins, you would print . Sample Input 7 2 6 1 1 2 1 1 1 1 2 1 2 1 2 2 2 2 1 2 2 2 1 1 2 1 1 2 1 2 1 2 2 2 1  Sample Output 1 2 1 1  Explanation Team  has three fighters with the following strength levels: .  Team  has four fighters with the following strength levels: .       The first query matching up team  and  would play out as follows: Team  attacks  The fighter with strength  can kill one fighter with strength  and one fighter with strength . Now, , and . Team  attacks  The fighter with strength  can kill the fighter with strength . Now, , and . Team  attacks  The fighter with strength  can kill one fighter with strength . Now, , and . Team  attacks  The fighter with strength  can kill one fighter with strength . Now, , and . Team  attacks  The fighter with strength  can kill the last fighter with strength . Now, , and . After this last attack, all of Team 's fighters would be dead. Thus, we print  as team  would win that fight.
__label__Dynamic-Programming You are working at the cash counter at a fun-fair, and you have different types of coins available to you in infinite quantities. The value of each coin is already given. Can you determine the number of ways of making change for a particular number of units using the given types of coins?  For example, if you have  types of coins, and the value of each type is given as  respectively, you can make change for  units in three ways:  , , and . Function Description  Complete the getWays function in the editor below.  It must return an integer denoting the number of ways to make change.   getWays has the following parameter(s): n: an integer, the amount to make change for   c: an array of integers representing available denominations   Input Format The first line contains two space-separated integers describing the respective values of  and , where:   is the number of units   is the number of coin types  The second line contains  space-separated integers describing the respective values of each coin type :  (the list of distinct coins available in infinite amounts). Constraints    Each  is guaranteed to be distinct. Hints Solve overlapping subproblems using Dynamic Programming (DP):      You can solve this problem recursively but will not pass all the test cases without optimizing to eliminate the overlapping subproblems. Think of a way to store and reference previously computed solutions to avoid solving the same subproblem multiple times. * Consider the degenerate cases:      - How many ways can you make change for  cents?      - How many ways can you make change for  cents if you have no coins? * If you're having trouble defining your solutions store, then think about it in terms of the base case . - The answer may be larger than a -bit integer. Output Format Print a long integer denoting the number of ways we can get a sum of  from the given infinite supply of  types of coins. Sample Input 0 Sample Output 0 Explanation 0 There are four ways to make change for  using coins with values given by :      Thus, we print  as our answer. Sample Input 1 Sample Output 1 Explanation 1 There are five ways to make change for  units using coins with values given by :        Thus, we print  as our answer.
__label__Dynamic-Programming Christy is interning at HackerRank. One day she has to distribute some chocolates to her colleagues. She is biased towards her friends and plans to give them more than the others. One of the program managers hears of this and tells her to make sure everyone gets the same number. To make things difficult, she must equalize the number of chocolates in a series of operations. For each operation, she can give  chocolates to all but one colleague.  Everyone who gets chocolate in a round receives the same number of pieces.   For example, assume the starting distribution is .  She can give  bars to the first two and the distribution will be .  On the next round, she gives the same two  bars each, and everyone has the same number:  . Given a starting distribution, calculate the minimum number of operations needed so that every colleague has the same number of chocolates.  Function Description  Complete the equal function in the editor below.  It should return an integer that reperesents the minimum number of operations required.   equal has the following parameter(s):   arr: an array of integers to equalize   Input Format The first line contains an integer , the number of test cases.    Each test case has  lines.  - The first line contains an integer , the number of colleagues.  - The second line contains  space-separated integers denoting the number of chocolates each colleague has. Constraints     Number of initial chocolates each colleague has <   Output Format Print the minimum number of operations needed for each test case, one to a line. Sample Input 1 4 2 2 3 7  Sample Output 2  Explanation Start with   Add  to all but the 3rd element   Add  to all but the 4th element   Two operations were required. Sample Input 1 1 3 10 7 12  Sample Output 1 3  Explanation 1 Start with   Add  to the first two elements   Add  to the last two elements   Add  to the last two elements   Three operations were required.
__label__Greedy-Algorithms Sean invented a game involving a  matrix where each cell of the matrix contains an integer. He can reverse any of its rows or columns any number of times.  The goal of the game is to maximize the sum of the elements in the  submatrix located in the upper-left quadrant of the matrix. Given the initial configurations for  matrices, help Sean reverse the rows and columns of each matrix in the best possible way so that the sum of the elements in the matrix's upper-left quadrant is maximal.   For example, given the matrix: It is  so we want to maximize the top left  matrix.  Reverse row : And now reverse column : The maximal sum is . Function Description  Complete the flippingMatrix function in the editor below.  It should return an integer that represents the maximum sum possible for the top  matrix.   flippingMatrix has the following parameters:  - matrix: a  array of integers   Input Format The first line contains an integer , the number of queries.    The next  sets of lines are in the following format: The first line of each query contains an integer, .  Each of the next  lines contains  space-separated integers  in row  of the matrix.   Constraints     , where . Output Format You must print  lines of output. For each query, print the maximum possible sum of the elements in the matrix's upper-left quadrant. Sample Input 1 2 112 42 83 119 56 125 56 49 15 78 101 43 62 98 114 108  Sample Output 414  Explanation We start out with the following  matrix:   We can perform the following operations to maximize the sum of the  submatrix in the upper-left corner: Reverse column  (), resulting in the matrix:   Reverse row  (), resulting in the matrix:   When we sum the values in the  submatrix in the upper-left quadrant, we get .
__label__Dynamic-Programming In this challenge, you will be given an array  and must determine an array .  There is a special rule:  For all , .  That is,  can be any number you choose such that .  Your task is to select a series of  given  such that the sum of the absolute difference of consecutive pairs of  is maximized.  This will be the array's cost, and will be represented by the variable  below.  The equation can be written:   For example, if the array , we know that , , and .  Arrays meeting those guidelines are: Our calculations for the arrays are as follows: The maximum value obtained is . Function Description Complete the cost function in the editor below.  It should return the maximum value that can be obtained.   cost has the following parameter(s):   B: an array of integers   Input Format The first line contains the integer , the number of test cases.  Each of the next  pairs of lines is a test case where:  - The first line contains an integer , the length of   - The next line contains  space-separated integers   Constraints     Output Format For each test case, print the maximum sum on a separate line.    Sample Input 1 5 10 1 10 1 10  Sample Output 36  Explanation The maximum sum occurs when A[1]=A[3]=A[5]=10 and A[2]=A[4]=1.  That is .
__label__Bit It's New Year's Day and everyone's in line for the Wonderland rollercoaster ride! There are a number of people queued up, and each person wears a sticker indicating their initial position in the queue.  Initial positions increment by  from  at the front of the line to  at the back. Any person in the queue can bribe the person directly in front of them to swap positions. If two people swap positions, they still wear the same sticker denoting their original places in line. One person can bribe at most two others.  For example, if  and  bribes , the queue will look like this: . Fascinated by this chaotic queue, you decide you must know the minimum number of bribes that took place to get the queue into its current state! Function Description Complete the function minimumBribes in the editor below.  It must print an integer representing the minimum number of bribes necessary, or Too chaotic if the line configuration is not possible.   Too chaotic minimumBribes has the following parameter(s): q: an array of integers   Input Format The first line contains an integer , the number of test cases.    Each of the next  pairs of lines are as follows:  - The first line contains an integer , the number of people in the queue  - The second line has  space-separated integers describing the final state of the queue.   Constraints    Subtasks For  score  For  score  Output Format Print an integer denoting the minimum number of bribes needed to get the queue into its final state.  Print Too chaotic if the state is invalid, i.e. it requires a person to have bribed more than  people. Too chaotic Sample Input 2 5 2 1 5 3 4 5 2 5 1 3 4  Sample Output 3 Too chaotic  Explanation Test Case 1 The initial state:  After person  moves one position ahead by bribing person :  Now person  moves another position ahead by bribing person :  And person  moves one position ahead by bribing person :  So the final state is  after three bribing operations. Test Case 2 No person can bribe more than two people, so its not possible to achieve the input state.
__label__Dynamic-Programming Your goal is to find the number of ways to construct an array such that consecutive positions contain different values. Specifically, we want to construct an array with  elements such that each element between  and , inclusive. We also want the first and last elements of the array to be  and .   Given ,  and , find the number of ways to construct such an array. Since the answer may be large, only find it modulo .  For example, for , , , there are  ways, as shown here:  Complete the function countArray which takes input ,  and . Return the number of ways to construct the array such that consecutive elements are distinct.  countArray Constraints       Subtasks For  of the maximum score,  and   Sample Input , ,   Sample Output  Explanation Refer to the diagram in the challenge statement.
__label__Dynamic-Programming __label__Tree King Arthur has a large kingdom that can be represented as a tree, where nodes correspond to cities and edges correspond to the roads between cities. The kingdom has a total of  cities numbered from  to .  The King wants to divide his kingdom between his two children, Reggie and Betty, by giving each of them  or more cities; however, they don't get along so he must divide the kingdom in such a way that they will not invade each other's cities. The first sibling will invade the second sibling's city if the second sibling has no other cities directly connected to it. For example, consider the kingdom configurations below:  Given a map of the kingdom's  cities, find and print the number of ways King Arthur can divide it between his two children such that they will not invade each other. As this answer can be quite large, it must be modulo . Input Format The first line contains a single integer denoting  (the number of cities in the kingdom).  Each of the  subsequent lines contains two space-separated integers,  and , describing a road connecting cities  and .  Constraints   It is guaranteed that all cities are connected. Subtasks  for  of the maximum score. Output Format Print the number of ways to divide the kingdom such that the siblings will not invade each other, modulo . Sample Input 5 1 2 1 3 3 4 3 5  Sample Output 4  Explanation In the diagrams below, red cities are ruled by Betty and blue cities are ruled by Reggie. The diagram below shows a division of the kingdom that results in war between the siblings:  Because cities  and  are not connected to any other red cities, blue city  will cut off their supplies and declare war on them. That said, there are four valid ways to divide the kingdom peacefully:  We then print the value of  as our answer.
__label__Strings This challenge uses the famous KMP algorithm. It isn't really important to understand how KMP works, but you should understand what it calculates. A KMP algorithm takes a string, , of length  as input. Let's assume that the characters in  are indexed from  to ; for every prefix of , the algorithm calculates the length of its longest valid border in linear complexity. In other words, for every  (where ) it calculates the largest  (where ) such that for every  (where ) there is . Here is an implementation example of KMP: Given a sequence , construct a string, , that meets the following conditions: The frequency of letter '' in  is exactly , the frequency of letter '' in  is exactly , and so on. Let's assume characters of  are numbered from  to , where . We apply the KMP algorithm to  and get a table, , of size . You must ensure that the sum of  for all  is minimal. If there are multiple strings which fulfill the above conditions, print the lexicographically smallest one. Input Format A single line containing  space-separated integers describing sequence .  Constraints The sum of all  will be a positive integer . Output Format Print a single string denoting . Sample Input 2 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0  Sample Output aabb  Explanation The output string must have two '' and two ''. There are several such strings but we must ensure that sum of  for all  is minimal. See the figure below:  The minimum sum is . Among all the strings that satisfy both the condition, "aabb" is the lexicographically smallest.
__label__Dynamic-Programming Samantha and Sam are playing a numbers game.  Given a number as a string, no leading zeros, determine the sum of all integer values of substrings of the string.  For example, if the string is , the substrings are  and .  Their sum is . Given an integer as a string, sum all of its substrings cast as integers.  As the number may become large, return the value modulo .   Function Description Complete the substrings function in the editor below.  It should return the sum of the integer values of all substrings in a string representation of a number, modulo .   substrings has the following parameter(s):   n: the string representation of an integer   Input Format A single line containing an integer as a string without leading zeros.   Constraints  Output Format A single line which is sum of the substrings,  Sample Input 0 Sample Output 0 Explanation 0 The substring of number 16 are 16, 1 and 6 which sums to 23. 16 16, 1 6 23 Sample Input 1 Sample Output 1 Explanation 1 The sub-strings of 123 are 1, 2, 3, 12, 23, 123 which sums to 164.  123 1, 2, 3, 12, 23, 123 164
__label__Dynamic-Programming We define a modified Fibonacci sequence using the following definition: Given terms  and  where , term  is computed using the following relation:     For example, if  and ,   ,   ,   ,   and so on.   Given three integers, , , and , compute and print the  term of a modified Fibonacci sequence. Function Description  Complete the fibonacciModified function in the editor below.  It must return the  number in the sequence.   fibonacciModified has the following parameter(s):   t1: an integer   t2: an integer   n: an integer   Note: The value of  may far exceed the range of a -bit integer. Many submission languages have libraries that can handle such large results but, for those that don't (e.g., C++), you will need to compensate for the size of the result. Input Format A single line of three space-separated integers describing the respective values of , , and . Constraints     may far exceed the range of a -bit integer.  Output Format Print a single integer denoting the value of term  in the modified Fibonacci sequence where the first two terms are  and .  Sample Input 0 1 5  Sample Output 5  Explanation The first two terms of the sequence are  and , which gives us a modified Fibonacci sequence of . Because , we return the  term.
__label__Dynamic-Programming Consider an array, , of  integers. We define the following terms: Subsequence  A subsequence of  is an array that's derived by removing zero or more elements from  without changing the order of the remaining elements. Note that a subsequence may have zero elements, and this is called the empty subsequence. Subsequence  A subsequence of  is an array that's derived by removing zero or more elements from  without changing the order of the remaining elements. Note that a subsequence may have zero elements, and this is called the empty subsequence. Strictly Increasing Subsequence  A non-empty subsequence is strictly increasing if every element of the subsequence is larger than the previous element.  Strictly Increasing Subsequence  A non-empty subsequence is strictly increasing if every element of the subsequence is larger than the previous element.  Subarray  A subarray of  is an array consisting of a contiguous block of 's elements in the inclusive range from index  to index . Any subarray of  can be denoted by . Subarray  A subarray of  is an array consisting of a contiguous block of 's elements in the inclusive range from index  to index . Any subarray of  can be denoted by . The diagram below shows all possible subsequences and subarrays of :   We define the following functions:   = the maximum sum of some strictly increasing subsequence in subarray   We define the goodness, , of array  to be:   In other words,  is the maximum possible value of  for all possible subarrays of array .  Let  be the length of the smallest subarray such that . Given , find the value of  as well as the number of subarrays such that  and , then print these respective answers as space-separated integers on a single line. Input Format The first line contains an integer, , denoting number of elements in array .  The second line contains  space-separated integers describing the respective values of . Constraints   Subtasks  For the  of the maximum score:     For the  of the maximum score:     Output Format Print two space-seperated integers describing the respective values of  and the number of subarrays satisfying  and . Sample Input 0 Sample Output 0 Explanation 0 The figure below shows how to calculate :   is the length of the smallest subarray satisfying . From the table, we can see that . There is only one subarray of length  such that .
__label__Dynamic-Programming Penny has an array of  integers, . She wants to find the number of unique multisets she can form using elements from the array such that the bitwise XOR of all the elements of the multiset is a prime number. Recall that a multiset is a set which can contain duplicate elements. Given  queries where each query consists of an array of integers, can you help Penny find and print the number of valid multisets for each array? As these values can be quite large, modulo each answer by  before printing it on a new line. Input Format The first line contains a single integer, , denoting the number of queries. The  subsequent lines describe each query in the following format: The first line contains a single integer, , denoting the number of integers in the array. The second line contains  space-separated integers describing the respective values of . Constraints     Output Format On a new line for each query, print a single integer denoting the number of unique multisets Penny can construct using numbers from the array such that the bitwise XOR of all the multiset's elements is prime. As this value is quite large, your answer must be modulo . Sample Input 1    3    3511 3671 4153    Sample Output 4  Explanation The valid multisets are:  is prime.  is prime.  is prime. , which is prime. Because there are four valid multisets, we print the value of  on a new line.
__label__Graph-Algorithms __label__Graph-Algorithms Daniel loves graphs. He thinks a graph is special if it has the following properties: It is undirected. The length of each edge is . It includes exactly  different lovely triplets.  A triplet is a set of  different nodes. A triplet is lovely if the minimum distance between each pair of nodes in the triplet is exactly . Two triplets are different if  or more of their component nodes are different.  Given  and , help Daniel draw a special graph. Input Format A single line containing  space-separated integers,  (the number of different lovely triplets you must have in your graph) and  (the required distance between each pair of nodes in a lovely triplet), respectively. Constraints   Output Format For the first line, print  space-separated integers,  (the number of nodes in the graph) and  (the number of edges in the graph), respectively.  On each line  of the  subsequent lines, print two space-separated integers,  and , describing an edge between nodes  and . Your output must satisfy the following conditions:   If there is more than one correct answer, print any one of them. Sample Input 3 2  Sample Output 7 7 1 2 2 3 3 4 4 5 5 6 6 1 1 7  Explanation There are exactly  lovely triplets in this graph: , , and .  Observe that each node in a lovely triplet is  edges away from the other nodes composing the lovely triplet.
__label__Dynamic-Programming Let's talk about binary numbers. We have an -digit binary number, , and we denote the digit at index  (zero-indexed from right to left) to be . We can find the decimal value of  using the following formula:   For example, if binary number , we compute its decimal value like so:   Meanwhile, in our well-known decimal number system where each digit ranges from  to , the value of some decimal number, , can be expanded in the same way:   Now that we've discussed both systems, let's combine decimal and binary numbers in a new system we call decibinary! In this number system, each digit ranges from  to  (like the decimal number system), but the place value of each digit corresponds to the one in the binary number system. For example, the decibinary number  represents the decimal number  because:   Pretty cool system, right? Unfortunately, there's a problem: two different decibinary numbers can evaluate to the same decimal value! For example, the decibinary number  also evaluates to the decimal value :   This is a major problem because our new number system has no real applications beyond this challenge!  Consider an infinite list of non-negative decibinary numbers that is sorted according to the following rules: The decibinary numbers are sorted in increasing order of the decimal value that they evaluate to.  Any two decibinary numbers that evaluate to the same decimal value are ordered by increasing decimal value, meaning the equivalent decibinary values are strictly interpreted and compared as decimal values and the smaller decimal value is ordered first. For example,  and  both evaluate to . We would order  before  because . Here is a list of first few decibinary numbers properly ordered:  You will be given  queries in the form of an integer, . For each , find and print the the  decibinary number in the list on a new line.   Function Description Complete the decibinaryNumbers function in the editor below.  For each query, it should return the decibinary number at that one-based index.   decibinaryNumbers has the following parameter(s): x: the index of the decibinary number to return    Input Format The first line contains an integer, , the number of queries.  Each of the next  lines contains an integer, , describing a query. Constraints   Subtasks  for  of the maximum score  for  of the maximum score  for  of the maximum score Output Format For each query, print a single integer denoting the the  decibinary number in the list. Note that this must be the actual decibinary number and not its decimal value.  Use 1-based indexing. Sample Input 0 Sample Output 0 Explanation 0 For each , we print the  decibinary number on a new line. See the figure in the problem statement.  Sample Input 1 Sample Output 1 Sample Input 2 Sample Output 2
__label__Dynamic-Programming Li and Lu have  integers, , that they want to divide fairly between the two of them. They decide that if Li gets integers with indices  (which implies that Lu gets integers with indices ), then the measure of unfairness of this division is:    Find the minimum measure of unfairness that can be obtained with some division of the set of integers where Li gets exactly  integers.  Note  means Set complement Input Format The first line contains two space-separated integers denoting the respective values of  (the number of integers Li and Lu have) and  (the number of integers Li wants).  The second line contains  space-separated integers describing the respective values of . Constraints   For  of the test cases, . For  of the test cases, . Output Format Print a single integer denoting the minimum measure of unfairness of some division where Li gets  integers. Sample Input 0 4 2 4 3 1 2  Sample Output 0  6  Explanation 0  One possible solution for this input is .  Sample Input 1  4 1 3 3 3 1  Sample Output 1 2  Explanation 1  The following division of numbers is optimal for this input: .
__label__Dynamic-Programming We define subsequence as any subset of an array.  We define a subarray as a contiguous subsequence in an array.   Given an array, find the maximum possible sum among: all nonempty subarrays.  all nonempty subsequences.  Print the two values as space-separated integers on one line.  Note that empty subarrays/subsequences should not be considered.  For example, given an array , the maximum subarray sum is comprised of element inidices  and the sum is .  The maximum subsequence sum is comprised of element indices  and the sum is .   Function Description  Complete the maxSubarray function in the editor below.  It should return an array of two integers: the maximum subarray sum and the maximum subsequence sum of .   maxSubarray has the following parameter(s):   arr: an array of integers   Input Format The first line of input contains a single integer , the number of test cases. The first line of each test case contains a single integer .  The second line contains  space-separated integers  where .    Constraints      The subarray and subsequences you consider should have at least one element. Output Format Print two space-separated integers denoting the maximum sums of nonempty subarrays and nonempty subsequences, respectively.  Sample Input 0 Sample Output 0 Explanation 0 In the first case: The maximum sum for both types of subsequences is just the sum of all the elements since they are all positive. In the second case: The subarray  is the subarray with the maximum sum, and  is the subsequence with the maximum sum. Sample Input 1 Sample Output 1 Explanation 1 Since all of the numbers are negative, both the maximum subarray and maximum subsequence sums are made up of one element, .
__label__Dynamic-Programming Bill Gates is on one of his philanthropic journeys to a village in Utopia. He has brought a box of packets of candies and would like to distribute one packet to each of the children.  Each of the packets contains a number of candies.  He wants to minimize the cumulative difference in the number of candies in the packets he hands out.  This is called the unfairness sum.  Determine the minimum unfairness sum achievable.  For example, he brings  packets where the number of candies is .  There are  children.  The minimum difference between all packets can be had with  from indices  and .  We must get the difference in the following pairs: .  We calculate the unfairness sum as: Function Description Complete the angryChildren function in the editor below.  It should return an integer that represents the minimum unfairness sum achievable. angryChildren has the following parameter(s): k: an integer that represents the number of children   packets:  an array of integers that represent the number of candies in each packet   Input Format The first line contains an integer .  The second line contains an integer .  Each of the next  lines contains an integer . Constraints       Output Format A single integer representing the minimum achievable unfairness sum. Sample Input 0  7 3 10 100 300 200 1000 20 30  Sample Output 0  40  Explanation 0 Bill Gates will choose packets having 10, 20 and 30 candies.  The unfairness sum is .   Sample Input 1  10 4 1 2 3 4 10 20 30 40 100 200  Sample Output 1  10  Explanation 1  Bill Gates will choose 4 packets having 1,2,3 and 4 candies. The unfairness sum i .
__label__Dynamic-Programming Watson gave Sherlock a collection of arrays . Here each  is an array of variable length. It is guaranteed that if you merge the arrays into one single array, you'll get an array, , of  distinct integers in the range .  Watson asks Sherlock to merge  into a sorted array. Sherlock is new to coding, but he accepts the challenge and writes the following algorithm:  (an empty array).  (an empty array).  number of arrays in the collection .  number of arrays in the collection . While there is at least one non-empty array in :  (an empty array) and . While : If  is not empty: Remove the first element of  and push it to . . While  is not empty: Remove the minimum element of  and push it to . While there is at least one non-empty array in :  (an empty array) and . While : If  is not empty: Remove the first element of  and push it to . . While : If  is not empty: Remove the first element of  and push it to . Remove the first element of  and push it to . . While  is not empty: Remove the minimum element of  and push it to . While  is not empty: Remove the minimum element of  and push it to . Return  as the output. Return  as the output. Let's see an example. Let V be .  The image below demonstrates how Sherlock will do the merging according to the algorithm:  Sherlock isn't sure if his algorithm is correct or not. He ran Watson's input, , through his pseudocode algorithm to produce an output, , that contains an array of  integers. However, Watson forgot the contents of  and only has Sherlock's  with him! Can you help Watson reverse-engineer  to get the original contents of ? Given , find the number of different ways to create collection  such that it produces  when given to Sherlock's algorithm as input. As this number can be quite large, print it modulo . Notes: Two collections of arrays are different if one of the following is true: Their sizes are different. Their sizes are the same but at least one array is present in one collection but not in the other. Two collections of arrays are different if one of the following is true: Their sizes are different. Their sizes are the same but at least one array is present in one collection but not in the other. Two arrays,  and , are different if one of the following is true: Their sizes are different. Their sizes are the same, but there exists an index  such that . Two arrays,  and , are different if one of the following is true: Their sizes are different. Their sizes are the same, but there exists an index  such that . Input Format The first line contains an integer, , denoting the size of array .  The second line contains  space-separated integers describing the respective values of . Constraints     Output Format Print the number of different ways to create collection , modulo . Sample Input 0 Sample Output 0 Explanation 0 There are four distinct possible collections:     . Thus, we print the result of  as our answer. Sample Input 1 Sample Output 1 Explanation 1 The only distinct possible collection is , so we print the result of  as our answer.
__label__Dynamic-Programming Chloe is fascinated by prime numbers. She came across the number  on a sign and, though the number is not prime, found some primes hiding in it by using the following rules:   Every three consecutive digits sum to a prime:  Every four consecutive digits sum to a prime:  Every five consecutive digits sum to a prime:  You must answer  queries, where each query consists of an integer, . For each , find and print the number of positive -digit numbers, modulo , that satisfy all three of Chloe's rules (i.e., every three, four, and five consecutive digits sum to a prime). Input Format The first line contains an integer, , denoting the number of queries.  Each of the  subsequent lines contains an integer denoting the value of  for a query.   Constraints     Output Format For each query, print the number of -digit numbers satisfying Chloe's rules, modulo , on a new line.    Sample Input 0 Sample Output 0 Explanation 0 There are  six-digit numbers satisfying the property above, where the respective first and last ones are  and .
__label__Dynamic-Programming HackerRank-city is an acyclic connected graph (or tree). Its not an ordinary place, the construction of the whole tree takes place in  steps. The process is described below: It initially has  node. At each step, you must create  duplicates of the current tree, and create  new nodes to connect all  copies in the following H shape: H  At each  step, the tree becomes  times bigger plus  new nodes, as well as  new edges connecting everything together. The length of the new edges being added at step  is denoted by input . Calculate the sum of distances between each pair of nodes; as these answers may run large, print your answer modulo . Input Format The first line contains an integer,  (the number of steps). The second line contains  space-separated integers describing  , . Constraints   Subtask  For  score  Output Format Print the sum of distances between each pair of nodes modulo . Sample Input 0 1 1  Sample Output 0 29  Sample Input 1 2 2 1  Sample Output 1 2641  Explanation Sample 0 In this example, our tree looks like this:  Let  denote the distance between nodes  and .    .      We print the result of  as our answer. Sample 1 In this example, our tree looks like this:  We calculate and sum the distances between nodes in the same manner as Sample 0 above, and print the result of our , which is .
__label__Dynamic-Programming __label__Mathematics Consider an array, , of length . We can split  into contiguous segments called pieces and store them as another array, . For example, if , we have the following arrays of pieces:  contains three -element pieces.  contains two pieces, one having  elements and the other having  element.  contains two pieces, one having  element and the other having  elements.  contains one -element piece. We consider the value of a piece in some array  to be , and we consider the total value of some array  to be the sum of the values for all pieces in that . For example, the total value of  is . Given , find the total values for all possible 's, sum them together, and print this sum modulo  on a new line. Input Format The first line contains a single integer, , denoting the size of array .  The second line contains  space-separated integers describing the respective values in  (i.e., ). Constraints   Output Format Print a single integer denoting the sum of the total values for all piece arrays ('s) of , modulo . Sample Input 0 3 1 3 6  Sample Output 0 73  Explanation 0  Given , our piece arrays are: , and . , and . , and . , and . When we sum all the total values, we get . Thus, we print the result of  on a new line. Sample Input 1 5 4 2 9 10 1  Sample Output 1 971
__label__Dynamic-Programming __label__Mathematics Mr K has a rectangular plot of land which may have marshes where fenceposts cannot be set. He wants you to find the perimeter of the largest rectangular fence that can be built on this land. For example, in the following  grid,  marks a marsh and  marks good land. .... ..x. ..x. x...  If we number the rows and columns starting with , we see that there are two main areas that can be fenced:  and .  The longest perimeter is .   Function Description Complete the kMarsh function in the editor below.  It should print either an integer or impossible. impossible kMarsh has the following parameter(s):   grid: an array of strings that represent the grid   Input Format The first line contains two space-separated integers  and , the grid rows and columns.  Each of the next  lines contains  characters each describing the state of the land. 'x' (ascii value: 120) if it is a marsh and '.' ( ascii value:46) otherwise.   Constraints   Output Format Output contains a single integer - the largest perimeter. If the rectangular fence cannot be built, print impossible. Sample Input 0 4 5 ..... .x.x. ..... .....  Sample Output 0 14  Explanation 0  The fence can be put up around the entire field. The perimeter is . Sample Input 1 2 2 .x x.  Sample Output 1 impossible  Explanation 1 We need a minimum of 4 points to place the 4 corners of the fence. Hence, impossible.  Sample Input 2 2 5 ..... xxxx.  Sample Output 2 impossible
__label__Dynamic-Programming In this problem, we'll use the term "longest common substring" loosely.  It refers to substrings differing at some number or fewer characters when compared index by index.  For example, 'abc' and 'adc' differ in one position, 'aab' and 'aba' differ in two.   Given two strings and an integer , determine the length of the longest common substrings of the two strings that differ in no more than  positions.   For example, .  Strings  and .  Check to see if the whole string (the longest substrings) matches.  Given that neither the first nor last characters match and , we need to try shorter substrings.  The next longest substrings are  and .  Two pairs of these substrings only differ in  position:  and .  They are of length .   Function Description Complete the substringDiff function in the editor below.  It should return an integer that represents the length of the longest common substring as defined.   substringDiff has the following parameter(s):   k: an integer that represents the maximum number of differing characters in a matching pair   s1: the first string   s2: the second string   Input Format The first line of input contains a single integer, , the number of test cases follow.  Each of the next  lines contains three space-separated values:  an integer  and two strings,  and . Constraints        All characters in  and . Output Format For each test case, output a single integer which is the length of the maximum length common substrings differing at  or fewer positions. Sample Input Sample Output Explanation First test case: If we take "briz" from the first string, and "orin" from the second string, then the number of mismatches between these two substrings is equal to 2 and their lengths are . First test case: If we take "briz" from the first string, and "orin" from the second string, then the number of mismatches between these two substrings is equal to 2 and their lengths are . Second test case: Since , we should find the longest common substring, standard definition, for the given input strings. We choose "aba" as the result. Second test case: Since , we should find the longest common substring, standard definition, for the given input strings. We choose "aba" as the result. Third test case: We can choose "hellowor" from first string and "yellomar" from the second string.   Third test case: We can choose "hellowor" from first string and "yellomar" from the second string.
__label__Dynamic-Programming You are given two positive integers  and  in binary representation. You should find the following sum modulo :   where operation  means exclusive OR operation, operation  means binary shift to the left. Please note, that we consider ideal model of binary integers. That is there is infinite number of bits in each number, and there are no disappearings (or cyclic shifts) of bits. Input Format The first line contains number   in binary representation. The second line contains number   in the same format. All the numbers do not contain leading zeros. Output Format Output a single integer  the required sum modulo . Sample Input 10 1010  Sample Output 489429555
__label__Dynamic-Programming You have an infinite number of 4 types of lego blocks of sizes given as (depth x height x width): Using these blocks, you want to make a wall of height  and width . Features of the wall are:   - The wall should not have any holes in it.  - The wall you build should be one solid structure, so there should not be a straight vertical break across all rows of bricks.  - The bricks must be laid horizontally.    How many ways can the wall be built? For example, the wall's height  and its width .  Here are some configurations:     These are not all of the valid permutations. Function Description  Complete the legoBlocks function in the editor below.  It should return an integer that represents the number of valid wall formations for the given wall dimensions modulo . legoBlocks has the following parameter(s): n: an integer that represents the height of the wall   m: an integer that represents the width of the wall   Input Format The first line contains the number of test cases .   Each of the next  lines contains two space-separated integers  and .   Constraints     Output Format Output one line for each test case containing the number of ways to build the wall. As the numbers can be very large, output the result modulo 1000000007. Sample Input 4   2 2   3 2   2 3   4 4  Sample Output 3   7   9   3375  Explanation For the first case, we can have:       For the second case, each row of the wall can contain either two blocks of width 1, or one block of width 2. However, the wall where all rows contain two blocks of width 1 is not a solid one as it can be divided vertically. Thus, the number of ways is  and .
__label__Dynamic-Programming You are given a grid having N rows and M columns. A grid square can either be blocked or empty. Blocked squares are represented by a '#' and empty squares are represented by '.'. Find the number of ways to tile the grid using L shaped bricks. A L brick has one side of length three units while other of length 2 units. All empty squares in the grid should be covered by exactly one of the L shaped tiles, and blocked squares should not be covered by any tile. The bricks can be used in any orientation (they can be rotated or flipped). Input Format The first line contains the number of test cases T. T test cases follow. Each test case contains N and M on the first line, followed by N lines describing each row of the grid. Constraints 1 <= T <= 50  1 <= N <= 20  1 <= M <= 8  Each grid square will be either '.' or '#'. Output Format Output the number of ways to tile the grid. Output each answer modulo 1000000007. Sample Input 3   2 4   ....   ....   3 3   ...   .#.   ...   2 2   ##   ##  Sample Output 2   4   1  Explanation NOTE:  If all points in the grid are blocked the number of ways is 1, as in the last sample testcase.
__label__Dynamic-Programming Sophia has discovered several alien languages. Suprisingly, all of these languages have an alphabet, and each of them may contain thousands of characters! Also, all the words in a language have the same number of characters in it. However, the aliens like their words to be aesthetically pleasing, which for them means that for the  letter of an -letter alphabet (letters are indexed ): if , then the  letter may be the last letter of a word, or it may be immediately followed by any letter, including itself. if , then the  letter may be the last letter of a word, or it may be immediately followed by any letter, including itself. if , then the  letter can not be the last letter of a word and also can only be immediately followed by  letter if and only if .   if , then the  letter can not be the last letter of a word and also can only be immediately followed by  letter if and only if .   Sophia wants to know how many different words exist in this language. Since the result may be large, she wants to know this number, modulo . Input Format The first line contains , the number of test cases. The first line is followed by  lines, each line denoting a test case. Each test case will have two space-separated integers ,  which denote the number of letters in the language and the length of words in this language respectively. Constraints       Output Format For each test case, output the number of possible words modulo . Sample Input 3 1 3 2 3 3 2  Sample Output 1 3 6  Explanation For the first test case, there's one letter ('a') and all the words consist of  letters. There's only one possibility which is "aaa".   For the second test case, there are two letters ('a' and 'b') and all the words are of  letters. The possible strings are "abb", "bab", & "bbb". The words can end only with 'b' because  and for 'a', it's . "aab" is not allowed because 'a' can not be followed immediately by 'a'. For a word of length 4 and alphabet of size 2, "abab" would be allowed. For the third test case, there are three letters ('a', 'b' and 'c') and all of the words are  letters. The words can only end with 'b' or 'c'. The possible words are "ab", "ac", "bb", "cc", "bc", "cb".
__label__Dynamic-Programming Your algorithms have become so good at predicting the market that you now know what the share price of Wooden Orange Toothpicks Inc. (WOT) will be for the next number of days. Each day, you can either buy one share of WOT, sell any number of shares of WOT that you own, or not make any transaction at all. What is the maximum profit you can obtain with an optimum trading strategy? For example, if you know that prices for the next two days are , you should buy one share day one, and sell it day two for a profit of .  If they are instead , no profit can be made so you don't buy or sell stock those days.   Function Description  Complete the stockmax function in the editor below.  It must return an integer that represents the maximum profit achievable.   stockmax has the following parameter(s):   prices: an array of integers that represent predicted daily stock prices     Input Format The first line contains the number of test cases . Each of the next  pairs of lines contain:  - The first line contains an integer , the number of predicted prices for WOT.  - The next line contains n space-separated integers , each a predicted stock price for day .   Constraints     Output Format Output  lines, each containing the maximum profit which can be obtained for the corresponding test case. Sample Input 3 3 5 3 2 3 1 2 100 4 1 3 1 2  Sample Output 0 197 3  Explanation For the first case, you cannot obtain any profit because the share price never rises.  For the second case, you can buy one share on the first two days and sell both of them on the third day.  For the third case, you can buy one share on day 1, sell one on day 2, buy one share on day 3, and sell one share on day 4.
__label__Dynamic-Programming You have a warehouse with  containers filled with an infinite number of candies. The containers are arranged in a single row, equally spaced to be  meter apart. You also have  robots that can pick up  piece of candy and transport it between any two containers. The robots take instructions in the form of queries consisting of two integers,  and , respectively. To execute a query, a robot travels to container , picks up  candy, transports it to container , and then stops at  until it receives another query.    Calculate the minimum total distance the robots must travel to execute  queries in order.  Note: You choose which robot executes each query. Input Format The first line contains a single integer,  (the number of test cases); each of the  test cases is described over  lines.      The first line of a test case has two space-separated integers,  (the number of containers) and  (the number of queries).  The  subsequent lines each contain two space-separated integers,  and , respectively; each line  describes the  query. Constraints            Output Format On a new line for each test case, print an integer denoting the minimum total distance that the robots must travel to execute the queries in order. Sample Input 3 5 4 1 5 3 2 4 1 2 4 4 2 1 2 4 3 10 3 2 4 5 4 9 8  Sample Output 11 2 5  Explanation In this explanation, we refer to the two robots as  and , each container  as , and the total distance traveled for each query  as .  Note: For the first query a robot executes, there is no travel distance. For each subsequent query that robot executes, it must travel from the location where it completed its last query. Test Case 0:  The minimum distance traveled is :       Robot:      meters. Robot:      meter.     Robot:      meters.        Robot:      meters. Sum the distances traveled () and print the result on a new line. Test Case 1:  Robot:      meters. Robot:      meters. Sum the distances traveled () and print the result on a new line. Test Case 2:  Robot:      meters. Robot:      meters. Robot:      meters. Sum the distances traveled () and print the result on a new line.
__label__Dynamic-Programming Given a tree T with n nodes, how many subtrees (T') of T have at most K edges connected to (T - T')?  Input Format The first line contains two integers n and K followed by n-1 lines each containing two integers a & b denoting that there's an edge between a & b. Constraints 1 <= K <= n <= 50  Every node is indicated by a distinct number from 1 to n. Output Format A single integer which denotes the number of possible subtrees. Sample Input 3 1 2 1 2 3  Sample Output 6  Explanation There are 2^3 possible sub-trees:    {} {1} {2} {3} {1, 2} {1, 3} {2, 3} {1, 2, 3} But:  the sub-trees {2} and {1,3} are not valid.  {2} isn't valid because it has 2 edges connecting to it's complement {1,3} whereas K = 1 in the sample test-case {1,3} isn't valid because, well, it's not a sub-tree. The nodes aren't connected.
__label__Dynamic-Programming __label__Mathematics Tara has an array, , consisting of  integers where each integer occurs at most  times in the array.  Let's define  to be a permutation of  where  is the  element of permutation . Tara thinks a permutation is beautiful if there is no index  such that  where . You are given  queries where each query consists of some array . For each , help Tara count the number of possible beautiful permutations of the  integers in  and print the count, modulo , on a new line. Note: Two permutations,  and , are considered to be different if and only if there exists an index  such that  and . Input Format The first line contains a single integer, , denoting the number of queries. The  subsequent lines describe each query in the following form: The first line contains an integer, , denoting the number of elements in array .  The second line contains  space-separated integers describing the respective values of  in array . Constraints  Each integer in  can occur at most  times. For  of the maximum score:     The sum of  over all queries does not exceed .   For  of the maximum score:      Output Format For each query, print the the number of possible beautiful permutations, modulo , on a new line. Sample Input 0 Sample Output 0 Explanation 0 We perform the following  queries: Array  and there is only one good permutation:    Thus, we print the result of  on a new line. Array  and there is only one good permutation:    Thus, we print the result of  on a new line. Array  and there are two good permutations:    Thus, we print the result of  on a new line. Array  and there are two good permutations:    Thus, we print the result of  on a new line. Array  and there are two good permutations:    For demonstration purposes, the following two permutations are invalid (i.e., not good):    Because we only want the number of good permutations, we print the result of  on a new line. Array  and there are two good permutations:    For demonstration purposes, the following two permutations are invalid (i.e., not good):    Because we only want the number of good permutations, we print the result of  on a new line.
__label__Dynamic-Programming One day, Wet Shark was given an array . As always, he started playing with its subsequences.   When you came to know about this habit, you presented him a task of finding all pairs of subsequences, , which satisfies all of the following constraints. We will represent a pair of subsequence as  and    and  must be of same length, i.e., .   Please help Wet Shark determine how many possible subsequences  and  can exist. Because the number of choices may be big, output your answer modulo .  Note:  Two segments are different if there's exists at least one index  such that element  is present in exactly one of them. Both subsequences can overlap each other. Subsequences do not necessarily have to be distinct Input Format The first line consists of 3 space-separated integers , , , where  denotes the length of the original array, , and  and  are as defined above.  The next line contains  space-separated integers,  , representing the elements of . Constraints       Output Format Output total number of pairs of subsequences, , satisfying the above conditions. As the number can be large, output it's modulo  Sample Input 0 Sample Output 0 Explanation 0 For array  there are three pairs of subsequences:
__label__Dynamic-Programming Nikita just came up with a new array game. The rules are as follows: Initially, Nikita has an array of integers. Initially, Nikita has an array of integers. In each move, Nikita must partition the array into  non-empty contiguous parts such that the sum of the elements in the left partition is equal to the sum of the elements in the right partition. If Nikita can make such a move, she gets  point; otherwise, the game ends. In each move, Nikita must partition the array into  non-empty contiguous parts such that the sum of the elements in the left partition is equal to the sum of the elements in the right partition. If Nikita can make such a move, she gets  point; otherwise, the game ends. After each successful move, Nikita discards either the left partition or the right partition and continues playing by using the remaining partition as array . After each successful move, Nikita discards either the left partition or the right partition and continues playing by using the remaining partition as array . Nikita loves this game and wants your help getting the best score possible. Given , can you find and print the maximum number of points she can score? For example, Nikita starts with the array .  She first splits it into  and , then discards .  .  Discard  leaving .  This cannot be further split, so Nikita scored .    Function Description  Complete the arraySplitting function in the editor below.  It should return an integer that reperesents the number of times Nikita can split the array.   arraySplitting has the following parameter(s):   arr: an array of integers   Input Format The first line contains an integer , the number of test cases.  Each of the next  pairs of lines is as follows:   The first line contains an integer , the size of array . The next line contains  space-separated integers .   Constraints    Scoring   for  of the test data  for  of the test data  for  of the test data Output Format For each test case, print Nikita's maximum possible score on a new line. Sample Input 3 3 3 3 3 4 2 2 2 2 7 4 1 0 1 1 0 1  Sample Output 0 2 3  Explanation Test Case 0:  Nikita cannot partition  into  parts having equal sums. Therefore, her maximum possible score is  and we print  on a new line. Test Case 1:  Initially,  looks like this:   She splits the array into  partitions having equal sums, and then discards the left partition:     She then splits the new array into  partitions having equal sums, and then discards the left partition:        At this point the array only has  element and can no longer be partitioned, so the game ends. Because Nikita successfully split the array twice, she gets  points and we print  on a new line. Test Case 2: The answer is .
__label__Dynamic-Programming There are  balls in a row, and each ball is either black (B) or white (W). Perform  removal operations with the goal of maximizing the number of white balls picked. For each operation  (where ): B W Choose an integer, , uniformly and independently from  to  (inclusive). Remove the  ball from either the left end or right end of the row, which decrements the number of available balls in the row by . You can choose to remove the ball from whichever end in each step maximizing the expected total number of white balls picked at the end. Given a string describing the initial row of balls as a sequence of  W's and B's, find and print the expected number of white balls providing that you make all choices optimally. A correct answer has an absolute error of at most .   W B Input Format The first line contains two space-separated integers describing the respective values of  (the number of balls) and  (the number of operations).  The second line describes the initial sequence balls as a single string of  characters; each character is either B or W and describes a black or white ball, respectively. B W Constraints  Output Format Print a single floating-point number denoting the expected number of white balls picked. Your answer is considered to be correct if it has an absolute error of at most .   Sample Input 0 Sample Output 0 Explanation 0  Independent of your choice of , one white ball will always be picked so the expected number of white balls chosen after  operation is . Thus, we print  as our answer. Sample Input 1 Sample Output 1 Explanation 1 We perform the following  operations:   Independent of your choice of , a white ball will always be chosen during the first operation (meaning the expected number of white balls in the first operation is ).   For the second operation, there are  possible row orderings (depending on which ball was picked during the first operation). In the first possible row ordering, the probability of picking a white ball is . In the second possible row ordering, the probability of picking a white ball is . This means the expected number of white balls chosen in the second operation is . After performing all  operations, we print the total expected number of white balls chosen, which is .
__label__Dynamic-Programming The evil forest is guarded by vicious mandragoras. Garnet and her pet must make a journey through.  She starts with  health point () and  experience points.     As she encouters each mandragora, her choices are: Garnet's pet eats mandragora . This increments  by  and defeats mandragora .   Garnet's pet battles mandragora . This increases  by  experience points and defeats mandragora .  Once she defeats a mandragora, it is out of play.  Given a list of mandragoras with various health levels, determine the maximum number of experience points she can collect on her journey.   For example, as always, she starts out with  health point and  experience points.  Mandragoras have the following health values: .  For each of the beings, she has two choices, at or attle.  We have the following permutations of choices and outcomes: Action  s   p _______ _   __ e, e, e 4   0 e, e, b 3   15 e, b, b 2   14 b, b, b 1   10 b, b, e 2   10 b, e, e 3   9 b, e, b 2   16 e, b, e 3   6  Working through a couple of rows, first, her pet can eat all three and she does not gain any experience points.  In the second row, her pet eats the first two to have  health points, then battles the beast with  heatlth points to gain  experience points.  We see that the best option is to eat the beast with  points and battle the others to achieve  experience points. Function Description  Complete the mandragora function in the editor below.  It must return an integer that denotes the maximum number of experience points that Garnet can earn. mandragora has the following parameter(s):   H: an array of integers that represents the health values of mandragoras   Input Format The first line contains an integer, , denoting the number of test cases. Each test case is described over two lines: The first line contains a single integer , the number of mandragoras in the forest.  The second line contains  space-separated integers describing the respective health points for the mandragoras .     Constraints     , where   The sum of all s in a single test case is   Output Format For each test case, print a single line with an integer denoting the maximum number of experience points that Garnet can earn. Sample Input 1 3 3 2 2  Sample Output 10   Explanation There are  mandragoras having the following health points: . Initially,  and . The following is an optimal sequence of actions for achieving the maximum number of experience points possible:   Eat the second mandragora ().  is increased from  to , and  is still .  Battle the first mandragora ().  remains the same, but  increases by  experience points.  Battle the third mandragora ().  remains the same, but  increases by  experience points.  Garnet earns  experience points.
__label__Dynamic-Programming Red John has committed another murder. This time, he doesn't leave a red smiley behind. Instead he leaves a puzzle for Patrick Jane to solve. He also texts Teresa Lisbon that if Patrick is successful, he will turn himself in. The puzzle begins as follows.   There is a wall of size 4xn in the victim's house. The victim has an infinite supply of bricks of size 4x1 and 1x4 in her house. There is a hidden safe which can only be opened by a particular configuration of bricks. First we must calculate the total number of ways in which the bricks can be arranged so that the entire wall is covered.  The following diagram shows how bricks might be arranged to cover walls where :  There is one more step to the puzzle.  Call the number of possible arrangements .   Patrick must calculate the number of prime numbers  in the inclusive range .   As an example, assume .  From the diagram above, we determine that there is only one configuration that will cover the wall properly.   is not a prime number, so . A more complex example is .  The bricks can be oriented in  total configurations that cover the wall.  The two primes  and  are less than or equal to , so .  Function Description  Complete the redJohn function in the editor below.  It should return the number of primes determined, as an integer.   redJohn has the following parameter(s):   n: an integer that denotes the length of the wall   Input Format The first line contains the integer , the number of test cases.  Each of the next  lines contains an integer , the length of the  wall. Constraints   Output Format Print the integer  on a separate line for each test case. Sample Input 2 1 7  Sample Output 0 3  Explanation For , the brick can be laid in 1 format only: vertically.   The number of primes  is .  For , one of the ways in which we can lay the bricks is   There are  ways of arranging the bricks for  and there are  primes .
__label__Dynamic-Programming Given two strings,  and , find and print the total number of ways to insert a character at any position in string  such that the length of the Longest Common Subsequence of characters in the two strings increases by one. Input Format The first line contains a single string denoting .  The second line contains a single string denoting . Constraints Scoring   Strings  and  are alphanumeric (i.e., consisting of arabic digits and/or upper and lower case English letters). The new character being inserted must also be alphanumeric (i.e., a digit or upper/lower case English letter). Subtask   for  of the maximum score.   Output Format Print a single integer denoting the total number of ways to insert a character into string  in such a way that the length of the longest common subsequence of  and  increases by one. Sample Input aa baaa  Sample Output 4  Explanation The longest common subsequence shared by  and  is aa, which has a length of . There are two ways that the length of the longest common subsequence can be increased to  by adding a single character to : aa There are  different positions in string  where we could insert an additional a to create longest common subsequence aaa (i.e., at the beginning, middle, and end of the string).  a aaa We can insert a b at the beginning of the string for a new longest common subsequence of baa. b baa As we have  ways to insert an alphanumeric character into  and increase the length of the longest common subsequence by one, we print  on a new line.
__label__Dynamic-Programming __label__Graph-Algorithms You are situated in an  dimensional grid at position . The dimensions of the grid are . In one step, you can walk one step ahead or behind in any one of the  dimensions. This implies that there are always  possible moves if movements are unconstrained by grid boundaries. How many ways can you take  steps without leaving the grid at any point? You leave the grid if at any point , either  or . For example, you start off in a 3 dimensional grid at position .  The dimensions of the grid are , so each of your axes will be numbered from  to .  If you want to move  step, you can move to the following coordinates: .       If we started at  in the same grid, our new paths would lead to .  Other moves are constrained by . Function Description Complete the gridWalking function in the editor below.  It should return an integer that represents the number of possible moves, modulo . gridWalking has the following parameter(s): m: an integer that represents the number of steps   x: an integer array where each  represents a coordinate in the  dimension where  D: an integer array where each  represents the upper limit of the axis in the  dimension   Input Format The first line contains an integer , the number of test cases. Each of the next  sets of lines is as follows: The first line contains two space-separated integers,  and .   The next line contains  space-separated integers .   The third line of each test contains  space-separated integers .   Constraints          Output Format Output one line for each test case. Since the answer can be really huge, output it modulo .   Sample Input 1 2 3 1 1 2 3  Sample Output 12  Explanation We are starting from (1, 1) in a  2-D grid, and need to count the number of possible paths with length equal to .  Here are the  paths:
__label__Dynamic-Programming Given an array of integers and a target sum, determine the sum nearest to but not exceeding the target that can be created.  To create the sum, use any element of your array zero or more times. For example, if  and your target sum is , you might select  or .  In this case, you can arrive at exactly the target.   Function Description  Complete the unboundedKnapsack function in the editor below.  It must return an integer that represents the sum nearest to without exceeding the target value.   unboundedKnapsack has the following parameter(s):   k: an integer   arr: an array of integers   Input Format The first line contains an integer , the number of test cases.     Each of the next  pairs of lines are as follows:  - The first line contains two integers  and , the length of  and the target sum.  -  The second line contains  space separated integers .  Constraints     Output Format Print the maximum sum for each test case which is as near as possible, but not exceeding, to the target sum on a separate line. Sample Input 2 3 12 1 6 9 5 9 3 4 4 4 8  Sample Output 12 9  Explanation In the first test case, one can pick {6, 6}. In the second, we can pick {3,3,3}.
__label__Dynamic-Programming You and your friend decide to play a game using a stack consisting of N bricks. In this game, you can alternatively remove 1, 2 or 3 bricks from the top, and the numbers etched on the removed bricks are added to your score. You have to play so that you obtain the maximum possible score. It is given that your friend will also play optimally and you make the first move.   As an example, bricks are numbered .  You can remove either ,  or .  For your friend, your moves would leave the options of  to  elements from  leaving  for you (total score = ),  or .  In this case, it will never be optimal for your friend to take fewer than the maximum available number of elements.  Your maximum possible score is , achievable two ways:  first move and  the second, or  in your first move.   Function Description  Complete the bricksGame function in the editor below.  It should return an integer that represents your maximum possible score.   bricksGame has the following parameter(s):   arr:  an array of integers   Input Format The first line will contain an integer , the number of test cases.   Each of the next  pairs of lines are in the following format:  The first line contains an integer , the number of bricks in .  The next line contains  space-separated integers $arr[i].   Constraints       Output Format For each test case, print a single line containing your maximum score. Sample Input 2 5 999 1 1 1 0 5 0 1 1 1 999  Sample Output 1001 999  Explanation In first test case, you will pick 999,1,1. If you play in any other way, you will not get a score of 1001.  In second case, best option will be to pick up the first brick (with 0 score) at first. Then your friend  will choose the next three blocks, and you will get the last brick.
__label__Dynamic-Programming An Introduction to the Longest Increasing Subsequence Problem  The task is to find the length of the longest subsequence in a given array of integers such that all elements of the subsequence are sorted in strictly ascending order. This is called the Longest Increasing Subsequence (LIS) problem. For example, the length of the LIS for  is  since the longest increasing subsequence is .   Here's a great YouTube video of a lecture from MIT's Open-CourseWare covering the topic.     This is one approach which solves this in quadratic time using dynamic programming. A more efficient algorithm which solves the problem in  time is available here.  Given a sequence of integers, find the length of its longest strictly increasing subsequence. Function Description  Complete the longestIncreasingSubsequence function in the editor below.  It should return an integer that denotes the array's LIS.   longestIncreasingSubsequence has the following parameter(s):   arr: an unordered array of integers   Input Format The first line contains a single integer , the number of elements in .  Each of the next  lines contains an integer,  Constraints     Output Format Print a single line containing a single integer denoting the length of the longest increasing subsequence. Sample Input 0 Sample Output 0 Explanation 0 In the array , the longest increasing subsequence is .  It has a length of . Sample Input 1 Sample Output 1 Explanation 1 The LIS of  is .
__label__Search __label__Dynamic-Programming You have a rectangular board consisting of  rows, numbered from  to , and  columns, numbered from  to . The top left is  and the bottom right is . Initially - at time  - there is a coin on the top-left cell of your board. Each cell of your board contains one of these letters:   *: Exactly one of your cells has letter '*'. *: Exactly one of your cells has letter '*'. U: If at time  the coin is on cell  and cell  has letter 'U', the coin will be on cell  at time , if . Otherwise, there is no coin on your board at time . U: If at time  the coin is on cell  and cell  has letter 'U', the coin will be on cell  at time , if . Otherwise, there is no coin on your board at time . L: If at time  the coin is on cell  and cell  has letter 'L', the coin will be on cell  at time , if . Otherwise, there is no coin on your board at time . L: If at time  the coin is on cell  and cell  has letter 'L', the coin will be on cell  at time , if . Otherwise, there is no coin on your board at time . D: If at time  the coin is on cell  and cell  has letter 'D', the coin will be on cell  at time , if . Otherwise, there is no coin on your board at time . D: If at time  the coin is on cell  and cell  has letter 'D', the coin will be on cell  at time , if . Otherwise, there is no coin on your board at time . R: If at time  the coin is on cell  and cell  has letter 'R', the coin will be on cell  at time , if . Otherwise, there is no coin on your board at time . R: If at time  the coin is on cell  and cell  has letter 'R', the coin will be on cell  at time , if . Otherwise, there is no coin on your board at time . When the coin reaches a cell that has letter '*', it will stay there permanently. When you punch on your board, your timer starts and the coin moves between cells. Before starting the game, you can make operations to change the board, such that you are sure that at or before time  the coin will reach the cell having letter '*'. In each operation you can select a cell with some letter other than '*' and change the letter to 'U', 'L', 'R' or 'D'. You need to carry out as few operations as possible in order to achieve your goal. Your task is to find the minimum number of operations.  For example, given a grid of  rows and  columns: the goal is to get from  to  in as few steps as possible.  As the grid stands, it cannot be done because of the U in the cell at .  If  is changed to D, the path  is available.  It could also be changed to R which would make the path  available.  Either choice takes  change operation, which is the value sought if .  A lower value of  would result in a return value of  because the shortest path is  steps, starting from .   U D R Function Description  Complete the coinOnTheTable function in the editor below.  It should return an integer that represents the minimum operations to achieve the goal, or  if it is not possible.   coinOnTheTable has the following parameters:   m: an integer, the number of columns on the board   k: an integer, the maximum time to reach the goal   board: an array of strings where each string represents a row of the board   Input Format The first line of input contains three integers, , , and , the number of rows, the number of columns and the maximum time respectively.   The next  lines contain  letters each, describing your board.    Constraints     Output Format Print an integer which represents the minimum number of operations required to achieve your goal. If you cannot achieve your goal, print . Sample Input 2 2 3   RD   *L  Sample output : 0  Sample input : 2 2 1   RD   *L  Sample output : 1  Explanation : In the first example, a valid path exists without making any changes.  In the second example, the letter of cell (1,1) must be changed to 'D' to make a valid path.  In each example, a path length  is available.
__label__Dynamic-Programming A subsequence is a sequence that can be derived from another sequence by deleting some elements without changing the order of the remaining elements.  Longest common subsequence (LCS) of 2 sequences is a subsequence, with maximal length, which is common to both the sequences.   Given two sequences of integers,  and , find the longest common subsequence and print it as a line of space-separated integers. If there are multiple common subsequences with the same maximum length, print any one of them. In case multiple solutions exist, print any of them. It is guaranteed that at least one non-empty common subsequence will exist.     Recommended References  This Youtube video tutorial explains the problem and its solution quite well.     Function Description  Complete the longestCommonSubsequence function in the editor below.  It should return an integer array of a longest common subsequence.   longestCommonSubsequence has the following parameter(s):   a: an array of integers   b: an array of integers Input Format The first line contains two space separated integers  and , the sizes of sequences  and .  The next line contains  space-separated integers .  The next line contains  space-separated integers . Constraints          Constraints     Output Format Print the longest common subsequence as a series of space-separated integers on one line. In case of multiple valid answers, print any one of them. Sample Input 5 6 1 2 3 4 1 3 4 1 2 1 3  Sample Output 1 2 3  Explanation There is no common subsequence with length larger than 3. And "1 2 3",  "1 2 1", "3 4 1" are all correct answers.   Tested by Khongor
__label__Dynamic-Programming Shaka and his brother have created a boring game which is played like this:   They take a word composed of lowercase English letters and try to get the maximum possible score by building exactly 2 palindromic subsequences. The score obtained is the product of the length of these 2 subsequences. Let's say  and  are two subsequences from the initial string. If  &  are the smallest and the largest positions (from the initial word) respectively in  ; and  &  are the smallest and the largest positions (from the initial word) respectively in , then the following statements hold true:  ,  , &  .  i.e., the positions of the subsequences should not cross over each other.  Hence the score obtained is the product of lengths of subsequences  & . Such subsequences can be numerous for a larger initial word, and hence it becomes harder to find out the maximum possible score. Can you help Shaka and his brother find this out? Input Format Input contains a word  composed of lowercase English letters in a single line.   Constraints   each character will be a lower case english alphabet.   Output Format Output the maximum score the boys can get from . Sample Input eeegeeksforskeeggeeks  Sample Output 50  Explanation A possible optimal solution is eee-g-ee-ksfor-skeeggeeks being eeeee the one subsequence and skeeggeeks the other one. We can also select eegee in place of eeeee, as both have the same length.
__label__Dynamic-Programming __label__Graph-Algorithms Nikita is making a graph as a birthday gift for her boyfriend, a fellow programmer! She drew an undirected connected graph with  nodes numbered from  to  in her notebook. Each node is shaded in either white or black. We define  to be the number of white nodes, and  to be the number of black nodes. The graph is drawn in such a way that: No  adjacent nodes have same coloring. The value of , which we'll call , is minimal. Nikita's mischievous little brother erased some of the edges and all of the coloring from her graph! As a result, the graph is now decomposed into one or more components. Because you're her best friend, you've decided to help her reconstruct the graph by adding  edges such that the aforementioned graph properties hold true. Given the decomposed graph, construct and shade a valid connected graph such that the difference  between its shaded nodes is minimal. Input Format The first line contains  space-separated integers,  (the number of nodes in the original graph) and  (the number of edges in the decomposed graph), respectively.  The  subsequent lines each contain  space-separated integers,  and , describing a bidirectional edge between nodes  and  in the decomposed graph. Constraints   It is guaranteed that every edge will be between  distinct nodes, and there will never be more than  edge between any  nodes. Your answer must meet the following criteria: The graph is connected and no  adjacent nodes have the same coloring. The value of  is minimal.  The graph is connected and no  adjacent nodes have the same coloring. The value of  is minimal.  Output Format You must have  lines of output.  The first line contains  space-separated integers:  (the minimum possible value of ) and  (the number of edges you've added to the graph), respectively.  Each of the  subsequent lines contains  space-separated integers,  and , describing a newly-added bidirectional edge in your final graph (i.e.: new edge ).  You may print any  of the possible reconstructions of Nikita's graph such that the value of  in the reconstructed shaded graph is minimal. Sample Input 0  8 8  1 2  2 3  3 4  4 1  1 5  2 6  3 7  4 8  Sample output 0 0 0  Sample Input 1  8 6  1 2  3 4  3 5  3 6  3 7  3 8  Sample Output 1 4 1 1 5  Sample Input 2  5 4  1 2  2 3  3 4  4 1  Sample Output 2   1 2   2 5   4 5  Explanation In the figure below, the solid lines show the decomposed graph after Nikita's brother erased the edges, and the dotted lines show one possible correct answer:  In Sample , no additional edges are added and . Because  and , we get . Thus, we print  on a new line (there is only  line of output, as ). In Sample , the only edge added is , so . Here,  and , so . Thus, we print  on the first line. Next, we must print  lines describing each edge added; because , we print a single line describing the  space-separated nodes connected by our new edge: . In Sample , we can either add  edge  or , or both of them. In both cases we get  and , so . Thus  and  or  both are correct.
__label__Dynamic-Programming Given an  cube, let  (where ) denote the value stored in cell .  A  sub-cube (where ) of an  cube is considered to be special if the maximum value stored in any cell in the sub-cube is equal to . For each  in the inclusive range , calculate the number of special sub-cubes. Then print each  as a single line of space-separated integers (i.e., ). Input Format The first line contains an integer, , denoting the number of queries. The  subsequent lines describe each query over two lines: The first line contains an integer, , denoting the side length of the initial cube. The second line contains  space-separated integers describing an array of  integers in the form . The integer in some cell  is calculated using the formula . Constraints    where  Output Format For each query, print  space-separated integers where the  integer denotes the number of special sub-cubes for . Sample Input 2 2 2 1 1 1 1 1 1 1 2 1 1 1 1 2 1 1 2  Sample Output 7 1 6 1  Explanation We must perform the following  queries: We have a cube of size  and must calculate the number of special sub-cubes for the following values of : : There are  sub-cubes of size  and seven of them have a maximum value of  written inside them. So, for , the answer is .  : There is only one sub-cube of size  and the maximum number written inside it is . So, for , the answer is .     We then print the respective values for each  as a single line of space-separated integers (i.e., 7 1). We have a cube of size  and must calculate the number of special sub-cubes for the following values of : : There are  sub-cubes of size  and seven of them have a maximum value of  written inside them. So, for , the answer is .  : There is only one sub-cube of size  and the maximum number written inside it is . So, for , the answer is .     We then print the respective values for each  as a single line of space-separated integers (i.e., 7 1). 7 1 We have a cube of size  and must calculate the number of special sub-cubes for the following values of :    : There are  sub-cubes of size  and six of them have a maximum value of  written inside them. So, for , the answer is .  : There is only one sub-cube of size  and the maximum number written inside it is . So, for , the answer is .         We then print the respective values for each  as a single line of space-separated integers (i.e., 6 1). We have a cube of size  and must calculate the number of special sub-cubes for the following values of :    : There are  sub-cubes of size  and six of them have a maximum value of  written inside them. So, for , the answer is .  : There is only one sub-cube of size  and the maximum number written inside it is . So, for , the answer is .         We then print the respective values for each  as a single line of space-separated integers (i.e., 6 1). 6 1
__label__Search __label__Dynamic-Programming Given a set of  intervals, find the size of its largest possible subset of intervals such that no three intervals in the subset share a common point. Input Format The first line contains an integer, , denoting the number of interval sets you must find answers for. The  subsequent lines describe each of the  interval sets as follows: The first line contains an integer, , denoting the number of intervals in the list.  Each line  of the  subsequent lines contains two space-separated integers describing the respective starting () and ending () boundaries of an interval. Constraints     Output Format For each of the  interval sets, print an integer denoting the size of the largest possible subset of intervals in the given set such that no three points in the subset overlap. Sample Input 4 3 1 2 2 3 2 4 3 1 5 1 5 1 5 4 1 10 1 3 4 6 7 10 4 1 10 1 3 3 6 7 10  Sample Output 2 2 4 3  Explanation For set , all three intervals fall on point  so we can only choose any  of the intervals. Thus, we print  on a new line. For set , all three intervals span the range from  to  so we can only choose any  of them. Thus, we print  on a new line. For set , we can choose all  intervals without having more than two of them overlap at any given point. Thus, we print  on a new line. For set , the intervals , , and  all overlap at point , so we must only choose  of these intervals to combine with the last interval, , for a total of  qualifying intervals. Thus, we print  on a new line.
__label__Dynamic-Programming __label__Strings __label__Mathematics Given a string consisting of the letters ,  and , we can perform the following operation:  Take any two adjacent distinct characters and replace them with the third character.  Find the shortest string obtainable through applying this operation repeatedly.   For example, given the string  we can reduce it to a  character string by replacing  with  and  with : .   Function Description  Complete the stringReduction function in the editor below.  It must return an integer that denotes the length of the shortest string obtainable.   stringReduction has the following parameter:  - s: a string   Input Format The first line contains the number of test cases .   Each of the next  lines contains a string  to process. Constraints   Output Format For each test case, print the length of the resultant minimal string on a new line.   Sample Input 3   cab   bcab   ccccc  Sample Output 2   1   5  Explanation For the first case, there are two solutions:   or .  For the second case, one optimal solution is: .  For the third case, no operations can be performed so the answer is .
__label__Dynamic-Programming You are given a tree that has N vertices and N-1 edges. Your task is to mark as small number of vertices as possible, such that, the maximum distance between two unmarked vertices is less than or equal to K. Output this value. Distance between two vertices i and j is defined as the minimum number of edges you have to pass in order to reach vertex i from vertex j.   Input Format  The first line of input contains two integers N and K. The next N-1 lines contain two integers (ui,vi) each, where 1 <= ui,vi <= N. Each of these lines specifies an edge.  N is no more than 100. K is less than N.   Output Format  Print an integer that denotes the result of the test. Sample Input: 5 1   1 2   1 3   1 4   1 5  Sample Output: 3  Sample Input: 5 2   1 2   1 3   1 4   1 5  Sample Output: 0  Explanation: In the first case you have to mark at least 3 vertices, and in the second case you don't need to mark any vertices.
__label__Dynamic-Programming __label__Mathematics Lukas is a Civil Engineer who loves designing road networks to connect  cities numbered from  to . He can build any number of bidirectional roads as long as the resultant network satisfies these constraints: It must be possible to reach any city from any other city by traveling along the network of roads.   No two roads can directly connect the same two cities.    A road cannot directly connect a city to itself.   In other words, the roads and cities must form a simple connected labeled graph. You must answer  queries, where each query consists of some  denoting the number of cities Lukas wants to design a bidirectional network of roads for. For each query, find and print the number of ways he can build roads connecting  cities on a new line; as the number of ways can be quite large, print it modulo . Input Format The first line contains an integer, , denoting the number of queries.  Each of the  subsequent lines contains an integer denoting the value of  for a query. Constraints  Output Format For each of the  queries, print the number of ways Lukas can build a network of bidirectional roads connecting  cities, modulo , on a new line. Sample Input 0 Sample Output 0 Explanation 0 We answer the first two queries like this: When , the only option satisfying Lukas' three constraints is to not build any roads at all. Thus, we print the result of  on a new line.   When , there are four ways for Lukas to build roads that satisfy his three constraints:  Thus, we print the result of  on a new line.  When , there are four ways for Lukas to build roads that satisfy his three constraints:  Thus, we print the result of  on a new line.
__label__Dynamic-Programming Superman has been invited to India to celebrate Diwali. Unfortunately, on his arrival he learns that he has been invited mainly to help rescue people from a fire accident that has happened in a posh residential locale of New Delhi, where rescue is proving to be especially difficult. As he reaches the place of the fire, before him there are  buildings, each of the same height , which are on fire. Since it is Diwali, some floors of the buildings are empty as the occupants have gone elsewhere for celebrations. In his hurry to start the rescue Superman reaches the top of the building, but realizes that his jumping power is depleted and restricted due to change in his geographical setting. He soon understands the restrictions of his jumping power, and they are as follows:  He can use the jumping power any number of times until he reaches the bottom floor, which means he can use the jumping power only until before he reaches the bottom (Ground floor), which means, once he reaches the bottom floor, he cannot move to the top floor again and try to save people. (In one single drop from the top to bottom) He can use the jumping power any number of times until he reaches the bottom floor, which means he can use the jumping power only until before he reaches the bottom (Ground floor), which means, once he reaches the bottom floor, he cannot move to the top floor again and try to save people. (In one single drop from the top to bottom) While switching buildings, he loses height  while jumping. While switching buildings, he loses height  while jumping. The second restriction is explained below with an example. Assume . Now Superman is in the 2nd building 5th floor (, ). If he wants to switch to the fifth building (), he will lose height (), which means he will be at floor 3 at building 5 (, ). He can jump freely from the current floor to the floor below on the same building . That is, suppose if he is at , he can go to  without any restrictions. He cannot skip a floor while jumping in the same building. He can go to the floor below the current floor of the same building or use his jumping power, switch building, and lose height . Given the information about the occupied floors in each of the  buildings, help Superman to determine the maximum number of people he can save in one single drop from the top to the bottom floor with the given restrictions. Input Format Input starts with three values:  the number of buildings , the height of the buildings , and the height Superman will lose when he switches buildings . These are followed by  lines. Each  line starts with a non negative integer  indicating how many people are in the th building. Each of the following  integers indicates that a person is at height  in the  buiding. Each of the following  integers are given and repetitions are allowed which means there can be more than one person in a floor.  indicates building number and  indicates floor number. Building number will not be given; since  lines follow the first line, you can assume that the  line indicates the  building's specifications. Constraints       (for each , which means the maximum number of people in a particular building will not exceed )   Output Format Output the maximum number of people Superman can save. Sample Input 4 15 2  5 1 1 1 4 10 8 9 5 7 7 3 9 8 8 5 9 5 6 4 3 0     Sample Output 12  Explanation Input starts with , ,  .  lines follow. Each line describes building . Each line begins with , which denotes the number of persons in a particular building, followed by floor number, where each person resides. Floor number can repeat as any number of people can reside on a particular floor.   I've attached a figure here to explain the sample test case.   You can verify the first building's specifications with the figure.   (Total number of persons in the first building), followed by 1 1 1 4 10(Floor numbers).   floor = 3 persons.  floor = 1 person.  floor = 1 person.  Similarly, the specifications for the other three buildings follow.  The connected line shows the path which Superman can use to save the maximum number of people. In this case, that number is . You can also note in the figure that when he switches from Building 2 to Building 3, he loses height  (). Similarly, when he switches from Building 3 to Building 1 ,the same height loss happens as mentioned in the problem statement.
__label__Dynamic-Programming You are given a hexagonal grid consisting of two rows, each row consisting of  cells. The cells of the first row are labelled  and the cells of the second row are labelled .   For example, for :  (Note that the  is connected with .) Your task is to tile this grid with  tiles that look like the following:  As you can see above, there are three possible orientations in which a tile can be placed. Your goal is to tile the whole grid such that every cell is covered by a tile, and no two tiles occupy the same cell. To add to the woes, certain cells of the hexagonal grid are blackened. No tile must occupy a blackened cell. Is it possible to tile the grid? Here's an example. Suppose we want to tile this grid:  Then we can do the tiling as follows:  Input Format The first line contains a single integer , the number of test cases.   The first line of each test case contains a single integer  denoting the length of the grid.  The second line contains a binary string of length . The  character describes whether cell  is blackened.  The third line contains a binary string of length . The  character describes whether cell  is blackened.  A 0 corresponds to an empty cell and a 1 corresponds to blackened cell.   0 1 Constraints     Output Format For each test case, print YES if there exists at least one way to tile the grid, and NO otherwise. YES NO Sample Input 0 Sample Output 0 Explanation 0 The first test case in the sample input describes the example given in the problem statement above.  For the second test case, there are two ways to fill it: either place two diagonal tiles side-by-side or place two horizontal tiles.
__label__Search __label__Dynamic-Programming Queens on Board You have an N * M chessboard on which some squares are blocked out. In how many ways can you place one or more queens on the board, such that, no two queens attack each other? Two queens attack each other, if one can reach the other by moving horizontally, vertically, or diagonally without passing over any blocked square. At most one queen can be placed on a square. A queen cannot be placed on a blocked square. Input Format The first line contains the number of test cases T. T test cases follow. Each test case contains integers N and M on the first line. The following N lines contain M characters each, and represent a board. A '#' represents a blocked square and a '.' represents an unblocked square. Constraints 1 <= T <= 100  1 <= N <= 50  1 <= M <= 5 Output Format Output T lines containing the required answer for each test case. As the answers can be really large, output them modulo 109+7. Sample Input 4   3 3   ...   ...   ...   3 3   .#.   .#.   ...   2 4   .#..   ....   1 1   #  Sample Output 17   18   14   0
__label__Dynamic-Programming Shashank loves strings, but he loves palindromic strings the most. He has a list of  strings, , where each string, , consists of lowercase English alphabetic letters. Shashank wants to count the number of ways of choosing non-empty subsequences  such that the following conditions are satisfied:  is a subsequence of string ,  is a subsequence of string ,  is a subsequence of string , , and  is a subsequence of string .  is a palindromic string, where + denotes the string concatenation operator. + You are given  queries where each query consists of some list, . For each query, find and print the number of ways Shashank can choose  non-empty subsequences satisfying the criteria above, modulo , on a new line. Note: Two subsequences consisting of the same characters are considered to be different if their characters came from different indices in the original string. Input Format The first line contains a single integer, , denoting the number of queries. The subsequent lines describe each query in the following format: The first line contains an integer, , denoting the size of the list.  Each line  of the  subsequent lines contains a non-empty string describing . Constraints      over a test case. For  of the maximum score:    over a test case. Output Format For each query, print the number of ways of choosing non-empty subsequences, modulo , on a new line. Sample Input 0 Sample Output 0 Explanation 0 The first two queries are explained below: We can choose the following five subsequences: , , , where  is the first character of  and  is the first character of . , , , where  is the second character of  and  is the second character of .  , , , where  is the first character of  and  is the second character of . , , , where  is the second character of  and  is the first character of .    , ,   Thus, we print the result of  on a new line. We can choose the following five subsequences: , , , where  is the first character of  and  is the first character of . , , , where  is the second character of  and  is the second character of .  , , , where  is the first character of  and  is the second character of . , , , where  is the second character of  and  is the first character of .    , ,   Thus, we print the result of  on a new line. There is no way to choose non-empty subsequences such that their concatenation results in a palindrome, as each string contains unique characters. Thus, we print  on a new line.
__label__Dynamic-Programming __label__Graph-Algorithms There are N points on an XY plane. In one turn, you can select a set of collinear points on the plane and remove them. Your goal is to remove all the points in the least number of turns. Given the coordinates of the points, calculate two things: The minimum number of turns (T) needed to remove all the points. The number of ways to to remove them in T turns. Two ways are considered different if any point is removed in a different turn. Input Format The first line contains the number of test cases T. T test cases follow. Each test case contains N on the first line, followed by N lines giving the coordinates of the points. Constraints 1 <= T <= 50  1 <= N <= 16  0 <= xi,yi <= 100  No two points will have the same coordinates. Output Format Output T lines, one for each test case, containing the least number of turns needed to remove all points and the number of ways to do so. As the answers can be large, output them modulo 1000000007. Sample Input 2   3   0 0   0 1   1 0   4   3 4   3 5   3 6   5 5  Sample Output 2 6   2 8  Explanation For the 1st input, Let the points be labelled p1,p2,p3. These are the ways to remove them (first turn's points, followed by second turn's points): a. 1) p1,p2 2) p3  b. 1) p1,p3 2) p2  c. 1) p2,p3 2) p1  d. 1) p3 2) p1,p2  e. 1) p2 2) p1,p3  f. 1) p1 2) p3,p2
__label__Dynamic-Programming There are  bulbs in a straight line, numbered from  to .  Each bulb  has a button associated with it, and there is a cost, , for pressing this button. When some button  is pressed, all the bulbs at a distance  from bulb  will be toggled(off->on, on->off).  Given , , and the costs for each button, find and print the minimum cost of turning off all  bulbs if they're all on initially. Input Format The first line contains two space-separated integers describing the respective values of  and .  The second line contains  space-separated integers describing the respective costs of each bulb (i.e., ). Constraints    Output Format Print a long integer denoting the minimum cost of turning off all  bulbs. Sample Input 3 1 1 1 1  Sample Output 1  Explanation If we press the middle switch, the middle bulb and the  closest adjacent bulbs (i.e., the first and third) will turn off. Because all bulbs will be off in one button press, this cost is minimal. Thus, we print  as our answer.
__label__Dynamic-Programming Capeta is working part-time for an animal shipping company. He needs to pick up animals from various zoos and drop them to other zoos. The company ships four kinds of animals: elephants, dogs, cats, and mice. There are  zoos, numbered  to . Also, there are  animals. For each animal , Capeta knows its type  (E for elephant, D for dog, C for cat and M for mouse), source zoo  where Capeta has to pick it up from, and destination zoo  where Capeta needs to deliver it to.  E D C M  Capeta is given a truck with a huge capacity where  animals can easily fit. He is also given additional instructions: He must visit the zoos in increasing order. He also cannot skip zoos.  He must visit the zoos in increasing order. He also cannot skip zoos.  Dogs are scared of elephants, so he is not allowed to bring them together at the same time.  Dogs are scared of elephants, so he is not allowed to bring them together at the same time.  Cats are scared of dogs, so he is not allowed to bring them together at the same time.  Mice are scared of cats, so he is not allowed to bring them together at the same time.  Elephants are scared of mice, so he is not allowed to bring them together at the same time.  Also, loading and unloading animals are complicated, so once an animal is loaded onto the truck, that animal will only be unloaded at its destination.  Because of these reasons, Capeta might not be able to transport all animals. He will need to ignore some animals. Which ones? The company decided to leave that decision for Capeta. He is asked to prepare a report and present it at a board meeting of the company. Capeta needs to report the minimum number of zoos that must be reached so that she is able to transport  animals, for each  from  to .  Complete the function minimumZooNumbers and return an integer array where the  integer is the minimum number of zoos that Capeta needs to reach so that she is able to transport  animals, or  if it is impossible to transport  animals.  minimumZooNumbers He is good at driving, but not so much at planning. Hence, he needs your help. Input Format The first line contains a single integer , the number of test cases. Each test case consists of four lines. The first line contains two space-separated integers  and . The second line contains  space-separated characters . The third line contains  space-separated integers . The fourth line contains  space-separated integers .   ,  and  are the details for the th animal, as described in the problem statement. Constraints         is either E, D, C or M E D C M Subtasks  For  of the total score,   Output Format For each case, print a single line containing  space-separated integers, where the  integer is the minimum number of zoos that Capeta needs to reach so that she is able to transport  animals. If it is not possible to transport  animals at all, then put  instead. Sample Input 0 Sample Output 0 Explanation 0 First Test Case Capeta can transport one animal by traveling up to zoo number . Just drop the dog there. Next, in order to transport  animals (elephant and cat), Capeta has to go up to zoo number . Second Test Case  Animal: Drop the elephant to zoo .  Animal: Drop the elephant and cat to zoo .  Animal: Drop the elephant and cat to zoo . Then drop the mouse to zoo .  Animal: Drop the elephant and cat to zoo . Then drop the mouse to zoo . Finally, drop either the elephant or the dog to . It is impossible to transport  or  animals.
__label__Dynamic-Programming It is the Indian version of the famous heist “The Italian Job”. N robbers have already broken into the National Museum and are just about to get inside the main vault which is full of jewels. They were lucky that just as they broke into the museum, the guard was leaving the museum for exactly G minutes. But there are other problems too. The main vault has heat sensors that if at any moment of time there are more than two people present in the vault, the alarm goes off.   To collect the jewels, the ith robber needs to be inside the vault for exactly A[i] minutes, 0 <= i < N, in one continuous stretch. As guard will return after G minutes, they have to finish their tasks within G minutes. The robbers want to know if there exists any arrangement such that demands of each robber is satisfied and also they are not caught? Gotchas  If a robber goes inside the vault at a time "X" and at the same time another robber comes out, it's equivalent to saying they were never in the vault at the same time.  Similarly, when the guard gets inside vault at time G and a robber comes out exactly at time G, the guard will not be able see the robber. Input Format The first line contains an integer T denoting the number of testcases. T testcases follow. Each testcase consists of two lines. First line contains two space separated integers denoting N and G denoting the number of thieves and duration for which guard leaves the museum.  The next line contains N space separated numbers where the ith integer, A[i]  represents the time the ith robber needs to be in the vault. Constraints 1 <= T <= 20  1 <= N <= 100  0 <= G <= 1000000 (106)  0 <= A[i] <= 100   Output Format For each testcase print YES if there exists such an arrangement or NO otherwise in a newline.   YES NO Sample Input 2 3 4 2 4 2 3 2 2 4 2  Sample Output YES NO  Explanation Test case #00: In first testcase, one possible arrangement is:  at t=0, robber1 goes inside and comes out at t=2  at t=0, robber2 goes inside and comes out at t=4  at t=2, robber3 goes inside and comes out at t=4   Test case #01: No possible arrangement is possible in second testcase.
__label__Search __label__Dynamic-Programming There are  variables and  requirements. Requirements are represented as , meaning that the  variable must be less than or equal to the  variable.  Your task is to assign non-negative numbers smaller than  to each variable and then calculate the number of different assignments satisfying all requirements. Two assignments are different if and only if at least one variable is assigned to a different number in both assignments. Print your answer modulo . Input Format The first line contains  space-separated integers,  and , respectively. Each of the  subsequent lines contains  space-seperated integers describing the respective  and  values for an  requirement. Constraints    Output Format Print your answer modulo . Sample Input 0 Sample Output 0 Explanation 0 There are  variables and  requirements. Let the variables be in the array . Requirements are -  One of the assignments is -  Similarly there are  assignments possible. Result = .
__label__Dynamic-Programming Ma5termind is crazy about Action Games. He just bought a new one and got down to play it. Ma5termind usually finishes all the levels of a game very fast. But, This time however he got stuck at the very first level of this new game. Can you help him play this game.   To finish the game, Ma5termind has to cross  levels. At each level of the game, Ma5termind has to face  enemies. Each enemy has its associated power  and some number of bullets . To knock down an enemy, Ma5termind needs to shoot him with one or multiple bullets whose collective count is equal to the power of the enemy. If Ma5termind manages to knock down any one enemy at a level, the rest of them run away and the level is cleared.    Here comes the challenging part of the game.  Ma5termind acquires all the bullets of an enemy once he has knocked him down. Ma5termind can use the bullets acquired after killing an enemy at  level only till the  level.   However, the bullets Ma5termind carried before the start of the game can be taken forward and can be used to kill more enemies.   Now, Ma5termind has to guess the minimum number of bullets he must have before the start of the game so that he clears all the  levels successfully.   NOTE  Bullets carried before the start of the game can be used to kill an enemy at any level.   One bullet decreases the power of an enemy by 1 Unit.   For better understanding of the problem look at the sample testcases.   Input Format First line of input contains a single integer  denoting the number of test cases.  First line of each test case contains two space separated integers  and  denoting the number of levels and number of enemies at each level respectively.  Each of next  lines of a test case contain  space separated integers, where  integer in the  line denotes the power  of  enemy on the  level.  Each of the next  lines of a test case contains  space separated integers, where  integer in the  line denotes the number of bullets   enemy of  level has.   Constraints          For each test file, sum of  over all the test cases does not exceed .    Output Format For each test case, print the required answer.   Sample Input 2 3 3 3 2 1  1 2 3 3 2 1 1 2 3 3 2 1 1 2 3 3 3  3 2 5  8 9 1  4 7 6  1 1 1  1 1 1  1 1 1   Sample Output 1 5     Explanation For the First test case , Ma5termind kills the enemy in the following order: Ma5termind kills the  enemy at the  level, takes all his bullets and moves to the next level. Ma5termind kills the  enemy at the  level, takes all his bullets and moves to the next level. Ma5termind kills the  enemy at the  level, takes all his bullets and moves to the next level. So this way Ma5termind can successfully finish this game with only  bullet in hand before the start of the game. For the second test case , Ma5termind kills the enemy in the following order: Ma5termind kills the  enemy at the  level, takes all his bullets and moves to the next level. Ma5termind kills the  enemy at the  level, takes all his bullets and moves to the next level. Ma5termind kills the  enemy at the  level, takes all his bullets and moves to the next level. So this way Ma5termind can successfully finish this game with only  bullet in hand before the start of the game. NOTE:  There can be more than one way of getting the optimal answer but that does not matter in our case, because we need to answer the minimum number of bullets required.
__label__Dynamic-Programming __label__Tree Byteland has  cities (numbered from  to ) and  bidirectional roads. A path is comprised of  or more connected roads. It is guaranteed that there is a path from any city to any other city. Steven is a road maintenance worker in Byteland. He is required to maintain exactly  paths on any given workday. He cannot work on the same road twice in one day (so no  paths can contain the same  roads). Steven can start his workday in any city and, once he has finished maintaining a path, teleport to his next starting city. Given , help Steven determine how many different possible path sets will allow him to perform his maintenance duties. Then print the answer modulo . Input Format The first line contains  space-separated integers,  (the number of cities) and  (the number of roads to maintain).  Each line  of the  subsequent lines contains  space-separated integers, , describing a bidirectional road between cities  and . Constraints     Output Format Find the number of different path sets that will allow Steven to complete  orders, and print the answer .  Sample Input 4 2 1 2 2 3 2 4  Sample Output 6  Explanation For the following Byteland map:   Steven can maintain  roads using any of the following  routes:  and   and   and   and   and   and  Thus, we print the result of  on a new line, which is .
__label__Search __label__Dynamic-Programming __label__Tree ADZEN is a popular advertising firm in your city that owns all  billboard locations on Main street. The city council passed a new zoning ordinance mandating that no more than  consecutive billboards may be up at any given time. For example, if there are  billboards on Main street and , ADZEN must remove either the middle billboard, the first two billboards, the last two billboards or the first and last billboard. Being a for-profit company, ADZEN wants to lose as little advertising revenue as possible when removing the billboards. They want to comply with the new ordinance in such a way that the remaining billboards maximize their total revenues (i.e., the sum of  revenues generated by the billboards left standing on Main street). Given , , and the revenue of each of the  billboards, find and print the maximum profit that ADZEN can earn while complying with the zoning ordinance. Assume that Main street is a straight, contiguous block of  billboards that can be removed but cannot be reordered in any way.   For example, if there are  billboards, and  is the maximum number of consecutive billboards that can be active, with , then the maximum revenue that can be generated is : .   Function Description  Complete the billboards function in the editor below.  It should return an integer that represents the maximum revenue that can be generated under the rules.   billboards has the following parameter(s):   k: an integer that represents the longest contiguous group of billboards allowed   revenue: an integer array where each element represents the revenue potential for a billboard at that index   Input Format The first line contains two space-separated integers,  (the number of billboards) and  (the maximum number of billboards that can stand together on any part of the road).  Each line  of the  subsequent lines contains an integer denoting the revenue value of billboard  (where ). Constraints    Output Format Print a single integer denoting the maximum profit ADZEN can earn from Main street after complying with the city's ordinance. Sample Input 0  6 2    1   2   3   1   6   10   Sample Output 0  21  Explanation 0  There are  billboards, and we must remove some of them so that no more than  billboards are immediately next to one another. We remove the first and fourth billboards, which gives us the configuration _ 2 3 _ 6 10 and a profit of . As no other configuration has a profit greater than , we print  as our answer. _ 2 3 _ 6 10 Sample Input 1  5 4 1 2 3 4 5  Sample Output 1  14  Explanation 1  There are  billboards, and we must remove some of them so that no more than  billboards are immediately next to one another. We remove the first billboard, which gives us the configuration _ 2 3 4 5 and a profit of . As no other configuration has a profit greater than , we print  as our answer. _ 2 3 4 5
__label__Dynamic-Programming __label__Strings You are given a string, , consisting of lowercase English letters. A string is beautiful with respect to  if it can be derived from  by removing exactly  characters. Find and print the number of different strings that are beautiful with respect to . Input Format A single string of lowercase English letters denoting . Constraints   holds for test cases worth at least  of the problem's score.  holds for test cases worth at least  of the problem's score. Output Format Print the number of different strings that are beautiful with respect to . Sample Input abba  Sample Output 4  Explanation   The following strings can be derived by removing  characters from : . This gives us our set of unique beautiful strings, . As , we print .
__label__Dynamic-Programming There is a huge blanket on your bed but unfortunately it has N stains. You cover them using  a single, rectangular silk cloth. The silk is expensive, which is why the rectangular piece needs to have the least area as possible. You love this blanket and decide to minimize the area covering the  stains. You buy some cleaning liquid to remove the stains but sadly it isn't enough to clean all of them. You can just remove exactly K stains. The rest of the stains need to be covered using a single, rectangular fragment of silk cloth. Let X denote the area of the smallest possible silk cloth that may cover all the stains originally. You need to find the number of different ways in which you may remove K stains so that the remaining N-K stains can be covered with silk of area strictly less than X (We are looking for any configuration that will reduce the cost). Assume that each stain is a point and that the rectangle is aligned parallel to the axes.   Input Format The first line contains two integers N (1<=N<=1000) and K (0<=K<=N).  Next follow N lines, one for each stain. Each line contains two integers in the form 'X Y', (0<=X,Y<100000), the coordinates of each stain into the blanket. Each pair of coordinates is unique. Output Format Output a single integer. The remainder of the division by 1000000007 of the answer. Sample Input 5 2 0 1 3 3 2 0 0 3 2 3  Sample Output 8  Explanation We can clean two spots. So removing any of the following set of stains will lead us to a conbination that will need less amount of silk.(The numbers refer to the indices of the stains in the input and they begin from 1). 1, 4 2, 1 2, 3 2, 4 2, 5 3, 1 3, 4 3, 5  So there are 8 ways.
__label__Dynamic-Programming __label__Mathematics Alex has two arrays defined as  and . He created an  matrix, , where  for each  in . Recall that  is the greatest common divisor of  and .  For example, if  and , he builds  like so: Alex's friend Kiara loves matrices, so he gives her  questions about matrix  where each question is in the form of some submatrix of  with its upper-left corner at  and its bottom-right corner at . For each question, find and print the number of distinct integers in the given submatrix on a new line. Input Format The first line contains three space-separated integers describing the respective values of  (the size of array ),  (the size of array ), and  (Alex's number of questions).  The second line contains  space-separated integers describing .  The third line contains  space-separated integers describing .  Each line  of the  subsequent lines contains four space-separated integers describing the respective values of , , , and  for the  question (i.e., defining a submatrix with upper-left corner  and bottom-right corner ). Constraints           Scoring   for  of score.    for  of score.   Output Format For each of Alex's questions, print the number of distinct integers in the given submatrix on a new line. Sample Input 0 Sample Output 0 Explanation 0 Given  and , we build the following : The diagram below depicts the submatrices for each of the  questions in green:  For the submatrix between  and , the set of integers is . The number of distinct integers is . For the submatrix between  and , the set of integers is . The number of distinct integers is . For the submatrix between  and , the set of integers is . The number of distinct integers is .
__label__Dynamic-Programming Let's play Fairy Chess! You have an  chessboard. An -leaper is a chess piece which can move from some square  to some square  if ; however, its movements are restricted to up (), down (), left (), and right () within the confines of the chessboard, meaning that diagonal moves are not allowed. In addition, the leaper cannot leap to any square that is occupied by a pawn. Given the layout of the chessboard, can you determine the number of ways a leaper can move  times within the chessboard? Note:  refers to the absolute value of some integer, . Input Format The first line contains an integer, , denoting the number of queries. Each query is described as follows: The first line contains three space-separated integers denoting , , and , respectively. Each line  of the  subsequent lines contains  characters. The  character in the  line describes the contents of square  according to the following key: . indicates the location is empty. P indicates the location is occupied by a pawn. L indicates the location of the leaper. . indicates the location is empty. . P indicates the location is occupied by a pawn. P L indicates the location of the leaper. L Constraints   There will be exactly one L character on the chessboard. L The -leaper can move up (), down (), left (), and right () within the confines of the chessboard. It cannot move diagonally. Output Format For each query, print the number of ways the leaper can make  moves on a new line. Because this value can be quite large, your answer must be modulo . Sample Input 0 Sample Output 0 Explanation 0 You must perform two queries, outlined below. The green cells denote a cell that was leaped to by the leaper, and coordinates are defined as . The leaper can leap to the following locations:    Observe that the leaper cannot leap to the square directly underneath it because it's occupied by a pawn. Thus, there are  ways to make  move and we print  on a new line.  The leaper can leap to the following locations:    Thus, we print  on a new line. Note: Don't forget that your answer must be modulo .
__label__Dynamic-Programming __label__Strings Megan is playing a string game with the following rules: It starts with a string, . During each turn, she performs the following move: Choose an index in . The chosen index must be strictly greater than any index chosen in a prior move.  Perform one or more circular rotations (in either direction) of the suffix starting at the chosen index. For example, let's say  abcdefjghi. During our move, we choose to do three right rotations of the suffix starting at index :    Note that this counts as one move. During each turn, she performs the following move: Choose an index in . The chosen index must be strictly greater than any index chosen in a prior move.  Perform one or more circular rotations (in either direction) of the suffix starting at the chosen index. For example, let's say  abcdefjghi. During our move, we choose to do three right rotations of the suffix starting at index :    Note that this counts as one move. abcdefjghi The goal of the game is to convert  into the lexicographically smallest possible string in as few moves as possible. In other words, we want the characters to be in alphabetical order. Megan plays this game  times, starting with a new string  each time. For each game, find the minimum number of moves necessary to convert  into the lexicographically smallest string and print that number on a new line. Input Format The first line contains an integer, , denoting the number of games.  Each of the  subsequent lines contains a single string denoting the initial value of string  for a game. Constraints    consists of lowercase English alphabetic letters only. Output Format For each game, print an integer on a new line denoting the minimum number of moves required to convert  into the lexicographically smallest string possible. Sample Input 0 Sample Output 0 Explanation 0 We play the following  games: In the first game, abcdefghij is already as lexicographically small as possible (each sequential letter is in alphabetical order). Because we don't need to perform any moves, we print  on a new line. abcdefghij In the second game, we rotate the suffix starting at index , so acab becomes aabc. Because the string is lexicographically smallest after one move, we print  on a new line. acab aabc In the third game, we perform the following moves: Rotate the suffix starting at index  (i.e., the entire string), so baba becomes abab.  Rotate the suffix starting at index , so abab becomes aabb. Because the string is lexicographically smallest after two moves, we print  on a new line. In the third game, we perform the following moves: Rotate the suffix starting at index  (i.e., the entire string), so baba becomes abab.  baba abab Rotate the suffix starting at index , so abab becomes aabb. abab aabb Because the string is lexicographically smallest after two moves, we print  on a new line.
__label__Dynamic-Programming Nina received an odd New Year's present from a student: a set of  unbreakable sticks. Each stick has a length, , and the length of the  stick is . Deciding to turn the gift into a lesson, Nina asks her students the following: How many ways can you build a square using exactly  of these unbreakable sticks?  Note: Two ways are distinct if they use at least one different stick. As there are  choices of sticks, we must determine which combinations of sticks can build a square. Input Format The first line contains an integer, , denoting the number of sticks. The second line contains  space-separated integers  describing the length of each stick in the set. Constraints   Output Format On a single line, print an integer representing the number of ways that  unbreakable sticks can be used to make a square. Sample Input 0 8 4 5 1 5 1 9 4 5   Sample Output 0 3  Sample Input 1 6 1 2 3 4 5 6   Sample Output 1 0      Explanation Sample 0  Given  sticks (), the only possible side length for our square is . We can build square  in  different ways:         In order to build a square with side length  using exactly  sticks,  and  must always build two of the sides. For the remaining two sides, you must choose  of the remaining  sticks of length  ( and ). Sample 1  We have to use all  sticks, making the largest stick length () the minimum side length for our square. No combination of the remaining sticks can build  more sides of length  (total length of all other sticks is  and we need at least length ), so we print .
__label__Dynamic-Programming There are N cities and N directed roads in Steven's world. The cities are numbered from 0 to N - 1. Steven can travel from city i to city (i + 1) % N, ( 0-> 1 -> 2 -> .... -> N - 1 -> 0).  Steven wants to travel around the world by car. The capacity of his car's fuel tank is C gallons. There are a[i] gallons he can use at the beginning of city i and the car takes b[i] gallons to travel from city i to (i + 1) % N.   How many cities can Steven start his car from so that he can travel around the world and reach the same city he started?  Note  The fuel tank is initially empty.  Input Format The first line contains two integers (separated by a space): city number N and capacity C.  The second line contains N space-separated integers: a[0], a[1], … , a[N - 1].  The third line contains N space-separated integers: b[0], b[1], … , b[N - 1].   Constraints 2 ≤ N ≤ 105  1 ≤ C ≤ 1018  0 ≤ a[i], b[i] ≤ 109  Output Format The number of cities which can be chosen as the start city. Sample Input 3 3 3 1 2 2 2 2  Sample Output 2  Explanation Steven starts from city 0, fills his car with 3 gallons of fuel, and use 2 gallons of fuel to travel to city 1. His fuel tank now has 1 gallon of fuel.  On refueling 1 gallon of fuel at city 1, he then travels to city 2 by using 2 gallons of fuel. His fuel tank is now empty.  On refueling 2 gallon of fuel at city 2, he then travels back to city 0 by using 2 gallons of fuel.   Here is the second possible solution.  Steven starts from city 2, fill his car with 2 gallons, and travels to city 0.  On refueling 3 gallons of fuel from city 0, he then travels to city 1, and exhausts 2 gallons of fuel. His fuel tank contains 1 gallon of fuel now. He can then refuel 1 gallon of fuel at City 1, and increase his car's fuel to 2 gallons and travel to city 2.  However, Steven cannot start from city 1, because he is given only 1 gallon of fuel, but travelling to city 2 requires 2 gallons.  Hence the answer 2.
__label__Dynamic-Programming __label__Strings Steve loves playing with palindromes. He has a string, , consisting of  lowercase English alphabetic characters (i.e., a through z). He wants to calculate the number of ways to insert exactly  lowercase character into string  such that the length of the longest palindromic subsequence of  increases by at least . Two ways are considered to be different if either of the following conditions are satisfied: a z The positions of insertion are different. The inserted characters are different.  This means there are at most  different ways to insert exactly  character into a string of length . Given  queries consisting of , , and , print the number of different ways of inserting exactly  new lowercase letter into string  such that the length of the longest palindromic subsequence of  increases by at least . Input Format The first line contains a single integer, , denoting the number of queries. The  subsequent lines describe each query over two lines: The first line of a query contains two space-separated integers denoting the respective values of  and .    The second line contains a single string denoting . Constraints    It is guaranteed that  consists of lowercase English alphabetic letters (i.e., a to z) only. a z Subtasks  for  of the maximum score.  for  of the maximum score. Output Format On a new line for each query, print the number of ways to insert exactly  new lowercase letter into string  such that the length of the longest palindromic subsequence of  increases by at least . Sample Input 3 1 1 a 3 2 aab 3 0 aba  Sample Output 2 1 104  Explanation We perform the following  queries: The length of the longest palindromic subsequence of  a is . There are two ways to increase this string's length by at least : Insert an a at the start of string , making it aa. Insert an a at the end of string , making it aa.       Both methods result in aa, which has a longest palindromic subsequence of length  (which is longer than the original longest palindromic subsequence's length by ). Because there are two such ways, we print  on a new line. The length of the longest palindromic subsequence of  a is . There are two ways to increase this string's length by at least : a Insert an a at the start of string , making it aa. a aa Insert an a at the end of string , making it aa.       a aa Both methods result in aa, which has a longest palindromic subsequence of length  (which is longer than the original longest palindromic subsequence's length by ). Because there are two such ways, we print  on a new line. aa The length of the longest palindromic subsequence of  aab is . There is one way to increase the length by at least : Insert a b at the start of string , making it baab.    We only have one possible string, baab, and the length of its longest palindromic subsequence is  (which is longer than the original longest palindromic subsequence's length by ). Because there is one such way, we print  on a new line. The length of the longest palindromic subsequence of  aab is . There is one way to increase the length by at least : aab Insert a b at the start of string , making it baab.    b baab We only have one possible string, baab, and the length of its longest palindromic subsequence is  (which is longer than the original longest palindromic subsequence's length by ). Because there is one such way, we print  on a new line. baab
__label__Dynamic-Programming Tim is visiting his grandma for two days and is bored due to the lack of the electricity over there. That's why he starts to play with grandma's colorful candle collection. He aligned the  candles from left to right. The th candle from the left has the height  and the color , an integer ranged from 1 to a given , the number of colors.  Now he stares at the sequence of candles and wonders, how many strictly increasing ( in height ) colorful subsequences are there? A subsequence is considered as colorful if every of the  colors appears at least one times in the subsequence.  As the number of subsequences fulfilling the requirement can be large, print the result modulo . Input Format On the first line you will be given  and , then  lines will follow. On the th line you will be given two integers  and .  Constraints    Output Format Print the number of strictly increasing colorful subsequences modulo .  Sample Input 4 3 1 1 3 2 2 2 4 3  Sample Output 2  Explanation In the first sample the only two valid subsequences are (1, 2, 4) and (1, 3, 4).
__label__Dynamic-Programming __label__Strings String  is called a Super String if and only if:  contains only letters ; For any  and ,  has lower ascii code than , where  Given a set of Super Strings , a Hyper String is a string that can be constructed by concatenation of some Super Strings of the set . We can use each Super String as many times as we want. Given set , you have to compute the number of Hyper Strings with length no greater than .   Input Format The first line of input contains two integers,  (the number of Super Strings in ) and . The next  lines describe the Super Strings in set .   Constraints  and  are not greater than . Output Format Output an integer which is the number of possible Hyper Strings that can be derived. Since it may not fit in  bit integer, print the output module . (i.e. answer = answer % ) Sample Input 2 3   a   ab  Sample Output 7  Explanation In the example all the Hyper Strings are : "" (empty string), "", "", "", "", "", and "".
__label__Dynamic-Programming You are given an array A = [1, 2, 3, ..., n]:      How many sequences (S1) can you get after exact k adjacent swaps on A?  How many sequences (S1) can you get after exact k adjacent swaps on A?  How many sequences (S2) can you get after at most k swaps on A?   How many sequences (S2) can you get after at most k swaps on A?   An adjacent swap can be made between two elements of the Array A, A[i] and A[i+1] or A[i] and A[i-1].  A swap otherwise can be between any two elements of the array A[i] and A[j] ∀ 1 ≤ i, j ≤ N, i ≠ j. Input Format First and only line contains n and k separated by space.     Constraints 1 ≤ n ≤ 2500  1 ≤ k ≤ 2500       Output Format Output S1 % MOD and S2 % MOD in one line, where MOD = 1000000007.     MOD = 1000000007 Sample Input 3 2  Sample Output 3 6  Explanation Original array: [1, 2, 3] 1. After 2 adjacent swaps: We can get [1, 2, 3], [2, 3, 1], [3, 1, 2] ==> S1 == 3  2. After at most 2 swaps: 1) After 0 swap: [1, 2, 3] 2) After 1 swap: [2, 1, 3], [3, 2, 1], [1, 3, 2]. 3) After 2 swaps: [1, 2, 3], [2, 3, 1], [3, 1, 2] ==> S2 == 6
__label__Dynamic-Programming Let's consider a permutation P = {p1, p2, ..., pN} of the set of N = {1, 2, 3, ..., N} elements .   P is called a magic set if it satisfies both of the following constraints:   Given a set of K integers, the elements in positions a1, a2, ..., aK are less than their adjacent elements, i.e., pai-1 > pai < pai+1 Given a set of L integers, elements in positions b1, b2, ..., bL are  greater than their adjacent elements, i.e., pbi-1 < pbi > pbi+1 How many such magic sets are there? Input Format  The first line of input contains three integers N, K, L separated by a single space.  The second line contains K integers, a1, a2, ... aK each separated by single space.  the third line contains L integers, b1, b2, ... bL each separated by single space.  Output Format  Output the answer modulo 1000000007 (109+7). Constraints  3 <= N <= 5000  1 <= K, L <= 5000  2 <= ai, bj <= N-1, where i ∈ [1, K] AND j ∈ [1, L]   Sample Input #00  4 1 1 2 3  Sample Output #00  5  Explanation #00 Here, N = 4 a1 = 2 and b1 = 3. The 5 permutations of {1,2,3,4} that satisfy the condition are  2 1 4 3 3 2 4 1 4 2 3 1 3 1 4 2 4 1 3 2 Sample Input #01 10 2 2 2 4 3 9  Sample Output #01 161280
__label__Dynamic-Programming __label__Strings Square Subsequences A string is called a square string if it can be obtained by concatenating two copies of the same string. For example, "abab", "aa" are square strings, while "aaa", "abba" are not. Given a string, how many (non-empty) subsequences of the string are square strings? A subsequence of a string can be obtained by deleting zero or more characters from it, and maintaining the relative order of the remaining characters. Input Format The first line contains the number of test cases, .   test cases follow. Each case contains a string, . Output Format Output  lines, one for each test case, containing the required answer modulo 1000000007. Constraints:     will have at most  lowercase characters ('a' - 'z'). Sample Input 3  aaa  abab  baaba Sample Output 3  3  6 Explanation For the first case, there are 3 subsequences of length 2, all of which are square strings.  For the second case, the subsequences "abab", "aa", "bb" are square strings.  Similarly, for the third case, "bb", "baba" (twice), and "aa" (3 of them) are the square subsequences.
__label__Dynamic-Programming Mr. Dorsey Dawson recently stole  grams of gold from ACME Jewellers. He is now on a train back home. To avoid getting caught by the police, he has to convert all the gold he has into paper money. He turns into a salesman and starts selling the gold in the train.   There are  passengers who have shown interest in buying the gold. The  passenger agrees to buy  grams of gold by paying  dollars. Dawson wants to escape from the police and also maximize the profit. Can you help him maximize the profit? Note: The  passenger would buy exactly  grams if the transaction is successful. Input Format The first line contains two space separated integers,  and ,  where  is the number of passengers who agreed to buy and  is the stolen amount of gold (in grams).   lines follow. Each line contains two space separated integers -  and , where  is the the value which the  passenger has agreed to pay in exchange for  grams of gold.   Constraints     all 's and 's are less than or equal to  and greater than .   Output Format If it's possible for Dorsey to escape, print the maximum profit he can enjoy, otherwise print Got caught!.   Got caught! Sample Input 0 Sample Output 0 Explanation 0 Selling it to passengers buying 4 grams and 6 grams would lead to 1050 dollars whereas selling it to passengers buying 5 grams gold would lead to 1140 dollars. Hence the answer.  Sample Input 1 Sample Output 1 Explanation 1 There is no way to sell all 9 grams of gold.
__label__Dynamic-Programming There are  gold mines along a river, and each mine  produces  tons of gold. In order to collect the mined gold, we want to redistribute and consolidate it amongst exactly  mines where it can be picked up by trucks. We do this according to the following rules: You can move gold between any pair of mines (i.e.,  and , where ). All the gold at some pickup mine  must either stay at mine  or be completely moved to some other mine, . Move  tons of gold between the mine at location  and the mine at location  at a cost of . Given , , and the amount of gold produced at each mine, find and print the minimum cost of consolidating the gold into  pickup locations according to the above conditions. Input Format The first line contains two space-separated integers describing the respective values of  (the number of mines) and  (the number of pickup locations).  Each line  of the  subsequent lines contains two space-separated integers describing the respective values of  (the mine's distance from the mouth of the river) and  (the amount of gold produced in tons) for mine .  Note: It is guaranteed that the mines are will be given in order of ascending location. Constraints   Output Format Print a single line with the minimum cost of consolidating the mined gold amongst  different pickup sites according to the rules stated above. Sample Input 0 3 1 20 1 30 1 40 1  Sample Output 0 20  Explanation 0  We need to consolidate the gold from  mines into a single pickup location (because ). The mines are all equidistant and they all produce the same amount of gold, so we just move the gold from the mines at locations  and  to the mine at  for a minimal cost of . Sample Input 1 3 1 11 3 12 2 13 1  Sample Input 1 4  Explanation 1  We need to consolidate the gold from  mines into a single pickup location (because ). We can achieve a minimum cost of  by moving the gold from mines  and  to the mine at . Sample Input 2 6 2 10 15 12 17 16 18 18 13 30 10 32 1  Sample Output 2 182  Explanation 2  We need to consolidate the gold from  mines into  pickup locations. We can minimize the cost of doing this by doing the following: Move the gold from the mines at locations , , and  to the mine at .    Move the gold from the mine at location  to the mine at .
__label__Dynamic-Programming Roy is helping the police department of his city in crime fighting. Today, they informed him about a new planned operation. Think of the city as a  plane. The road along the -axis is very crime prone, because  criminals live there. No two criminals live at the same position. To catch these criminals, the police department has to recruit some police officers and give each of them USD  as wages. A police officer can start his operation from any point , drive his car to point  in a straight line, and catch all the criminals who live on this way. The cost of fuel used by the officer's car is equal to the square of the euclidean distance between points  and  (Euclidean distance between points  and  equals to  ). The police department asks Roy to plan this operation. So Roy has to tell them the number of officers to recruit and the routes these officers should take in order to catch all the criminals. Roy has to provide this information while minimizing the total expenses of this operation. Find out the minimum amount of money required to complete the operation. Input Format The first line contains two integers  , number of criminals, and  , the cost of recruiting a police officer. The next line contains  space separated integers. The  integer indicates the position of the  criminal on -axis (in other words, if the  integer is , then location of the  criminal is ). The value of the positions are between  and  and are given in increasing order in the input. Output Format Print the minimum amount of money required to complete the operation. Sample Input 5 10 1 4 5 6 9  Sample Output 34  Explanation For the sample test case, police department recruits  officers who get paid . The first officer starts at point  and catches the criminal there. So he does not use any fuel. The second officer catches criminals at points ,  and . He burns fuel worth USD . The third officer catches the criminal at point . He also does not burn any fuel. The total money spent by the department is, . Timelimits  Timelimits for this challenge are given here
__label__Dynamic-Programming Zurikela is creating a graph with a special graph maker. At the begining, it is empty and has no nodes or edges. He can perform  types of operations:      : Create a set of  new nodes and name it -.       : Create edges between nodes of - and -.        : Create a set composed of nodes from - and its directly and indirectly connected nodes, called -. Note that each node can only exist in one set, so other sets become empty.      The first 's name will be -. In first and third operation  is referring to the index of new set: K = [index of last created set] + 1  Create the graph by completing the  operations specified during input. Then calculate the maximum number of independent nodes (i.e.:how many nodes in the final graph which don't have direct edge between them). Input Format The first line contains .  The  subsequent lines each contain an operation to be performed. Constraints  . For the first operation, .  For the second operation,  and all s are distinct. For the second and third operation, it's guaranteed that - and - exist.      Output Format Print maximum number of independent nodes in the final graph (i.e.: nodes which have no direct connection to one another). Sample Input 8 A 1 A 2 B 1 2 C 1 A 2 A 3 B 3 4 B 4 5  Sample Output 5  Explanation There are  operations. After first operation:  After second operation:  After third operation:  After fourth operation:  After fifth and sixth operation  and :  After seventh operation:  After eigth operation:  There are  independent nodes in - and  independent nodes in -, so we print their sum () as our answer.
__label__Dynamic-Programming You are given a sequence of integers a1,a2,a3.....an. You are free to replace any integer with any other positive integer. How many integers must be replaced to make the resulting sequence strictly increasing?  Input Format  The first line of the test case contains an integer  - the number of entries in the sequence.  The next line contains  space separated integers where the  integer is . Output Format  Output the minimal number of integers that should be replaced to make the sequence strictly increasing. Constraints      Sample Input #00 3 4 10 20  Sample Output #00 0  Sample Input #01 6 1 7 10 2 20 22  Sample Output #01 1  Sample Input #02 5 1 2 2 3 4   Sample Output #02 3  Explanation  In the first sample input, we need not replace anything, hence the output is 0.  In the second sample input, we can replace 2 with any integer between 11 and 19 to make the sequence strictly increasing, hence the output is 1.  In the third sample input, we can obtain 1, 2, 3, 4, 5 by changing the last three elements of the sequence.
__label__Dynamic-Programming In the middle of a nightmare, Maxine suddenly finds herself in a mysterious room with the following items:  A piece of paper with the word score and the integer  written on it. A map of the castle where the room is located. There are  rooms uniquely labeled from  to .   There are  bidirectional corridors connecting pairs of rooms. The value of score changes every time she travels up or down a corridor, and this value differs depending on her direction of travel along the corridor. Each corridor can be traveled any number of times in either direction. Every room is reachable from every other room.   Maxine is located in the room labeled .   The exit is located in the room labeled . Once this room is reached, score is reduced modulo  and Maxine can (but is not required to) exit that level!  There are  rooms uniquely labeled from  to .   There are  bidirectional corridors connecting pairs of rooms. The value of score changes every time she travels up or down a corridor, and this value differs depending on her direction of travel along the corridor. Each corridor can be traveled any number of times in either direction. Every room is reachable from every other room.   Maxine is located in the room labeled .   The exit is located in the room labeled . Once this room is reached, score is reduced modulo  and Maxine can (but is not required to) exit that level!  Assume some corridor  (where ) is associated with an integer, , and connects rooms  and . Then: Traveling corridor  from room  to room  increases score by . Traveling corridor  from room  to room  decreases score by .  There are  levels to Maxine's nightmare castle, and each one has a different set of values for , , and . Given the above information, help Maxine by finding and printing her maximum possible score for each level. Only you can help her wake up from this nightmare! Note: Recall that the result of a modulo operation is always non-negative.  For example, .   Input Format The first line contains a single integer, , denoting the number of rooms.  Each of the  subsequent lines describes a corridor in the form of three space-separated integers denoting the respective values for , , and .  The next line contains a single integer, , denoting the number of queries.  Each of the  subsequent lines describes a level in the form of three space-separated integers denoting its respective , , and  values.  Constraints   ,       For each level: The room layout is the same     Subtask  for  of max score. Output Format For each of the  levels, print the maximum possible score for that level on a new line. Sample Input 3 1 3 5 2 3 8 2 1 31 1 1 2 13  Sample Output 12  Explanation The Sample Input represents the following setup:    We want to travel from room  to room  while maximizing the value of score. There are at least two ways to achieve the maximum score value of :   Travel through corridors  times:   .   Travel through corridors  times:   .   Travel through corridors  times:   , because  is the smallest non-negative integer  such that  divides .   Travel through corridors  times:   , because  is the smallest non-negative integer  such that  divides .
__label__Dynamic-Programming We call a sequence of N natural numbers (a1, a2, ..., aN) a P-sequence, if the product of any two adjacent numbers in it is not greater than P. In other words, if a sequence (a1, a2, ..., aN) is a P-sequence, then ai * ai+1 ≤ P ∀ 1 ≤ i < N N P You are given N and P. Your task is to find the number of such P-sequences of N integers modulo 109+7. N P N Input Format The first line of input consists of N  The second line of the input consists of P.  N P Constraints 2 ≤ N ≤ 103  1 ≤ P ≤ 109  1 ≤ ai  Output Format Output the number of P-sequences of N integers modulo 109+7. N Sample Input 0 Sample Output 0 Explanation 0 3 such sequences are {1,1},{1,2} and {2,1}
__label__Dynamic-Programming __label__Data-Structures You have two arrays of integers,  and , where both have  number of elements. Consider the following function: score = 0  int Go(step, energy) {     if (step == N) {         score += V[step];         return (score);     }     else {         int way = random(1, 2);         if (way == 1) {             score += V[step];         }         else {             energy = P[step];         }         if (energy > 0) {             Go(step + 1, energy - 1);         }         else {             KillTheWorld();         }     } }  What is the maximum possible value of score that we can get in the end, if we call ?.  Note that the function should never invoke KillTheWorld function. And  generates a random integer from set  [1, 2].  It is guaranteed there will be a solution that wont kill the world. Input Format The first line contains an integer N. Each of the following N lines contains a pair of integers. The i-th line contains a pair of numbers, , separated by space.   Constraints       Output Format Derive the maximum score given by return (score);. return (score); Sample Input 4 4 2 0 2 4 0 3 4  Sample Output 7  Explanation In the best case, the first and second function call in Go variable  will take value 2, while in the other calls it will be equal to 1 then the final score will be equal to the value of 7.
__label__Dynamic-Programming A number is called lucky if the sum of its digits, as well as the sum of the squares of its digits is a prime number. How many numbers between  and  inclusive, are lucky? For example,  and .  Each number is tested below:           digit   digit   squares value   sum     squares sum  20      2       4,0     4 21      3       4,1     5 22      4       4,4     8 23      5       4,9     13 24      6       4,16    20 25      7       4,25    29  We see that two numbers, ,  and  are lucky. Note: These lucky numbers are not to be confused with Lucky Numbers Function Description  Complete the luckyNumbers function in the editor below.  It should return an integer that represents the number of lucky numbers in the given range.   luckyNumbers has the following parameter(s):   a: an integer, the lower range bound   b: an integer, the higher range bound   Input Format The first line contains the number of test cases .  Each of the next  lines contains two space-separated integers,  and . Constraints     Output Format Output T lines, one for each test case in the order given. Sample Input 2   1 20   120 130  Sample Output 4   1  Explanation For the first case, the lucky numbers are , and .  For the second case, the only lucky number is .
__label__Dynamic-Programming __label__Graph-Algorithms You are playing a game of Nim with a friend. The rules are are follows: 1) Initially, there are N piles of stones. Two players play alternately. 2) In each turn, a player can choose one non empty pile and remove any number of stones from it. At least one stone must be removed. 3) The player who picks the last stone from the last non empty pile wins the game. It is currently your friend's turn. You suddenly realize that if your friend was to play optimally in that position, you would lose the game. So while he is not looking, you decide to cheat and add some (possibly 0) stones to each pile. You want the resultant position to be such that your friend has no guaranteed winning strategy, even if plays optimally. You cannot create a new pile of stones. You can only add stones, and not remove stones from a pile. What is the least number of stones you need to add? Input Format The first line contains the number of cases T. T cases follow. Each case contains the number N on the first line followed by N numbers on the second line. The ith number denotes si, the number of stones in the ith pile currently. Constraints 1 <= T <= 20 2 <= N <= 15 1 <= si < 1000000000 (10^9) Output Format Output T lines, containing the answer for each case. If the current position is already losing for your friend, output 0. Sample Input 3 2 1 3 3 1 1 1 4 10 4 5 1 Sample Output 2 3 6 Explanation For the first case, add 2 stones to the first pile. Then, both piles will have 3 stones each. It is easy to verify that your friend cannot win the game unless you make a mistake. For the second case, add 1 stone to the first pile, and 2 stones to the second pile.
__label__Dynamic-Programming Mr. Road Runner bought a piece of land in the middle of a desert for a nominal amount. It turns out that the piece of land is now worth millions of dollars as it has an oil reserve under it. Mr. Road Runner contacts the ACME corp to set up the oil wells on his land. Setting up oil wells is a costly affair and the charges of setting up oil wells are as follows.  The rectangular plot bought by Mr. Road Runner is divided into r * c blocks. Only some blocks are suitable for setting up the oil well and these blocks have been marked. ACME charges nothing for building the first oil well. For every subsequent oil well built, the cost would be the maximum ACME distance between the new oil well and the existing oil wells.  If (x,y) is the position of the block where a new oil well is setup and (x1, y1) is the position of the block of an existing oil well, the ACME distance is given by  max(|x-x1|, |y-y1|)  the maximum ACME distance is the maximum among all the ACME distance between existing oil wells and new wells.  If the distance of any two adjacent blocks (horizontal or vertical) is considered 1 unit, what is the minimum cost (E) in units it takes to set up oil wells across all the marked blocks? Input Format The first line of the input contains two space separated integers r *c*.  r lines follow each containing c space separated integers.  1 indicates that the block is suitable for setting up an oil well, whereas 0 isn't.  r c   M11 M12 ... M1c   M21 M22 ... M2c   ...   Mr1 Mr2 ... Mrc    Constraints 1 <= r, c <= 50  Output Format Print the minimum value E as the answer.  Sample Input 3 4 1 0 0 0 1 0 0 0 0 0 1 0  Sample Output 3    Explanation (1, 1) (2, 1) (3, 3) are the places where are to be setup.  There are 3! = 6 ways to do it.  (1, 1) (2, 1) (3, 3) ==> cost = 0 + 1 + 2 = 3  (1, 1) (3, 3) (2, 1) ==> cost = 0 + 2 + 2 = 4  (2, 1) (1, 1) (3, 3) ==> cost = 0 + 1 + 2 = 3  (2, 1) (3, 3) (1, 1) ==> cost = 0 + 2 + 2 = 4  (3, 3) (1, 1) (2, 1) ==> cost = 0 + 2 + 2 = 4  (3, 3) (2, 1) (1, 1) ==> cost = 0 + 2 + 2 = 4   So E = 3
__label__Dynamic-Programming __label__Mathematics A company needs random numbers for its operation.  random numbers have been generated using  numbers as seeds and the following recurrence formula:   The numbers used as seeds are .  is the  term of the recurrence. Due to a failure on the servers, the company lost its seed numbers. Now they just have the recurrence formula and the previously generated  random numbers. The company wants to recover the numbers used as seeds, so they have hired you for doing this task. Input Format The first line contains two space-separated integers,  and , respectively.  The second line contains the space-separated integers describing  (all these numbers are non-negative integers ).  The third line contains the space-separated coefficients of the recurrence formula, . All of these coefficients are positive integers . Constraints    Output Format The output must be one line containing the space-separated seeds of the random numbers - . Sample Input 2 6 13 8 1 1  Sample Output 1 1   Explanation This is the classic Fibonacci recurrence. We have the  and  terms, and, of course, the seeds are the numbers  and .
__label__Dynamic-Programming A new gangster is trying to take control of the city. He makes a list of his  adversaries (e.g. gangster , gangster , ... gangster , gangster ) and plans to get rid of them.  mercenaries are willing to do the job. The gangster can use any number of these mercenaries. But he has to honor one condition set by them: they have to be assigned in such a way that they eliminate a consecutive group of gangsters in the list, e.g. gangster , gangster , ..., gangster , gangster , where the following is true: . While our new gangster wants to kill all of them, he also wants to pay the least amount of money. All mercenaries charge a different amount to kill different people. So he asks you to help him minimize his expenses.   Input Format The first line contains two space-separated integers,   and . Then  lines follow, each containing  integers as follows: The th number on the th line is the amount charged by the th mercenary for killing the th gangster on the list. Constraints     Output Format Just one line, the minimum cost for killing the  gangsters on the list. Sample Input 3 2 1 4 1 2 2 2  Sample Output  5  Explanation The new gangster can assign mercenary 1 to kill gangster 1, and mercenary 2 to kill gangster 2 and gangster 3.
__label__Dynamic-Programming A tree, , has  vertices numbered from  to  and is rooted at vertex . Each vertex  has an integer weight, , associated with it, and 's total weight is the sum of the weights of its nodes. A single remove operation removes the subtree rooted at some arbitrary vertex  from tree .  Given , perform up to  remove operations so that the total weight of the remaining vertices in  is maximal. Then print 's maximal total weight on a new line. Note: If 's total weight is already maximal, you may opt to remove  nodes. Input Format The first line contains two space-separated integers,  and , respectively.  The second line contains  space-separated integers describing the respective weights for each node in the tree, where the  integer is the weight of the  vertex.  Each of the  subsequent lines contains a pair of space-separated integers,  and , describing an edge connecting vertex  to vertex .   Constraints       Output Format Print a single integer denoting the largest total weight of 's remaining vertices. Sample Input 5 2 1 1 -1 -1 -1 1 2 2 3 4 1 4 5  Sample Output 2  Explanation We perform  remove operations:  Remove the subtree rooted at node . Losing this subtree's  weight increases the tree's total weight by .  Remove the subtree rooted at node . Losing this subtree's  weight increases the tree's total weight by .  The sum of our remaining positively-weighted nodes is , so we print  on a new line.
__label__Dynamic-Programming You are using at most A number of 1s and at most B number of 2s. How many different evaluation results are possible when they are formed in an expression containing only addition + sign and multiplication * sign are allowed? + * Note that, multiplication takes precedence over addition. For example, if A=2 and B=2, then we have the following expressions: 1, 1*1 = 1 1 1*1 2, 1*2, 1*1*2, 1+1 = 2 2 1*2 1*1*2 1+1 1+2, 1+1*2 = 3 1+2 1+1*2 2+2, 2*2, 1+1+2, 1*2*2, 1*1*2*2, 1*2+1*2, 1*1*2+2, 1*2+2 = 4 2+2 2*2 1+1+2 1*2*2 1*1*2*2 1*2+1*2 1*1*2+2 1*2+2 1+2+2, 1+1*2+2 = 5 1+2+2 1+1*2+2 1+1+2+2,  1+1+2*2 = 6 1+1+2+2 1+1+2*2 So there are 6 unique results that can be formed if A = 2 and B = 2.  Input Format The first line contains the number of test cases T, T testcases follow each in a newline.  Each testcase contains 2 integers A and B separated by a single space.   Constraints 1 <= T <= 105  0<=A<=1000000000  0<=B<=1000   Output Format Print the number of different evaluations modulo (%) (109+7.) Sample Input 4 0 0 2 2 0 2 2 0  Sample Output 0 6 2 2  Explanation When A = 0, B = 0, there are no expressions, hence 0.  When A = 2, B = 2, as explained in the problem statement above, expressions leads to 6 possible solutions.  When A = 0, B = 2, we have 2, 2+2 or 2*2, hence 2.  2 2+2 2*2 When A = 2, B = 0, we have 1 or 1*1, 1+1 hence 2.  1 1*1 1+1
__label__Dynamic-Programming In a tournament,  players play against each other exactly once. Each game results in exactly one player winning. There are no ties. You have been given a scorecard containing the scores of each player at the end of the tournament. The score of a player is the total number of games the player won in the tournament. However, the scores of some players might have been erased from the scorecard. How many possible scorecards are consistent with the input scorecard? Input Format The first line contains a single integer  denoting the number of test cases.  test cases follow.   The first line of each test case contains a single integer . The second line contains  space-separated integers .  denotes the score of the th player. If the score of the th player has been erased, it is represented by . Constraints    Output Format For each test case, output a single line containing the answer for that test case modulo .  Sample Input 0 Sample Output 0 Explanation 0 For the first case, there are 2 scorecards possible: (0,1,2) or (1,0,2).  For the second case, the valid scorecards are (1,1,1), (0,1,2), (0,2,1), (1,0,2), (1,2,0), (2,0,1), (2,1,0).  For the third case, the only valid scorecard is (0,1,2,3).  For the fourth case, there is no valid scorecard. It is not possible for both players to have score of 1.  For the fifth case, 6-variations of {(3,1,0)[2]}, and 3 variations each of {(2,2,0)[2]} and {(2,1,1)[2]}.
__label__Dynamic-Programming A war has broken down between Vim and Emacs. Gedit, being Vim's ally, is captured by Emacs as a prisoner of war and it is up to Vim to rescue him by defeating Emacs. For this task, Vim has to assemble an army of appropriate skills. He can choose a non-empty subset of soldiers from a set of  soldiers (numbered from  to ). Each soldier has some subset of skills out of  different skills (numbered from  to ). The skill-set of an army is the union of skill-sets of its constituent soldiers. To win the war, Vim needs to know how many different subsets of soldiers satisfy his skill-set requirement. Since the answer can be huge, print it modulo .  Note : The chosen army's skill-set must exactly match the skill-set requirement of Vim (i.e no extra skills must be present in the army's skill-set than what is required). Input Format The first line contains  and , the number of soldiers to choose from and the number of different skills possible respectively.  The next  lines contain  boolean characters each. If the  character of the  line is , then the  soldier possess the  skill and if it is , then not.  The last line contains  boolean characters denoting the requirement skill-set of Vim where the  character being  signifies that Vim wants the  skill to be present in his final army and not, otherwise. Constraints     Output Format Output in a single line the required answer, as explained above.   Sample Input 4 2   00   10   01   11   11    Sample Output 10  Explanation Vim wants both the skills to be present in his selected army. Hence, he can choose the following subsets of soldiers:
__label__Dynamic-Programming In Chile, land are partitioned into a one large grid, where each element represents a land of size 1x1.   Shaka is a newcomer in Chile and is trying to start his own business. He is planning to build a store. He has his own ideas for the "perfect store" which can be represented by a HxW grid. Element at position (i, j) represents height of land at index (i, j) in the grid.   Shaka has purchased a land area which can be represented RxC grid (H <= R, W <= C). Shaka is interested in finding best HxW sub-grid in the acquired land. In order to compare the possible sub-grids, Shaka will be using the sum of squared difference between each cell of his "perfect store" and  it's corresponding cell in the subgrid. Amongst all possible sub-grids, he will choose the one with smallest such sum. Note The grids are 1-indexed and rows increase from top to bottom and columns increase from left to right.  If x is the height of a cell in the "perfect store" and y is the height of the corresponding cell in a sub-grid of the acquired land, then the squared difference is defined as (x-y)2  Input Format The first line of the input consists of two integers, R C, separated by single space.  Then R lines follow, each one containing C space separated integers, which describe the height of each land spot of the purchased land.  The next line contains two integers, H W, separated by a single space, followed by H lines with W space separated integers, which describes the "perfect store".   Constraints 1 <= R, C <= 500  1 <= H <= R  1 <= W <= C  No height will have an absolute value greater than 20.   Output Format In the first line, output the smallest possible sum (as defined above) Shaka can find on exploring all the sub-grids (of size HxW)  in the purchased land.  In second line, output two space separated integers, i j, which represents the index of top left corner of sub-grid (on the acquired land) with the minimal such sum. If there are multiple sub-grids with minimal sum, output the one with the smaller row index. If there are still multiple sub-grids with minimal sum, output the one with smaller column index.  Sample Input 3 3 19 19 -12 5 8 -14 -12 -11 9 2 2 -18 -12 -10 -7  Sample Output 937 2 2  Explanation The result is computed as follows: (8 - (-18)) 2 +  (-14 - (-12)) 2 + (-11 - (-10)) 2 + (9 - (-7)) 2 = 937
__label__Dynamic-Programming __label__Mathematics Given an integer, , find the smallest integer  such that  is divisible by  (i.e.,  is a factor of ) and satisfies the following properties:  must not contain zeroes in its decimal representation.  The sum of 's digits must be greater than or equal to the product of 's digits.  Given , find  and print the number of digits in 's decimal representation.  Input Format A single integer denoting . Constraints   is not divisible by . Time Limits The time limits for this challenge are available here. Output Format Print the number of digits in the decimal representation of the smallest possible . Sample Input 0 Sample Output 0 Explanation 0  is evenly divided by , doesn't contain any zeroes in its decimal representation, and the sum of its digits is not less than the product of its digits. Thus, we print the number of digits in  (which also happens to be ) as our answer. Sample Input 1 Sample Output 1 Explanation 1  is evenly divided by , doesn't contain any zeroes in its decimal representation, and the sum of its digits is not less than the product of its digits. Thus, we print the number of digits in , which is , as our answer.
__label__Dynamic-Programming Divide-and-Conquer on a tree is a powerful approach to solving tree problems.  Imagine a tree, , with  vertices. Let's remove some vertex  from tree , splitting  into zero or more connected components, , with vertices . We can prove that there is a vertex, , such that the size of each formed components is at most . The Divide-and-Conquer approach can be described as follows: Initially, there is a tree, , with  vertices. Find vertex  such that, if  is removed from the tree, the size of each formed component after removing  is at most . Remove  from tree . Perform this approach recursively for each of the connected components. We can prove that if we find such a vertex  in linear time (e.g., using DFS), the entire approach works in . Of course, sometimes there are several such vertices  that we can choose on some step, we can take and remove any of them. However, right now we are interested in trees such that at each step there is a unique vertex  that we can choose. Given , count the number of tree 's such that the Divide-and-Conquer approach works determinately on them. As this number can be quite large, your answer must be modulo . Input Format A single line of two space-separated positive integers describing the respective values of  (the number of vertices in tree ) and  (the modulo value). Constraints    is a prime number. Subtasks  for  of the maximum score.  for  of the maximum score.  Output Format Print a single integer denoting the number of tree 's such that vertex  is unique at each step when applying the Divide-and-Conquer approach, modulo . Sample Input 0 1 103  Sample Output 0  1  Explanation 0 For , there is only one way to build a tree so we print the value of  as our answer. Sample Input 1 2 103  Sample Output 1 0  Explanation 1 For , there is only one way to build a tree:  This tree is not valid because we can choose to remove either node  or node  in the first step. Thus, we print  as no valid tree exists. Sample Input 2 3 103  Sample Output 2 3   Explanation 2 For , there are  valid trees depicted in the diagram below (the unique vertex removed in the first step is shown in red):  Thus, we print the value of  as our answer. Sample Input 3 4 103  Sample Output 3 4  Explanation 3 For , there are  valid trees depicted in the diagram below (the unique vertex removed in the first step is shown in red):  The figure below shows an invalid tree with :  This tree is not valid because we can choose to remove node  or node  in the first step. Because we had four valid trees, we print the value of  as our answer.
__label__Dynamic-Programming The King of Byteland wants to grow his territory by conquering  other countries. To prepare his  heirs for the future, he decides they must work together to capture each country.  The King has an army, , of  battalions; the  battalion has  soldiers. For each battle, the heirs get a detachment of soldiers to share but will fight amongst themselves and lose the battle if they don't each command the same number of soldiers (i.e.: the detachment must be divisible by ). If given a detachment of size , the heirs will fight alone without any help. The battalions chosen for battle must be selected in the following way: A subsequence of  battalions must be selected (from the  battalions in army ).  The  battle will have a squad of soldiers from the  selected battalion such that its size is divisible by .  The soldiers within a battalion have unique strengths. For a battalion of size , the detachment of soldiers  is different from the detachment of soldiers  The King tasks you with finding the number of ways of selecting  detachments of battalions to capture  countries using the criterion above. As this number may be quite large, print the answer modulo . Input Format The first line contains two space-separated integers,  (the number of battalions in the King's army) and  (the number of countries to conquer), respectively. The second line contains  space-separated integers describing the King's army, , where the  integer denotes the number of soldiers in the  battalion ().  Constraints     holds for test cases worth at least  of the problem's score. Output Format Print the number of ways of selecting the  detachments of battalions modulo . Sample Input 3 2 3 4 5  Sample Output 20  Explanation First, we must find the ways of selecting  of the army's  battalions; then we must find all the ways of selecting detachments for each choice of battalion.  Battalions :   has  soldiers, so the only option is an empty detachment ().   has  soldiers, giving us  detachment options ( and ).  So for this subset of battalions, we get  possible detachments. Battalions :   has  soldiers, so the only option is an empty detachment ().   has  soldiers, giving us  detachment options (, , , , , ). So for this subset of battalions, we get  possible detachments. Battalions :   has  soldiers, giving us  detachment options ( and ).   has  soldiers, giving us  detachment options (, , , , , ).  So for this subset of battalions, we get  possible detachments. In total, we have  ways to choose detachments, so we print , which is .
__label__Dynamic-Programming Borussia Dortmund are a famous football ( soccer ) club from Germany. Apart from their fast-paced style of playing, the thing that makes them unique is the hard to pronounce names of their players ( błaszczykowski , papastathopoulos , großkreutz etc. ). The team's coach is your friend. He is in a dilemma as he can't decide how to make it easier to call the players by name, during practice sessions. So, you advise him to assign easy names to his players. A name is easy to him if  1. It consists of only one word.  2. It consists of only lowercase english letters.  3. Its length is exactly .  4. It contains exactly  different letters from the  letters of English alphabet.  5. At least one of its proper prefixes matches with its proper suffix of same length. Given,  and  you have to tell him the number of easy names he can choose from modulo . Note : A prefix  of a name  is proper if, . Similarly, a suffix  of a name  is proper if, . Input Format  The first line of the input will contain  ( the number of testcases ). Each of the next  lines will contain  space separated integers  and . Output Format  For each testcase, output the number of ways the coach can assign names to his players modulo . Constraints       Sample Input #1 3 1 1 2 1 4 2  Sample Output #1 0   26  2600    Sample Input #2 5   2 2 5 1 3 2 6 2 1 3  Sample Output #2 0 26 650 13650 0
__label__Dynamic-Programming __label__Mathematics Given an array of  integers (), find all possible increasing subsequences of maximum length, . Then print the lexicographically  longest increasing subsequence as a single line of space-separated integers; if there are less than  subsequences of length , print . Two subsequences  and  are considered to be different if there exists at least one  such that . Input Format The first line contains  space-separated integers,  and , respectively.  The second line consists of  space-separated integers denoting  respectively. Constraints      Scoring  for  of the test data.    for  of the test data. Output Format Print a single line of  space-separated integers denoting the lexicographically  longest increasing subsequence; if there are less than  subsequences of length , print . Note:  is the length of longest increasing subsequence in the array. Sample Input 0 5 3 1 3 1 2 5  Sample Output 0 1 3 5  Sample Input 1 5 2 1 3 2 4 5  Sample Output 1 1 3 4 5      Explanation Sample Case 0:  The longest possible increasing subsequences in lexicographical order are:      Notice that the first and second subsequences appear the same; they are actually both different because the  in the first subsequence comes from array element , and the  in the second subsequence comes from array element . Because , we print the  one () as a single line of space-separated integers. Sample Case 1:  The longest possible increasing subsequences in lexicographical order are:      Because , we print the  one () as a single line of space-separated integers.
__label__Dynamic-Programming Little Walter likes playing with his toy scales. He has  types of weights. The  weight type has weight . There are infinitely many weights of each type. Recently, Walter defined a function, , denoting the number of different ways to combine several weights so their total weight is equal to . Ways are considered to be different if there is a type which has a different number of weights used in these two ways. For example, if there are  types of weights with corresonding weights , , and , then there are  ways to get a total weight of : Use  weights of type . Use  weights of type . Use  weight of type  and  weight of type . Use  weight of type . Given , , , and , can you find the value of ? Input Format The first line contains a single integer, , denoting the number of types of weights.  The second line contains  space-separated integers describing the values of , respectively  The third line contains two space-separated integers denoting the respective values of  and . Constraints      Note: The time limit for C/C++ is  second, and for Java it's  seconds.  Output Format Print a single integer denoting the answer to the question. As this value can be very large, your answer must be modulo . Sample Input 3 1 2 3 1 6  Sample Output 22  Explanation
__label__Dynamic-Programming There are  pairs of hard disk drives (HDDs) in a cluster. Each HDD is located at an integer coordinate on an infinite straight line, and each pair consists of one primary HDD and one backup HDD. Next, you want to place  computers at integer coordinates on the same infinite straight line. Each pair of HDDs must then be connected to a single computer via wires, but a computer can have any number (even zero) of HDDs connected to it. The length of a wire connecting a single HDD to a computer is the absolute value of the distance between their respective coordinates on the infinite line. We consider the total length of wire used to connect all the HDDs to computers to be the sum of the lengths of all the wires used to connect HDDs to computers. Note that both the primary and secondary HDDs in a pair must connect to the same computer. Given the locations of  pairs (i.e., primary and backup) of HDDs and the value of , place all  computers in such a way that the total length of wire needed to connect each pair of HDDs to computers is minimal. Then print the total length on a new line. Input Format The first line contains two space-separated integers denoting the respective values of  (the number of pairs of HDDs) and  (the number of computers).  Each line  of the  subsequent lines contains two space-separated integers describing the respective values of  (coordinate of the primary HDD) and  (coordinate of the backup HDD) for a pair of HDDs. Constraints       Output Format Print a single integer denoting the minimum total length of wire needed to connect all the pairs of HDDs to computers. Sample Input 5 2 6 7 -1 1 0 1 5 2 7 3  Sample Output 13  Explanation For the given Sample Case, it's optimal to place computers at positions  and  on our infinite line. We then connect the second () and the third () pairs of HDDs to the first computer (at position ) and then connect the remaining pairs to the second computer (at position ).     We calculate the wire lengths needed to connect the drives to each computer. The amount of wire needed to connect the second and third drives to the first computer is , and the amount of wire needed to connect the rest of the drives to the second computer is . When we sum the lengths of wire needed to connect all pairs of drives to the two computers, we get a total length of . Thus, we print  as our answer.
__label__Dynamic-Programming Chinese Version Russian Version Tom and Derpina have a rectangular shaped chocolate bar with chocolates labeled T, D and U. They want to split the bar into exactly two pieces such that: Tom's piece can not contain any chocolate labeled D and similarly, Derpina's piece can not contain any chocolate labeled T and U can be used by either of the two.   All chocolates in each piece must be connected (two chocolates are connected if they share an edge), i.e. the chocolates should form one connected component The absolute difference between the number of chocolates in pieces should be at most K After dividing it into exactly two pieces, in any piece, there should not be 4 adjacent chocolates that form a square, i.e. there should not be a fragment like this:  XX  XX Input Format The first line of the input contains 3 integers M, N and K separated by a single space.  M lines follow, each of which contains N characters.  Each character is 'T','D' or 'U'. Constraints 0≤ M, N ≤8  0≤ K ≤ M * N Output Format A single line containing the number of ways to divide the chocolate bar. Sample Input 2 2 4 UU UU  Sample Output 12  Explanation Note: In the explanation T and D are used to represent, which parts belong to Tom and Derpina respectively. There are 24 = 16 possible separations.  The 4 invalid are: TT TT  DD DD  DT TD  TD DT  Some of the valid ones are: TD TD  TT DD  DD TT  DT DT
__label__Search __label__Bit You will be given an array of integers.  All of the integers except one occur twice.  That one is unique in the array. Given an array of integers, find and print the unique element.   For example, , the unique element is .   Function Description  Complete the lonelyinteger function in the editor below.  It should return the integer which occurs only once in the input array.   lonelyinteger has the following parameter(s):   a: an array of integers   Input Format The first line contains a single integer, , denoting the number of integers in the array.  The second line contains  space-separated integers describing the values in . Constraints   It is guaranteed that  is an odd number and that there is one unique element.   , where . Output Format Print the unique integer in the array. Sample Input 0 Sample Output 0 Explanation 0 There is only one element in the array, thus it is unique. Sample Input 1 Sample Output 1 Explanation 1 We have two 's, and  is unique.  Sample Input 2 Sample Output 2 Explanation 2 We have two 's, two 's, and one .   is unique.
__label__Bit Given two integers,  and , find the maximal value of  xor , written , where  and  satisfy the following condition:   For example, if  and , then        Our maximum value is .   Function Description Complete the maximizingXor function in the editor below.  It must return an integer representing the maximum value calculated.   maximizingXor has the following parameter(s): l: an integer, the lower bound, inclusive   r: an integer, the upper bound, inclusive   Input Format The first line contains the integer .  The second line contains the integer .     Constraints 3  Output Format Return the maximal value of the xor operations for all permutations of the integers from  to , inclusive. Sample Input 0 Sample Output 0 Explanation 0 The input tells us that  and . All the pairs which comply to above condition are the following:                                            Here two pairs (10, 13) and (11, 12) have maximum xor value 7, and this is the answer.  Sample Input 1 Sample Output 1
__label__Bit Louise and Richard have developed a numbers game.  They pick a number and check to see if it is a power of .  If it is, they divide it by .  If not, they reduce it by the next lower number which is a power of .  Whoever reduces the number to  wins the game.  Louise always starts. Given an initial value, determine who wins the game. As an example, let the initial value .  It's Louise's turn so she first determines that  is not a power of .  The next lower power of  is , so she subtracts that from  and passes  to Richard.   is a power of , so Richard divides it by  and passes  to Louise.  Likewise,  is a power so she divides it by  and reaches .  She wins the game. Update If they initially set counter to , Richard wins.  Louise cannot make a move so she loses. Function Description  Complete the counterGame function in the editor below.  It should return the winner's name, either Richard or Louise.   Richard Louise counterGame has the following parameter(s):   n: an integer to initialize the game counter   Input Format The first line contains an integer , the number of testcases.  Each of the next  lines contains an integer , the initial value for the game.   Constraints   Output Format For each test case, print the winner's name on a new line in the form Louise or Richard. Louise Richard Sample Input 0 Sample Output 0 Explanation 0  is not a power of  so Louise reduces it by the largest power of  less than :.    is a power of  so Richard divides by  to get  and wins the game.
__label__Mathematics __label__Bit An array, , is defined as follows:    for , where  is the symbol for XOR You will be given a left and right index .  You must determine the XOR sum of the segment of  as .  For example, .  The segment from  to  sums to .  Print the answer to each question. Function Description  Complete the xorSequence function in the editor below.  It should return the integer value calculated.   xorSequence has the following parameter(s):   l: the lower index of the range to sum   r: the higher index of the range to sum   Input Format The first line contains an integer , the number of questions.  Each of the next  lines contains two space-separated integers,  and , the inclusive left and right indexes of the segment to query. Constraints     Output Format On a new line for each test case, print the XOR-Sum of 's elements in the inclusive range between indices  and . Sample Input 0 Sample Output 0 Explanation 0 The beginning of our array looks like this:   Test Case 0:   Test Case 1:   Test Case 2:   Sample Input 1 Sample Output 1 Explanation 1 .  Perform the xor sum on each interval:
__label__Mathematics __label__Bit Given an integer , find each  such that:   where  denotes the bitwise XOR operator. Print the number of 's satisfying the criteria. For example, if , there are four values:      .   Function Description Complete the sumXor function in the editor below.  It should return the number of values determined, as an integer.   sumXor has the following parameter(s):  - n: an integer   Input Format A single integer, . Constraints  Subtasks  for  of the maximum score. Output Format Print the total number of integers  satisfying the criteria. Sample Input 0 5  Sample Output 0 2  Explanation 0 For , the  values  and  satisfy the conditions:   Sample Input 1 10  Sample Output 1 4  Explanation 1 For , the  values , , , and  satisfy the conditions:
__label__Bit Given a long integer , count the number of values of  satisfying the following conditions:     where  and  are long integers and  is the bitwise XOR operator.   You are given  queries, and each query is in the form of a long integer denoting . For each query, print the total number of values of  satisfying the conditions above on a new line. For example, you are given the value .  Condition  requires that .  The following tests are run:           We find that there are  values meeting the first condition:  and .   Function Description  Complete the theGreatXor function in the editor below.  It should return an integer that represents the number of values satisfying the constraints.   theGreatXor has the following parameter(s): x: an integer   Input Format The first line contains an integer , the number of queries.  Each of the next  lines contains a long integer describing the value of  for a query.   Constraints   Subtasks For  of the maximum score:   Output Format For each query, print the number of values of  satisfying the given conditions on a new line. Sample Input 0 Sample Output 0 Explanation 0 We perform the following  queries: For  the only value of  satisfying  is . This also satisfies our other condition, as  and . Because we have one valid  and there are no more values to check, we print  on a new line. For , the following values of  satisfy our conditions:          There are five valid values of . For , the following values of  satisfy our conditions:          There are five valid values of . Sample Input 1 Sample Output 1 Explanation 1 In the first case:      In the second case, the first 10 values are:
__label__Bit You will be given a list of 32 bit unsigned integers. Flip all the bits ( and ) and print the result as an unsigned integer.   For example, your decimal input .  We're working with 32 bits, so:       Function Description Complete the flippingBits function in the editor below.  It should return the unsigned decimal integer result.   flippingBits has the following parameter(s): n: an integer Input Format The first line of the input contains , the number of queries.  Each of the next  lines contain an integer, , to process.   Constraints    Output Format Output one line per element from the list with the decimal value of the resulting unsigned integer. Sample Input 0 Sample Output 0 Explanation 0             Sample Input 1 Sample Output 1 Explanation 1         Sample Input 2 Sample Output 2 Explanation 2
__label__Greedy-Algorithms __label__Bit You are given  non-negative integers, . We define the score for some permutation () of length  to be the maximum of  for .  Find the permutation with the minimum possible score and print its score. Note:  is the exclusive-OR (XOR) operator. Input Format The first line contains single integer, , denoting the number of integers.  The second line contains  space-separated integers, , describing the respective integers. Constraints   Output Format Print a single integer denoting the minimum possible score. Sample Input 0 4 1 2 3 4  Sample Output 0 5  Sample Input 1 3 1 2 3  Sample Output 1 2  Explanation Sample Case 0:  The permutation with the minimum score is :        Because the permutation's score is the maximum of these values, we print  on a new line. Sample Case 1:  The permutation with the minimum score is :     Because the permutation's score is the maximum of these values, we print  on a new line.
__label__Bit Sansa has an array. She wants to find the value obtained by XOR-ing the contiguous subarrays, followed by XOR-ing the values thus obtained. Determine this value.   For example, if :  Now we take the resultant values and XOR them together:   Function Description  Complete the sansaXor function in the editor below.  It should return an integer that represents the results of the calculations.   sansaXor has the following parameter(s):   arr:  an array of integers   Input Format The first line contains an integer , the number of the test cases.    Each of the next  pairs of lines is as follows:  - The first line of each test case contains an integer , the number of elements in .  - The second line of each test case contains  space-separated integers .     Constraints       Output Format Print the results of each test case on a separate line.   Sample Input 0 Sample Output 0 Explanation 0 Test case 0:     Test case 1:    Sample Input 1 Sample Output 1 Explanation 1 Test Case 0:   Test Case 1:
__label__Bit Consider two non-negative long integers,  and , where . The bitwise AND of all long integers in the inclusive range between  and  can be expressed as , where  is the bitwise AND operator.  Given  pairs of long integers,  and , compute and print the bitwise AND of all natural numbers in the inclusive range between  and . For example, if  and , the calculation is .   Function Description  Complete the andProduct in the editor below.  It should return the computed value as an integer.   andProduct has the following parameter(s):   a: an integer   b: an integer   Input Format The first line contains a single integer , the number of intervals to test.  Each of the next  lines contains two space-separated integers  and . Constraints    Output Format For each pair of long integers, print the bitwise AND of all numbers in the inclusive range between  and  on a new line. Sample Input 0 Sample Output 0 Explanation 0 There are three pairs to compute results for:  and   , so we print  on a new line.  and     and    Sample Input 1 Sample Output 1
__label__Strings __label__Bit The SuperBowl Lottery is about to commence, and there are several lottery tickets being sold, and each ticket is identified with a ticket ID. In one of the many winning scenarios in the Superbowl lottery, a winning pair of tickets is: Concatenation of the two ticket IDs in the pair, in any order, contains each digit from  to  at least once. For example, if there are  distinct tickets with ticket ID  and ,  is a winning pair.  NOTE: The ticket IDs can be concantenated in any order. Digits in the ticket ID can occur in any order.  Your task is to find the number of winning pairs of distinct tickets, such that concatenation of their ticket IDs (in any order) makes for a winning scenario. Complete the function winningLotteryTicket which takes a string array of ticket IDs as input, and return the number of winning pairs.  winningLotteryTicket Input Format The first line contains  denoting the total number of lottery tickets in the super bowl.  Each of the next  lines contains a string, where string on a  line denotes the ticket id of the  ticket. Constraints   length of   sum of lengths of all  Each ticket id consists of digits from  Output Format Print the number of pairs in a new line. Sample Input 0 Sample Output 0 Explanation 0 Pairs of distinct tickets that make for a winning scenario are :  Notice that each winning pair has digits from  to  atleast once, and the digits in the ticket ID can be of any order. Thus, the number of winning pairs is .
__label__Bit An XOR operation on a list is defined here as the xor () of all its elements (e.g.: ).  The  of set  is defined here as the sum of the s of all non-empty subsets of  known as . The set  can be expressed as:   For example: Given set  The set of possible non-empty subsets is:   The set of possible non-empty subsets is:   The  of these non-empty subsets is then calculated as follows:   =  The  of these non-empty subsets is then calculated as follows:   =  Given a list of  space-separated integers, determine and print .     For example, .  There are three possible subsets, .  The XOR of , of  and of .  The XorSum is the sum of these:  and .   Note: The cardinality of powerset is , so the set of non-empty subsets of set  of size  contains  subsets. Function Description  Complete the xoringNinja function in the editor below.  It should return an integer that represents the XorSum of the input array, modulo .   xoringNinja has the following parameter(s):   arr: an integer array Input Format The first line contains an integer , the number of test cases.        Each test case consists of two lines:  -  The first line contains an integer , the size of the set .  -  The second line contains  space-separated integers .   Constraints       Output Format For each test case, print its  on a new line.  The  line should contain the output for the  test case. Sample Input 0 Sample Output 0 Explanation 0 The input set, , has  possible non-empty subsets: . We then determine the  of each subset in :                Then sum the results of the  of each individual subset in , resulting in  and . Sample Input 1 Sample Output 1
__label__Bit Jack and Daniel are friends.  They want to encrypt their conversations so that they can save themselves from interception by a detective agency so they invent a new cipher.   Every message is encoded to its binary representation. Then it is written down  times, shifted by  bits. Each of the columns is XORed together to get the final encoded string. If  and  it looks like so:   1001011     shift 0  01001011    shift 1 001001011   shift 2 0001001011  shift 3 ---------- 1110101001  <- XORed/encoded string s  Now we have to decode the message.  We know that .  The first digit in  so our output string is going to start with .  The next two digits are also , so they must have been XORed with .  We know the first digit of our  shifted string is a  as well.  Since the  digit of  is , we XOR that with our  and now know there is a  in the  position of the original string.  Continue with that logic until the end. Then the encoded message  and the key  are sent to Daniel.    Jack is using this encoding algorithm and asks Daniel to implement a decoding algorithm.  Can you help Daniel implement this?   Function Description  Complete the cipher function in the editor below.  It should return the decoded string.   cipher has the following parameter(s):   k: an integer that represents the number of times the string is shifted  s: an encoded string of binary digits Input Format The first line contains two integers  and , the length of the original decoded string and the number of shifts.  The second line contains the encoded string  consisting of  ones and zeros.   Constraints       It is guaranteed that  is valid.   Output Format Return the decoded message of length , consisting of ones and zeros.   Sample Input 0 Sample Output 0 Explanation 0 1001010  1001010   1001010    1001010 ---------- 1110100110  Sample Input 1 Sample Output 1 Explanation 1 101111  101111 ------- 1110001  Sample Input 2 Sample Output 2 Explanation 2 10000101 010000101 1110011011
__label__Bit Consider a zero-indexed matrix with  rows and  columns, where each row is filled gradually. Given the first row of the matrix, you can generate the elements in the subsequent rows using the following formula:   Each row is generated one by one, from the second row through the last row. Given the first row of the matrix, find and print the elements of the last row as a single line of space-separated integers. Note: The  operator denotes bitwise XOR. Input Format The first line contains two space-separated integers denoting the respective values of  (the number of columns in the matrix) and  (the number of rows in the matrix).  The second line contains  space-separated integers denoting the respective values of the elements in the matrix's first row. Constraints    Output Format Print  space-separated integers denoting the respective values of the elements in the last row of the matrix. Sample Input 0 Sample Output 0 Explanation 0 We use the formula given above to calculate the  values in the last row of the matrix:         We then print each value (in order) as a single line of space-separated integers.
__label__Bit Johnny is playing with a large binary number, . The number is so large that it needs to be compressed into an array of integers, , where the values in even indices () represent some number of consecutive  bits and the values in odd indices () represent some number of consecutive  bits in alternating substrings of .        For example, suppose we have array .  represents ,  represents ,  represents ,  represents , and  represents . The number of consecutive binary characters in the  substring of  corresponds to integer , as shown in this diagram:  When we assemble the sequential alternating sequences of 's and 's, we get . We define setCount() to be the number of 's in a binary number, . Johnny wants to find a binary number, , that is the smallest binary number  where setCount() = setCount(). He then wants to compress  into an array of integers,  (in the same way that integer array  contains the compressed form of binary string ). Johnny isn't sure how to solve the problem. Given array , find integer array  and print its length on a new line. Then print the elements of array  as a single line of space-separated integers. Input Format The first line contains a single positive integer, , denoting the number of test cases. Each of the  subsequent lines describes a test case over  lines: The first line contains a single positive integer, , denoting the length of array .  The second line contains  positive space-separated integers describing the respective elements in integer array  (i.e., ). Constraints   Subtasks For a  score, . For a  score, . Output Format For each test case, print the following  lines:   Print the length of integer array  (the array representing the compressed form of binary integer ) on a new line.  Print each element of  as a single line of space-separated integers. It is guaranteed that a solution exists. Sample Input 0 Sample Output 0 Explanation 0 , which expands to . We then find setCount() . The smallest binary number  which also has eleven 's is . This can be reduced to the integer array . This is demonstrated by the following figure:  Having found , we print its length () as our first line of output, followed by the space-separated elements in  as our second line of output.
__label__Bit Bob has received a binary string of length N transmitted by Alice. He knows that due to errors in transmission, up to K bits might have been corrupted (and hence flipped). However, he also knows that the string Alice had intended to transmit was not periodic. A string is not periodic if it cannot be represented as a smaller string concatenated some number of times. For example, "0001", "0110" are not periodic while "00000", "010101" are periodic strings. Now he wonders how many possible strings could Alice have transmitted. Input Format The first line contains the number of test cases T. T test cases follow. Each case contains two integers N and K on the first line, and a binary string of length N on the next line. Constraints       Output Format Output T lines, one for each test case. Since the answers can be really big, output the numbers modulo 1000000007. Sample Input 0 Sample Output 0 Explanation 0 Explanation: For the second example, Alice could have transmitted "001", or "011" or "101".  For the third example, Alice could have transmitted 001, 010, 100, 011, 101, 110
__label__Bit Consider four numbers: , , , and . You must change at most  bits in  and  to form the numbers  and  satisfying the equation . Here, the | symbol denotes the bitwise OR operation. Given  sets of the numbers defined above, find and print the respective values of  and  on new lines; if no such value exists, print  instead. If there are multiple solutions, make  as small as possible; if there are still multiple solutions, make  as small as possible.  Notes:  , , and  are given in Hexadecimal (base 16), and  is given in decimal (base 10). If the number of bits changed in  is  and the number of bits changed in B is , then  must be . Input Format The first line contains an integer, , denoting the number of queries. The subsequent lines describe each respective query as follows: The first line contains a single integer denoting the value of . Each of the next  lines contains a Hexadecimal (base 16) number describing the respective values of , , and . Constraints    Output Format Print two lines of output for each query: The first line should contain a Hexadecimal (base 16) number denoting the value of . The second line must contain a Hexadecimal (base 16) number denoting the value of .  If no valid answer exists, you must instead print one line of output with the integer . Note: The letters in Hexadecimal numbers must be in uppercase. Sample Input 3 8 2B 9F 58 5 B9 40 5A 2 91 BE A8  Sample Output 8 58 18 42 -1  Explanation Query 0:  In this query, .  Change  to .  bits are changed.  Change B =  to .  bits are changed.   Query 1:  In this query, .  Change  to .  bits are changed.  Change  to . Only  bit is changed.  Query 2:  There is no valid answer, so we print .
__label__Bit Suppose that  is a list of  numbers  and  is a permutation of these numbers, we say B is K-Manipulative if and only if:  is not less than , where  represents the XOR operator. You are given . Find the largest  such that there exists a K-manipulative permutation . Input: The first line is an integer . The second line contains  space separated integers - .   Output:  The largest possible , or  if there is no solution. Constraints:      Sample Input 0 Sample Output 0 Explanation 0 Here the list  is . One possible permutation . Here   .  So there exists a permutation  of  such that  is not less than . However there does not exist any permutation  of  such that  is not less than . So the maximum possible value of  is . Sample Input 1 Sample Output 1 Explanation 1 Here the list  is . One possible permutation . Here   .  So there exists a permutation  of  such that  is not less than . However there does not exist any permutation  of  such that  is not less than . So the maximum possible value of  is .
__label__Bit Alice and Bob are playing the game of Nim with  piles of stones with sizes . If Alice plays first, she loses if and only if the 'xor sum' (or 'Nim sum') of the piles is zero, i.e., . Since Bob already knows who will win (assuming optimal play), he decides to cheat by removing some stones in some piles before the game starts. However, to reduce the risk of suspicion, he must keep at least one pile unchanged. Your task is to count the number of ways Bob can remove the stones to force Alice into losing the game. Since the number can be very large, output the number of ways modulo . Assume that both players will try to optimize their strategy and try to win the game. Input Format The first line of the input contains an integer  denoting the number of piles. The next line contains  space-separated integers  indicating the sizes of the stone piles. Constraints     Output Format Print a single integer denoting the number of ways Bob can force Alice to lose the game, modulo .   Sample Input 0 Sample Output 0 Explanation 0 The answer is . The four possible resulting lists of piles is:         Note that  is not allowed since he must keep one pile unchanged. Sample Input 1 Sample Output 1
__label__Bit Understanding 's complement representation is fundamental to learning about Computer Science. It allows us to write negative numbers in binary.  The leftmost digit is used as a sign bit.  If it is , we have a negative number and it is represented as the two's complement of its absolute value.  Let's say you wrote down the 's complement representation for each -bit integer in the inclusive range from  to .  How many 's would you write down in all?   For example, using an -bit byte rather than  bit integer, the two's complement of a number can be found by reversing all its bits and adding .  The two's complement representations for a few numbers are shown below:           |Number|                Representation in Number   Binary     Inverse     Two's Complement -3      00000011    11111100    11111101 -2      00000010    11111101    11111110 -1      00000001    11111110    11111111  0      00000000                00000000  1      00000001                00000001  2      00000010                00000010  3      00000011                00000011  To write down that range of numbers' two's complements in  bits, we wrote 's.  Remember to use  bits rather than  in your solution.  The logic is the same, so the  bit representation was chosen to reduce apparent complexity in the example.   Function Description  Complete the twosCompliment function in the editor below.  It should return an integer.   twosCompliment has the following parameter(s):  - a: an integer, the range minimum  - b: an integer, the range maximum   Input Format The first line contains an integer , the number of test cases.    Each of the next  lines contains two space-separated integers,  and .   Constraints   Output Format For each test case, print the number of 's in the -bit 's complement representation for integers in the inclusive range from  to  on a new line. Sample Input 0 Sample Output 0 Explanation 0 Test case 0  -2 has 31 ones  -1 has 32 ones  0 has 0 ones  31+32+0 = 63  Test case 1  -3 has 31 ones  -2 has 31 ones  -1 has 32 ones  0 has 0 ones  1 has 1 ones  2 has 1 ones  3 has 2 ones  4 has 1 ones  31+31+32+0+1+1+2+1 = 99  Test case 2  -1 has 32 ones  0 has 0 ones  1 has 1 ones  2 has 1 ones  3 has 2 ones  4 has 1 ones  32+0+1+1+2+1 = 37   Sample Input 1 Sample Output 1 Explanation 1 Test case 0  -5 has 31 ones  -4 has 30 ones  -3 has 31 ones  -2 has 31 ones  -1 has 32 ones  0 has 0 ones  31+30+31+31+32+0 = 155  Test case 1  1 has 1 ones  2 has 1 ones  3 has 2 ones  4 has 1 ones  5 has 2 ones  6 has 2 ones  7 has 3 ones  1+1+2+1+2+2+3 = 12  Test case 2  -6 has 30 ones  -5 has 31 ones  -4 has 30 ones  -3 has 31 ones  30+31+30+31 = 122  Test case 3  3 has 2 ones  4 has 1 ones  5 has 2 ones  6 has 2 ones  2+1+2+2 = 7
__label__Bit Let a and b be binary numbers of length n (MSB to the left). The following commands may be performed: set_a idx x: Set  to , where  and   is  least significant bit of .   set_a idx x set_b idx x: Set  to , where  and   is  least significant bit of .   set_b idx x get_c idx: Print , where  and .   get_c idx Given , and a list of commands, create a string made of the results of each  call, the only command that produces output.  For example,  and  so the length of the numbers is .  Print an answer string that contains the results of all commands on one line.  A series of commands and their results follow:  Starting  ans = '' (empty string)  a   b  000 111  set_a 1 1  010 111  set_b 0 1  010 111  get_c 3  a + b = 1001  ans = '1'  010 111  get_c 4  a + b = 01001  ans = '10'    Starting  ans = '' (empty string)  a   b  000 111  set_a 1 1  010 111  set_b 0 1  010 111  get_c 3  a + b = 1001  ans = '1'  010 111  get_c 4  a + b = 01001  ans = '10'   Note: When the command is get_c 4,   had to be padded to the left with a  to be long enough to return a value.   get_c 4 Function Description  Complete the changeBits function in the editor below.  For each get_c command, it should print either a 0 or a 1 without a newline until all commands have been processed. At that point, add a newline.    get_c 0 1 changeBits has the following parameters:  - a, b: two integers represented as binary strings  - queries[queries[0]-queries[n-1]]: an array of query strings in the format described   Input Format The first line of input contains two space-separated integers,  and , the length of the binary representations of  and , and the number of commands, respectively.  The second and third lines each contain a string representation of  and .  The following  lines each contain a command string  as described above.   Constraints     Output Format For each query of the type , output a single digit 0 or 1. Output must be placed on a single line. Sample Input 0 Sample Output 0 Explanation 0 set_a 0 1 sets 00000 to 00001 C = A + B = 00001 + 11111 = 100000, so get_c[5] = 1 from the above computation get_c[1] = 0 set_b 2 0 sets 11111 to 11011 C = A + B = 00001 + 11011 = 011100, so get_c[5]  = 0 The output is hence concatenation of 1, 0 and 0  = 100
__label__Bit __label__Tree Xorq has invented an encryption algorithm which uses bitwise XOR operations extensively. This encryption algorithm uses a sequence of non-negative integers  as its key. To implement this algorithm efficiently, Xorq needs to find maximum value of  for given integers ,  and , such that, . Help Xorq implement this function.   For example, , ,  and .  We test each  for all values of  between  and  inclusive: j   x[j]    x[j]^4 1   3       7 2   5       1 3   9       13  Our maximum value is . Function Description Complete the xorKey function in the editor below.  It should return an integer array where each value is the response to a query. xorKey has the following parameters:   x: a list of integers   queries: a two dimensional array where each element is an integer array that consists of  for the  query at indices  and  respectively.   Input Format The first line contains an integer , the number of test cases.  The first line of each test case contains two space-separated integers  and , the size of the integer array  and the number of queries against the test case.  The next line contains  space-separated integers .  Each of next  lines describes a query which consists of three integers  and .    Constraints         Output Format For each query, print the maximum value for , such that,  on a new line.   Sample Input 0 Sample Output 0 Explanation 0 First Query (10 6 10): .  The maximum is .   First Query (10 6 10): .  The maximum is .   Second Query (1023 7 7):   Second Query (1023 7 7):   Third Query (33 5 8):   Third Query (33 5 8):   Fourth Query (182 5 10):  Fourth Query (182 5 10):
__label__Bit Consider an array of  binary integers (i.e., 's and 's) defined as . Let  be the bitwise XOR of all elements in the inclusive range between index  and index  in array . In other words, . Next, we'll define another function, :   Given array  and  independent queries, perform each query on  and print the result on a new line. A query consists of three integers, , , and , and you must find the maximum possible  you can get by changing at most  elements in the array from  to  or from  to .  Note: Each query is independent and considered separately from all other queries, so changes made in one query have no effect on the other queries.  Input Format The first line contains two space-separated integers denoting the respective values of  (the number of elements in array ) and  (the number of queries).  The second line contains  space-separated integers where element  corresponds to array element  .  Each line  of the  subsequent lines contains  space-separated integers, ,  and  respectively, describing query  . Constraints     Subtask  and  for  of the maximum score ,  and  for  of the maximum score Output Format Print  lines where line  contains the answer to query  (i.e., the maximum value of  if no more than  bits are changed). Sample Input 3 2 0 0 1 0 2 1 0 1 0  Sample Output 4 0  Explanation Given , we perform the following  queries: If we change  to , then we get  and . In this query, .
__label__Bit Consider an array, , of  integers ().  We take all consecutive subsequences of integers from the array that satisfy the following:   For example, if  our subsequences will be:          For each subsequence, we apply the bitwise XOR () operation on all the integers and record the resultant value. Since there are  subsequences, this will result in  numbers.    Given array , find the XOR sum of every subsequence of  and determine the frequency at which each number occurs. Then print the number and its respective frequency as two space-separated values on a single line.   Input Format The first line contains an integer, , denoting the size of the array.  Each line  of the  subsequent lines contains a single integer describing element . Constraints   Output Format Print  space-separated integers on a single line. The first integer should be the number having the highest frequency, and the second integer should be the number's frequency (i.e., the number of times it appeared). If there are multiple numbers having maximal frequency, choose the smallest one. Sample Input 0 Sample Output 0 Explanation 0 Let's find the XOR sum for all consecutive subsequences. We'll refer to the frequency of some number  as , and keep a running sum for each frequency:   , frequencies:  , frequencies:  and  , frequencies:  and  , frequencies: , , and  , frequencies: , , and  , frequencies: , , , and  , frequencies: , , , and  , frequencies: , , , and   , frequencies: , , , and   , frequencies: , , , and   Our maximal frequency is , and the integers , , and  all have this frequency. Because more than one integer has this frequency, we choose the smallest one, which is . We then print the respective smallest number having the maximal frequency and the maximal frequency as a single line of space-separated values.
__label__Bit Consider the following pseudocode, run on an array  of length : Given the values of  and array , compute and print the final value of  after the pseudocode above terminates; if the loop will never terminate, print -1 instead. -1 Input Format The first line contains a single integer, , denoting the length of array .  The second line contains  space-separated integers describing the respective values of . Constraints    Output Format Print the final value of  after the pseudocode terminates; if the loop will never terminate, print -1 instead. -1 Sample Input 0 Sample Output 0 Explanation 0 After the first loop,  becomes . After the second loop, the array only contains 's and 's. After the third loop, the array only contains 's. After the fourth loop, the array is empty. Because the value of  is incremented after each loop,  at the time the loop terminates. Thus, we print 4 as our answer. 4
__label__Bit You are given a string , consisting of  small latin letters 'a' and 'b'. You are also given  queries to process. The queries are as follows: a b C   : all the symbols in the string, starting at the , ending at the  become equal to ;   S    : swap two consecutive fragments of the string, where the first is denoted by a substring starting from  ending at  and the second is denoted by a substring starting at  ending at ;    R  : reverse the fragment of the string that starts at the  symbol and ends at the  one;   W  : output the substring of the string that starts at the  symbol and ends at the  one;   H   : output the Hamming distance between the consecutive substrings that starts at  and  respectively and have the length of .   Everything is 1-indexed here. Input Format The first line of input contains a single integer   the length of the string.  The second line contains the initial string  itself.  The third line of input contains a single integer   the number of queries.  Then, there are  lines, each denotes a query of one of the types above.   Constraints     Total number of characters printed in W-type queries will not exceed   For C-type, R-type, W-type queries: ;  equals either a, or b  For S-type queries:   For H-type queries: ; ; .   a b Output Format For each query of the type W or the type H output an answer on the separate line of output. W H Sample Input 0 Sample Output 0 Explanation 0 Initial String - aabbbabbab
__label__Mathematics __label__Bit Some scientists are working on protein recombination, and during their research, they have found a remarkable fact: there are 4 proteins in the protein ring that mutate after every second according to a fixed pattern. For simplicity, proteins are called  (you know, protein names can be very complicated). A protein mutates into another one depending on itself and the protein right after it. Scientists determined that the mutation table goes like this:       A   B   C   D     _   _   _   _ A|  A   B   C   D B|  B   A   D   C C|  C   D   A   B D|  D   C   B   A  Here rows denote the protein at current position, while columns denote the protein at the next position. And the corresponding value in the table denotes the new protein that will emerge. So for example, if protein i is A, and protein i + 1 is B, protein i will change to B. All mutations take place simultaneously. The protein ring is seen as a circular list, so last protein of the list mutates depending on the first protein.  Using this data, they have written a small simulation software to get mutations second by second. The problem is that the protein rings can be very long (up to 1 million proteins in a single ring) and they want to know the state of the ring after upto  seconds. Thus their software takes too long to report the  results. They ask you for your help.   Input Format Input contains 2 lines.  First line has 2 integers  and ,  being the length of the protein ring and  the desired number of seconds.  Second line contains a string of length  containing uppercase letters ,,  or  only, describing the ring.  Constraints     Output Format Output a single line with a string of length , describing the state of the ring after  seconds. Sample Input 0 Sample Output 0 Explanation 0 The complete sequence of mutations is: AAADD AADAD ADDDD DAAAD DAADA DADDD DDAAA ADAAD DDADD ADDAA DADAA DDDAD AADDA ADADA DDDDA
__label__Dynamic-Programming There are N users registered on a website CuteKittens.com. Each of them has a unique password represented by pass[1], pass[2], ..., pass[N]. As this a very lovely site, many people want to access those awesomely cute pics of the kittens. But the adamant admin does not want the site to be available to the general public, so only those people who have passwords can access it. Yu, being an awesome hacker finds a loophole in the password verification system. A string which is a concatenation of one or more passwords, in any order, is also accepted by the password verification system. Any password can appear  or more times in that string. Given access to each of the  passwords, and also have a string loginAttempt$ string can be created by concatenating password strings, it is accepted. For example, if there are 3 users with , then some of the valid combinations are abra , kaabra , kadabraka , kadabraabra  and so on.  Supplying abra ka dabra, concatenated, passes authentication. abra kaabra kadabraka kadabraabra abra ka dabra Function Description Complete the passwordCracker function in the editor below.  It should return the passwords as a single string in the order required for the password to be accepted, each separated by a space. If it is not possible to form the string, return the string WRONG PASSWORD.   WRONG PASSWORD passwordCracker has the following parameters:  - passwords: a list of password strings  - loginAttempt: the string to attempt to create   Input Format The first line contains an integer t, the total number of test cases.   Each of the next  sets of three lines is as follows:  - The first line of each test case contains n, the number of users with passwords.  - The second line contains n space-separated strings, passwords[i], that represent  the passwords of each user.  - The third line contains a string, loginAttempt, which Yu must test for acceptance.   Constraints       , where     loginAttempt and passwords[i] contain only lowercase latin characters ('a'-'z'). Output Format For each valid string, Yu has to print the actual order of passwords, separated by space, whose concatenation results into loginAttempt. If there are multiple solutions, print any of them.  If loginAttempt can't be accepted by the password verification system, then print WRONG PASSWORD. WRONG PASSWORD Sample Input 0 Sample Output 0 Explanation 0 Sample Case #00: "wedowhatwemustbecausewecan" is the concatenation of passwords {"we", "do", "what", "we", "must", "because", "we", "can"}. That is  "wedowhatwemustbecausewecan" "we" "do" "what" "we" "must" "because" "we" "can" loginAttempt = pass[5] + pass[3] + pass[6] + pass[5] +  pass[4] + pass[1] + pass[5] + pass[2]  Note that any password can repeat any number of times.   Sample Case #01: We can't create string "helloworld" using the strings {"hello", "planet"}.   "helloworld" "hello" "planet" Sample Case #02: There are two ways to create loginAttempt ("abcd"). Both pass[2] = "abcd" and pass[1] + pass[3] = "ab cd" are valid answers. "abcd" pass[2] = "abcd" pass[1] + pass[3] = "ab cd" Sample Input 1 Sample Output 1
__label__Dynamic-Programming You have a pile of  stones that you want to split into multiple piles, as well as a set, , of  distinct integers. We define a move as follows: First, choose a pile of stones. Let's say that the chosen pile contains  stones.  Next, look for some  such that  and  is divisible by  (i.e.,  is a factor of ); if such an  exists, you can split the pile into  equal smaller piles. You are given  queries where each query consists of  and . For each query, calculate the maximum possible number of moves you can perform and print it on a new line. Input Format The first line contains an integer, , denoting the number of queries. The  subsequent lines describe each query in the following format: The first line contains two space-separated integers describing the respective values of  (the size of the initial pile in the query) and  (the size of the set in the query). The second line contains  distinct space-separated integers describing the values in set . Constraints      Subtask  for  of the maximum score. Output Format For each query, calculate the maximum possible number of moves you can perform and print it on a new line. Sample Input 0 Sample Output 0 Explanation 0 Initially there is a pile with  stones:   You can make a maximal  moves, described below: Select  from  and split it into  equal piles of size  to get:    Select  from  and split a pile of size  into  equal piles of size  to get:   Select  from  and split a pile of size  into  equal piles of size  to get:   Repeat the previous move again on another pile of size  to get:   Repeat the previous move again on another pile of size  to get:   Repeat the move again on the last pile of size  to get:   As there are no more available moves, we print  (the number of moves) on a new line.
__label__Game-Theory Chess is a very popular game played by hundreds of millions of people. Nowadays, we have chess engines such as Stockfish and Komodo to help us analyze games. These engines are very powerful pieces of well-developed software that use intelligent ideas and algorithms to analyze positions and sequences of moves, as well as to find tactical ideas. Consider the following simplified version of chess: Board:  It's played on a  board between two players named Black and White. Rows are numbered from  to , where the top row is  and the bottom row is .   Columns are lettered from  to , where the leftmost column is  and the rightmost column is . It's played on a  board between two players named Black and White. Rows are numbered from  to , where the top row is  and the bottom row is .   Columns are lettered from  to , where the leftmost column is  and the rightmost column is . Pieces and Movement:  White initially has  pieces and Black initially has  pieces. There are no Kings on the board. Each player initially has exactly  Queen, at most  Pawns, at most  Rooks, and at most  minor pieces (i.e., a Bishop and/or Knight). White's Pawns move up the board, while Black's Pawns move down the board. Each move made by any player counts as a single move. Each piece's possible moves are the same as in classical chess, with the following exceptions: Pawns cannot move two squares forward. The en passant move is not possible. Promotion: Pawns promote to either a Bishop, Knight, or Rook when they reach the back row (promotion to a Queen is not allowed).  The players must perform promotions whenever possible. This means White must promote their Pawns when they reach any cell in the top row, and Black must promote their Pawns when they reach any cell in the bottom row.  White initially has  pieces and Black initially has  pieces. There are no Kings on the board. Each player initially has exactly  Queen, at most  Pawns, at most  Rooks, and at most  minor pieces (i.e., a Bishop and/or Knight). White's Pawns move up the board, while Black's Pawns move down the board. Each move made by any player counts as a single move. Each piece's possible moves are the same as in classical chess, with the following exceptions: Pawns cannot move two squares forward. The en passant move is not possible. Pawns cannot move two squares forward. The en passant move is not possible. Promotion: Pawns promote to either a Bishop, Knight, or Rook when they reach the back row (promotion to a Queen is not allowed).  The players must perform promotions whenever possible. This means White must promote their Pawns when they reach any cell in the top row, and Black must promote their Pawns when they reach any cell in the bottom row.  Pawns promote to either a Bishop, Knight, or Rook when they reach the back row (promotion to a Queen is not allowed).  The players must perform promotions whenever possible. This means White must promote their Pawns when they reach any cell in the top row, and Black must promote their Pawns when they reach any cell in the bottom row.  Objective:  The goal of the game is to capture the opponent’s Queen without losing your own. There will never be a draw or tie scenario like you might see in classical chess. The goal of the game is to capture the opponent’s Queen without losing your own. There will never be a draw or tie scenario like you might see in classical chess. Given  and the layout of pieces for  games, implement a very basic engine for our simplified version of chess that determines whether or not White can win in  moves (regardless of how Black plays) if White always moves first. For each game, print YES on a new line if White can win in  moves; otherwise, print NO. YES NO Input Format The first line contains an integer, , denoting the number of games. The subsequent lines describe each game in the following format: The first line contains three space-separated integers describing the respective values of  (the number of white pieces),  (the number of black pieces), and  (the maximum number of moves we want to know if White can win in). The  subsequent lines describe each chess piece in the form t c r, where  is a character  denoting the type of piece (where  is Queen,  is Knight,  is Bishop,  is Rook, and  is a Pawn), and  and  denote the respective column and row on the board where the figure is located (where  and ). These inputs are  given as follows:  Each of the first  lines describes the type and location of a White piece. Each of the subsequent  lines describes the type and location of a Black piece. t c r Each of the first  lines describes the type and location of a White piece. Each of the subsequent  lines describes the type and location of a Black piece. Constraints       Each player has exactly  Queen, at most  Pawns, at most  Rooks, and at most  minor pieces (i.e., a Bishop and/or Knight). It is guaranteed that the initial location of each chess piece is distinct. No pawn is initially placed in a row where it would promote. Output Format For each of the  games of simplified chess, print whether or not White can win in  moves on a new line. If it's possible, print YES; otherwise, print NO instead. YES NO Sample Input 0 Sample Output 0 Explanation 0 We play the following  game of simplified chess:  White wins by moving their Pawn to  and capturing Black's Queen, so we print YES on a new line. YES
__label__Game-Theory __label__Game-Theory Two players called  and  are playing a game with a starting number of stones. Player  always plays first, and the two players move in alternating turns. The game's rules are as follows: In a single move, a player can remove either , , or  stones from the game board.  If a player is unable to make a move, that player loses the game. Given the starting number of stones, find and print the name of the winner.   is named First and  is named Second.  Each player plays optimally, meaning they will not make a move that causes them to lose the game if a winning move exists. First Second For example, if ,  can make the following moves:    removes  stones leaving .  will then remove  stones and win.  removes  stones leaving .  cannot move and loses.  would make the second play and win the game. Function Description Complete the gameOfStones function in the editor below.  It should return a string, either First or Second.   First Second gameOfStones has the following parameter(s): n: an integer that represents the starting number of stones Input Format The first line contains an integer , the number of test cases.  Each of the next  lines contains an integer , the number of stones in a test case. Constraints  Output Format On a new line for each test case, print First if the first player is the winner.  Otherwise print Second. First Second Sample Input 8 1 2 3 4 5 6 7 10  Sample Output Second First First First First First Second First  Explanation In the sample, we have  testcases.   If ,  can't make any moves and loses the game. If ,  removes  stones and wins the game. If ,  removes  stones in their first move, leaving  stone on the board and winning the game.   If ,  removes  stones in their first move, leaving  stone on the board and winning the game.   If ,  removes all  stones from the game board, winning the game.   If ,  removes  stones in their first move, leaving  stone on the board and winning the game.   If ,  can make any of the following three moves: Remove  stones, leaving  stones on the board.  then removes  stones, winning the game.   Remove  stones, leaving  stones on the board.  then removes  stones, leaving  stone left on the board and winning the game.   Remove  stones, leaving  stones on the board.  then removes the  remaining stones and wins the game.   All possible moves result in  winning. If ,  can remove either  or  stones to win the game.
__label__Game-Theory Two players are playing a game of Tower Breakers! The rules of the game are as follows:   - Player  always moves first, and both players always play optimally.  - Initially there are  towers, where each tower is of height .  - The players move in alternating turns. In each turn, a player can choose a tower of height  and reduce its height to , where  and  evenly divides .  - If the current player is unable to make a move, they lose the game.    Given the values of  and , determine which player will win. If the first player wins, return .  Otherwise, return .   For example, there are  towers, each  high.  Player  can remove  pieces from a tower to leave  as .  Player  can also remove  pieces leaving .  Let Player  remove .  Player  matches the move.  Now Player  has only one move: remove  pieces leaving .  Player  matches again leaving Player  with no move. Function Description  Complete the towerBreakers function in the editor below.  It should return an integer that represents the winning player.   towerBreakers has the following paramter(s):   n: an integer that represents the number of towers   m: an integer that represents the height of each tower   Input Format The first line contains a single integer , the number of test cases.  Each of the next  lines describes a test case in the form of  space-separated integers,  and .   Constraints   Output Format For each test case, if the first player wins, return .  Otherwise, return . Sample Input 2 2 2 1 4  Sample Output 2 1  Explanation We'll refer to player  as  and player  as  In the first test case,  chooses one of the two towers and reduces it to . Then  reduces the remaining tower to a height of . As both towers now have height ,  cannot make a move so  is the winner. In the second test case, there is only one tower of height .  can reduce it to a height of either  or .  chooses  as both players always choose optimally. Because  has no possible move,  wins.
__label__Game-Theory __label__Game-Theory Two players are playing a game on a  chessboard. The rules of the game are as follows: The game starts with a single coin located at some  coordinates. The coordinates of the upper left cell are , and of the lower right cell are . The game starts with a single coin located at some  coordinates. The coordinates of the upper left cell are , and of the lower right cell are . In each move, a player must move the coin from cell  to one of the following locations:        Note: The coin must remain inside the confines of the board. In each move, a player must move the coin from cell  to one of the following locations:        Note: The coin must remain inside the confines of the board. Beginning with player 1, the players alternate turns. The first player who is unable to make a move loses the game. Beginning with player 1, the players alternate turns. The first player who is unable to make a move loses the game. The figure below shows all four possible moves using an  board for illustration:  Given the initial coordinates of the players' coins, assuming optimal play, determine which player will win the game.  Function Description Complete the chessboardGame function in the editor below.  It should return a string, either First or Second. First Second chessboardGame has the following parameter(s):   x: an integer that represents the starting column position    y: an integer that represents the starting row position   Input Format The first line contains an integer , the number of test cases.  Each of the next  lines contains  space-separated integers  and . Constraints   Output Format On a new line for each test case, print  if the first player is the winner.  Otherwise, print . Sample Input 3 5 2 5 3 8 8  Sample Output Second First First  Explanation In the first case, player1 starts at the red square and can move to any of the blue squares.  Regardless of which one is chosen, the player 2 can move to one of the green squares to win the game.  In the second case, player 1 starts at the red square and can move to any of the blue squares or the purple one.  Moving to the purple one limits player 2 to the yellow square.  From the yellow square, player 1 moves to the green square and wins.
__label__Game-Theory Nim is the most famous two-player algorithm game. The basic rules for this game are as follows: The game starts with a number of piles of stones.  The number of stones in each pile may not be equal. The players alternately pick up  or more stones from  pile The player to remove the last stone wins. For example, there are  piles of stones having  stones in them.  Play may proceed as follows: Player  Takes           Leaving                         pile=[3,2,4] 1       2 from pile[1]  pile=[3,4] 2       2 from pile[1]  pile=[3,2] 1       1 from pile[0]  pile=[2,2] 2       1 from pile[0]  pile=[1,2] 1       1 from pile[1]  pile=[1,1] 2       1 from pile[0]  pile=[0,1] 1       1 from pile[1]  WIN  Given the value of  and the number of stones in each pile, determine the game's winner if both players play optimally. Function Desctription  Complete the nimGame function in the editor below.  It should return a string, either First or Second.   First Second nimGame has the following parameter(s):   pile: an integer array that represents the number of stones in each pile   Input Format The first line contains an integer, , denoting the number of games they play. Each of the next  pairs of lines is as follows:   The first line contains an integer , the number of piles. The next line contains  space-separated integers , the number of stones in each pile. Constraints    Player 1 always goes first. Output Format For each game, print the name of the winner on a new line (i.e., either First or Second). First Second Sample Input 2 2 1 1 3 2 1 4  Sample Output Second First  Explanation In the first case, there are  piles of  stones.  Player  has to remove one pile on the first move.  Player  removes the second for a win. In the second case, there are  piles of  stones.  If player  removes any one pile, player  can remove all but one of another pile and force a win.  If player  removes less than a pile, in any case, player  can force a win as well, given optimal play.
__label__Game-Theory __label__Game-Theory Two people are playing game of Misère Nim. The basic rules for this game are as follows: The game starts with  piles of stones indexed from  to . Each pile  (where ) has  stones. The players move in alternating turns. During each move, the current player must  remove one or more stones from a single pile.  The player who removes the last stone loses the game. Given the value of  and the number of stones in each pile, determine whether the person who wins the game is the first or second person to move. If the first player to move wins, print First on a new line; otherwise, print Second. Assume both players move optimally.  First Second Input Format The first line contains an integer, , denoting the number of test cases.  Each of the  subsequent lines defines a test case. Each test case is described over the following two lines: An integer, , denoting the number of piles.  space-separated integers, , where each  describes the number of stones at pile . Constraints    Output Format For each test case, print the name of the winner on a new line (i.e., either First or Second). First Second Sample Input 2 2 1 1 3 2 1 3   Sample Output First Second  Explanation In the first testcase, the first player removes 1 stone from the first pile and then the second player has no moves other than removing the only stone in the second pile. So first wins.   In the second testcase, the series of moves can be depicted as:  In every possible move of first player we see that the last stone is picked by him, so second player wins.
__label__Game-Theory __label__Game-Theory Two people are playing Nimble! The rules of the game are: The game is played on a line of  squares, indexed from  to . Each square  (where ) contains  coins. For example:   The players move in alternating turns. During each move, the current player must  remove exactly  coin from square  and move it to square  if and only if . The game ends when all coins are in square  and nobody can make a move. The first player to have no available move loses the game. Given the value of  and the number of coins in each square, determine whether the person who wins the game is the first or second person to move. Assume both players move optimally. Input Format The first line contains an integer, , denoting the number of test cases.  Each of the  subsequent lines defines a test case. Each test case is described over the following two lines: An integer, , denoting the number of squares.  space-separated integers, , where each  describes the number of coins at square . Constraints    Output Format For each test case, print the name of the winner on a new line (i.e., either  or ). Sample Input 2 5 0 2 3 0 6 4 0 0 0 0  Sample Output First Second  Explanation Explanation for  testcase:  The first player will shift one coin from  to . Hence, the second player is left with the squares . Now whatever be his/her move is, the first player can always nullify the change by shifting a coin to the same square where he/she shifted it. Hence the last move is always played by the first player, so he wins.  Exlanation for  testcase:  There are no coins in any of the squares so the first player cannot make any move, hence second player wins.
__label__Game-Theory Alice and Bob invented the following silly game: The game starts with an integer, , that's used to build a  of  distinct integers in the inclusive range from  to  (i.e., ). Alice always plays first, and the two players move in alternating turns. During each move, the current player chooses a prime number, , from . The player then removes  and all of its multiples from . The first player to be unable to make a move loses the game. Alice and Bob play  games. Given the value of  for each game, print the name of the game's winner on a new line. If Alice wins, print Alice; otherwise, print Bob. Alice Bob Note: Each player always plays optimally, meaning they will not make a move that causes them to lose the game if some better, winning move exists. Input Format The first line contains an integer, , denoting the number of games Alice and Bob play.  Each line  of the  subsequent lines contains a single integer, , describing a game. Constraints    Subtasks  for  of the maximum score Output Format For each game, print the name of the winner on a new line. If Alice wins, print Alice; otherwise, print Bob. Alice Bob Sample Input 0 Sample Output 0 Explanation 0 Alice and Bob play the following  games: We are given , so . Because Alice has no valid moves (there are no prime numbers in the set), she loses the game. Thus, we print Bob on a new line. Bob We are given , so . Alice chooses the prime number  and deletes it from the set, which becomes . Because Bob has no valid moves (there are no prime numbers in the set), he loses the game. Thus, we print Alice on a new line. Alice We are given , so . Alice chooses the prime number  and deletes the numbers  and  from the set, which becomes . Now there are two primes left,  and . Bob can remove either prime from the set, and then Alice can remove the remaining prime. Because Bob is left without a final move, Alice will always win. Thus, we print Alice on a new line. Alice
__label__Game-Theory __label__Game-Theory Poker Nim is another -player game that's a simple variation on a Nim game. The rules of the games are as follows: The game starts with  piles of chips indexed from  to . Each pile  (where ) has  chips. The players move in alternating turns. During each move, the current player must perform either of the following actions: Remove one or more chips from a single pile.  Add one or more chips to a single pile.      At least  chip must be added or removed during each turn. The players move in alternating turns. During each move, the current player must perform either of the following actions: Remove one or more chips from a single pile.  Add one or more chips to a single pile.      At least  chip must be added or removed during each turn. To ensure that the game ends in finite time, a player cannot add chips to any pile  more than  times. The player who removes the last chip wins the game. Given the values of , , and the numbers of chips in each of the  piles, determine whether the person who wins the game is the first or second person to move. Assume both players move optimally. Input Format The first line contains an integer, , denoting the number of test cases.  Each of the  subsequent lines defines a test case. Each test case is described over the following two lines: Two space-separated integers,  (the number of piles) and  (the maximum number of times an individual player can add chips to some pile ), respectively.  space-separated integers, , where each  describes the number of chips at pile . Constraints    Output Format For each test case, print the name of the winner on a new line (i.e., either  or ). Sample Input 2 2 5 1 2 3 5 2 1 3  Sample Output First Second
__label__Game-Theory Two players (numbered  and ) are playing a game of Tower Breakers! The rules of the game are as follows: Player  always moves first, and both players always move optimally. Initially there are  towers of various heights. The players move in alternating turns. In each turn, a player can choose a tower of height  and reduce its height to , where  and  evenly divides . If the current player is unable to make any move, they lose the game. Given the value of  and the respective height values for all towers, can you determine who will win? If the first player wins, print ; otherwise, print . Input Format The first line contains an integer, , denoting the number of test cases.  Each of the  subsequent lines defines a test case. Each test case is described over the following two lines: An integer, , denoting the number of towers.  space-separated integers, , where each  describes the height of tower . Constraints    Output Format For each test case, print a single integer denoting the winner (i.e., either  or ) on a new line. Sample Input 2 2  1 2 3  1 2 3  Sample Output 1 2  Explanation Test Case 0:  Player  reduces the second tower to height  and subsequently wins. Test Case 1:  There are two possible moves: Reduce the second tower to   Reduce the third tower to .  Whichever move player  makes, player  will make the other move. Thus, player  wins.
__label__Game-Theory Two players (numbered  and ) are playing a game of Tower Breakers! The rules of the game are as follows: Player  always moves first. Initially there are  towers of various heights. The players move in alternating turns. In each turn, a player must choose a tower of height  and break it down into  towers, each of height . The numbers  and  must satisfy  and .   If the current player is unable to make any move, they lose the game. Given the value of  and the respective height values for all towers, can you determine who will win, assuming both players always move optimally? If the first player wins, print ; otherwise, print . Input Format The first line contains an integer, , denoting the number of test cases.  The  subsequent lines define the test cases. Each test case is described by two lines: An integer, , denoting the number of towers.  space-separated integers, , where each  describes the height of tower . Constraints    Output Format For each test case, print a single integer denoting the winner (i.e., either  or ) on a new line. Sample Input 2 2  1 2 3  1 2 3  Sample Output 1 2  Explanation In the first test case, the first player simply breaks down the second tower of height  into two towers of height  and wins. In the second test case, there are only two possible moves: Break the second tower into  towers of height . Break the third tower into  towers of height .  Whichever move player  makes, player  can make the other move and win the game.
__label__Game-Theory Nim is a famous game in which two players take turns removing items from  distinct piles. During each turn, a player must remove one or more items from a single, non-empty pile. The winner of the game is whichever player removes the last item from the last non-empty pile. John and Kate modified Nim by adding the following rule, which they call a Zero-Move: For each non-empty pile, either player can remove  items from that pile and have it count as their move; however, this move can only be performed once per pile by either player. For example, let's say pile  initially has  items in it. If John decides to use a Zero-Move on pile , then neither John nor Kate can perform another Zero-Move on pile ; that said, either player is free to perform a Zero-Move on any other non-empty pile that hasn't had a Zero-Move performed on it yet. John and Kate play  games of Zero-Move Nim. Given the number of items in each pile for each game, determine whether or not John can win the game if he always moves first and each player always moves optimally (i.e., never makes a move that causes them to lose if some better, winning move exists). For each game, print W on a new line if John can win; otherwise, print L instead. W L Input Format The first line contains an integer, , denoting the number of games. The  subsequent lines describe each game over two lines: The first line contains an integer, , denoting the number of heaps. The second line contains  space-separated integers describing .  Constraints       Subtasks  For  of the test cases,   For  of the test cases,  Output Format For each game, print W on a new line if John will win; otherwise, print L instead. W L Sample Input 0 Sample Output 0 Explanation 0 John and Kate play the following  games: We have two piles,  and . John removes  item from , so . Now that there is only  item in each pile, gameplay can proceed in either of the following ways: Kate removes the last object from one pile, then John removes the last object from the other pile. Kate uses a Zero-Move on one of the piles, and John uses a Zero-Move on the other pile. Next, Kate must take the last object from one pile, at which point John removes the last object from the other pile.           Because John always wins in either scenario, we print W on a new line. We have two piles,  and . John removes  item from , so . Now that there is only  item in each pile, gameplay can proceed in either of the following ways: Kate removes the last object from one pile, then John removes the last object from the other pile. Kate uses a Zero-Move on one of the piles, and John uses a Zero-Move on the other pile. Next, Kate must take the last object from one pile, at which point John removes the last object from the other pile.           Because John always wins in either scenario, we print W on a new line. W John cannot win this game because the two piles are of equal size and Kate has an opportunity to counter any move he makes by performing the same action. Consider the following scenarios: If John uses a Zero-Move on one pile, Kate can use a Zero-Move on the other pile (meaning the piles still have the same configuration after both players move). If John removes one element from a pile, Kate can remove one element from the other pile so that both remaining piles contain one element when John takes his next turn. He would then be forced to empty one of the piles, leaving Kate to make the winning move by emptying the last pile. If John removes both elements from one of the piles, Kate can remove both elements from the other pile and win the game.       Because John always loses this game, we print L on a new line. John cannot win this game because the two piles are of equal size and Kate has an opportunity to counter any move he makes by performing the same action. Consider the following scenarios: If John uses a Zero-Move on one pile, Kate can use a Zero-Move on the other pile (meaning the piles still have the same configuration after both players move). If John removes one element from a pile, Kate can remove one element from the other pile so that both remaining piles contain one element when John takes his next turn. He would then be forced to empty one of the piles, leaving Kate to make the winning move by emptying the last pile. If John removes both elements from one of the piles, Kate can remove both elements from the other pile and win the game.       Because John always loses this game, we print L on a new line. L
__label__Game-Theory __label__Game-Theory Two players are playing a game on a  chessboard. The rules of the game are as follows: The game starts with  coins located at one or more  coordinates on the board (a single cell may contain more than one coin). The coordinate of the upper left cell is , and the coordinate of the lower right cell is . In each move, a player must move a single coin from some cell  to one of the following locations:       .  Note: The coin must remain inside the confines of the board. In each move, a player must move a single coin from some cell  to one of the following locations:       .  Note: The coin must remain inside the confines of the board. The players move in alternating turns. The first player who is unable to make a move loses the game. The players move in alternating turns. The first player who is unable to make a move loses the game. The figure below shows all four possible moves:  Note: While the figure shows a  board, this game is played on a  board. Given the value of  and the initial coordinate(s) of  coins, determine which player will win the game. Assume both players always move optimally. Input Format The first line contains an integer, , denoting the number of test cases.  Each test case is defined as follows over the subsequent lines: The first line contains an integer, , denoting the number of coins on the board. Each line  (where ) of the  subsequent lines contains  space-separated integers describing the respective values of  and  of the coordinate where coin  is located. Note: Recall that a cell can have more than one coin (i.e., any cell can have  to  coins in it at any given time). Constraints   , where . Output Format On a new line for each test case, print  if the first player is the winner; otherwise, print . Sample Input 2 3 5 4 5 8 8 2 6 7 1 7 2 7 3 7 4 7 4 7 4  Sample Output First Second
__label__Game-Theory __label__Game-Theory Two HackerRank staffers found a secret room with a mysterious  square board and decided to play a game with it. The game has the following rules: At the beginning of the game, the players write a single digit (given as input) ranging from  to  in each  cell composing the  square board.  The players move in alternating turns. In each move, the current player performs the following actions: Chooses a board that has at least one non-prime number written on it and has more than one cell (i.e., dimensions ).  Cuts the chosen board into  smaller boards by breaking it along any horizontal or vertical line at the edge of a cell. Note: Although the game starts with one  board, that board is split in two during each move. At the beginning of the  move, a player can choose any one of the  pieces of the original board (as long as it can have a legal move performed on it). The players move in alternating turns. In each move, the current player performs the following actions: Chooses a board that has at least one non-prime number written on it and has more than one cell (i.e., dimensions ).  Cuts the chosen board into  smaller boards by breaking it along any horizontal or vertical line at the edge of a cell. Note: Although the game starts with one  board, that board is split in two during each move. At the beginning of the  move, a player can choose any one of the  pieces of the original board (as long as it can have a legal move performed on it). The game ends when there are no more cuttable boards (i.e., there are  boards, or all boards have only prime numbers written on them). The first player who is unable to make a move loses. The game ends when there are no more cuttable boards (i.e., there are  boards, or all boards have only prime numbers written on them). The first player who is unable to make a move loses. Given the value of  and the respective numbers written in each  cell of the board, determine whether the person who wins the game is the first or second person to move. Assume both players move optimally. Time Limit Python: 18 seconds Pypy2: 5 seconds For other languages, the time limit is standard. Input Format The first line contains an integer, , denoting the number of test cases.  Each test case is defined as follows over the subsequent lines: An integer, , denoting the length of each of the board's sides. Each line  of the  subsequent lines contains  space-separated integers describing , where each  describes the number written in cell  of the board. Constraints    Output Format For each test case, print the name of the player with the winning strategy on a new line (i.e., either  or ). Sample Input 2 3 2 7 5 2 7 5 7 7 7 2 4 3 1 2  Sample Output Second First  Explanation We'll refer to the two players as  and . Test Case 0:  All cells contain prime numbers, so there are no valid moves available to . As  wins by default, we print  on a new line. Test Case 1:  In this test case, the two players perform the following sequence of moves:  makes a horizontal cut, splitting the board into two  boards. This is demonstrated in the following diagram:   makes a horizontal cut, splitting the board into two  boards. This is demonstrated in the following diagram:   now chooses one of the two  rectangles and cuts it vertically, splitting it into two  squares.       now chooses one of the two  rectangles and cuts it vertically, splitting it into two  squares.       chooses remaining  rectangle and cuts it vertically, splitting it into two  squares.  After the above  moves take place, the board is split into four  squares and no more moves are available for  to make. Thus,  wins and we print  on a new line.
__label__Game-Theory __label__Greedy-Algorithms __label__Game-Theory Kyle and Mike are bored on a rainy day and decide to pass the time by creating a new game having the following rules: The game starts with two -sized integer arrays,  and , and is played by two players,  and .  The players move in alternating turns, with  always moving first. During each move, the current player must choose an integer, , such that . If the current player is , then  receives  points; if the current player is , then  receives  points. Each value of  can be chosen only once. That is, if a value of  is already chosen by some player, none of the player can re-use it. So, game always ends after  moves. The player with the maximum number of points wins. The arrays A and B are accessible to both the players P1 and P2. So the players make a optimal move at every turn.  Given the values of , , and , can you determine the outcome of the game? Print  if  will win,  if  will win, or  if they will tie. Assume both players always move optimally. Input Format The first line of input contains a single integer, , denoting the number of test cases. Each of the  subsequent lines describes a test case. A single test case is defined over the following three lines: An integer, , denoting the number of elements in arrays  and .  space-separated integers, , where each  describes the element at index  of array .  space-separated integers, , where each  describes the element at index  of array . Constraints       Output Format For each test case, print one of the following predicted outcomes of the game on a new line: Print  if  will win. Print  if  will win. Print  if the two players will tie. Sample Input 3 3 1 3 4 5 3 1 2 1 1 1 1 2 2 2 3 3  Sample Output First Tie Second  Explanation Test Case 0: ,  The players make the following  moves:  chooses  and receives  points.  chooses  and receives  points. Note that  will not choose , because this would cause  to win.  chooses  (which is the only remaining move) and receives  points. As all  moves have been made, the game ends. 's score is  points and 's score is  points, so  is the winner and we print  on a new line. Test Case 1: ,  Because both players will only make  move and all possible point values are , the players will end the game with equal scores. Thus, we print  on a new line. Test Case 1: ,   Because both players will only make  move and all the possible point values for  are greater than all the possible point values for ,  will win the game. Thus, we print  on a new line.
__label__Game-Theory Consider the following game: There are two players, First and Second, sitting in front of a pile of  stones. First always plays first. There is a set, , of  distinct integers defined as . The players move in alternating turns. During each turn, a player chooses some  and splits one of the piles into exactly  smaller piles of equal size. If no  exists that will split one of the available piles into exactly  equal smaller piles, the player loses. Both players always play optimally. Given , , and the contents of , find and print the winner of the game. If First wins, print First; otherwise, print Second. First Second Input Format The first line contains two space-separated integers describing the respective values of  (the size of the initial pile) and  (the size of the set).  The second line contains  distinct space-separated integers describing the respective values of . Constraints    Output Format Print First if the First player wins the game; otherwise, print Second. First Second Sample Input 0 Sample Output 0 Explanation 0 The initial pile has  stones, and . During First's initial turn, they have two options: Split the initial pile into  equal piles, which forces them to lose after the following sequence of turns:   Split the initial pile into  equal piles, which forces them to lose after the following sequence of turns:   Because First never has any possible move that puts them on the path to winning, we print Second as our answer. Second
__label__Game-Theory Dexter and Debra are playing a game. They have N containers each having one or more chocolates. Containers are numbered from 1 to N, where ith container has A[i] number of chocolates. The game goes like this. First player will choose a container and take one or more chocolates from it. Then, second player will choose a non-empty container and take one or more chocolates from it. And then they alternate turns. This process will continue, until one of the players is not able to take any chocolates (because no chocolates are left). One who is not able to take any chocolates loses the game. Note that player can choose only non-empty container. The game between Dexter and Debra has just started, and Dexter has got the first Chance. He wants to know the number of ways to make a first move such that under optimal play, the first player always wins. Input Format The first line contains an integer N, i.e., number of containers.  The second line contains N integers, i.e., number of chocolates in each of the containers separated by a single space.   Constraints 1 ≤ N ≤ 106  1 ≤ A[i] ≤ 109  Output Format Print the number of ways to make the first move such that under optimal play, the first player always wins. If the first player cannot win under optimal play, print 0.   Sample Input 2 2 3  Sample Output 1  Explanation Only 1 set of moves helps player 1 win.  Player:      1      2      1      2      1 Chocolates: 2 3 -> 2 2 -> 1 2 -> 1 1 -> 0 1
__label__Game-Theory Kitty and Katty have  plastic blocks. They label the blocks with sequential numbers from  to  and begin playing a game in turns, with Kitty always taking the first turn. The game's rules are as follows: For each turn, the player removes  blocks,  and , from the set. They calculate , write the result on a new block, and insert the new block into the set.  The game ends when only  block is left. The winner is determined by the value written on the final block, : If , then Kitty wins. If , then Katty wins. If , then the player who moved last wins. If , then Kitty wins. If , then Katty wins. If , then the player who moved last wins. Recall that  is the Modulo Operation. Given the value of , can you find and print the name of the winner? Assume that both play optimally. Note: The selection order for  and  matters, as sometimes . The diagram below shows an initial set of blocks where . If  and , then the newly inserted block is labeled ; alternatively, if  and , the newly inserted block is labeled .  Input Format The first line contains a single positive integer,  (the number of test cases or games).  The  subsequent lines each contain an integer,  (the number of blocks for that test case). Constraints    Output Format For each test case, print the name of the winner (i.e.: either Kitty or Katty) on a new line. Sample Input 2 2 3  Sample Output Kitty Katty  Explanation Test Case 0:   so there are two blocks labeled  and . Kitty chooses  and , then inserts a new block with  the label  (the result of ). The game ends, as there is now only  block in the set. The label on the last block, , is , so we calculate . Because  , Kitty wins and we print Kitty on a new line. Kitty Test Case 1:  , so there are three blocks labeled , , and . No matter how Kitty makes the first move, Katty will win. If Kitty chooses  and  on the first move and inserts a block labeled  (the result of ), the set of blocks becomes . Katty then must choose  and  and insert a new block labeled  (the result of ). The game ends, as there is now only  block in the set. The label on the last block, , is , so we calculate . Because  and Katty made the last move, Katty wins and we print Katty on a new line. Katty
__label__Mathematics __label__Game-Theory __label__Game-Theory After their success in coming up with Fun Game, Kyle and Mike invented another game having the following rules: The game starts with an -element sequence, , and is played by two players,  and .  The players move in alternating turns, with  always moving first. During each move, the current player chooses one of the asterisks () in the above sequence and changes it to either a + (plus) or a - (minus) sign.   + - The game ends when there are no more asterisks () in the expression. If the evaluated value of the sequence is divisible by , then  wins; otherwise,  wins. Given the value of , can you determine the outcome of the game? Print  if  will win, or  if  will win. Assume both players always move optimally. Input Format The first line of input contains a single integer , denoting the number of test cases. Each line  of the  subsequent lines contains an integer, , denoting the maximum exponent in the game's initial sequence. Constraints   Output Format For each test case, print either of the following predicted outcomes of the game on a new line: Print  if  will win. Print  if  will win. Sample Input 1 2    Sample Output First  Explanation In this case, it doesn't matter in which order the asterisks are chosen and altered. There are  different courses of action and, in each one, the final value is not divisible by  (so  always loses and we print  on a new line).  Possible options:
__label__Game-Theory Alice and Bob are playing a game with a rooted tree. The tree has  vertices and the first node, , is always the root. Here are the basic rules: They move in alternating turns, and both players always move optimally. During each move, a player removes an edge from the tree, disconnecting one of its leaves or branches. The leaf or branch that was disconnected from the rooted tree is removed from the game.  The first player to be unable to make a move loses the game. Alice always makes the first move.  For example, the diagram below shows a tree of size , where the root is node :  Now, if a player removes the edge between  and , then nodes  and  become disconnected from the root and are removed from the game:  Given the structure of the tree, determine and print the winner of the game. If Alice wins, print ; otherwise print . Input Format The first line contains a single integer, , denoting the number of test cases.  For each test case, the first line contains an integer, , denoting the number of nodes in the tree.  Each of the  subsequent lines contains  space-separated integers,  and , defining an edge connecting nodes  and . Constraints    Output Format For each test case, print the name of the winner (i.e.,  or ) on a new line. Sample Input 1 5 1 2 3 1 3 4 4 5  Sample Output Alice  Explanation Test Case 0: Alice removes the edge connecting node  to node , effectively trimming nodes  and  from the tree. Now the only remaining edges are  and . Because Bob can't remove both of them, Alice will make the last possible move. Because the last player to move wins, we print  on a new line.
__label__Game-Theory Bob and Ben are playing a game with forests! The game's rules are as follows: The game starts with a forest of  trees. Bob always moves first and they take alternating turns. The first player with no available move loses the game. During each move, the player removes one node. If the node is not a leaf, then the whole tree vanishes; otherwise, the rest of the tree remains in the forest. We define a leaf to be a node with exactly  connected edge. Both players play optimally, meaning they will not make a move that causes them to lose the game if some better, winning move exists. We define each tree  in the -tree forest as follows: Tree  is defined by two integers,  (the number of nodes in the tree) and  (a constant).  Its nodes are numbered sequentially from  to . Its edges are numbered sequentially from  to , and each edge  connects node  to node . Given the values of  and  for each tree in the forest, can you determine who will win the game? Input Format The first line contains an integer, , denoting the number of games. The subsequent lines describe each game in the following format: The first line contains an integer, , denoting the number of trees in the forest.      Each of the  subsequent lines contains two space-separated integers describing the respective values of  and  for tree .  Constraints     The sum of  over all games is at most . Subtasks For  of the maximum score: The sum of  over all games is at most .  For  of the maximum score:  Output Format For each game, print the name of the winner on a new line (i.e., BOB or BEN). BOB BEN Sample Input 2 2 1 2 1 3 1 3 2  Sample Output BEN BOB  Explanation Bob and Ben play the following two games: The forest consists of  trees containing one node each, and each tree has no edges as  and  are both  (so both trees have  edges). The sequence of moves is as follows:    We then print the name of the winner, BEN, on a new line. BEN The forest consists of  tree containing three nodes. We find the  edges like so:  Edge  connects node  to node . Edge  connects node  to node .        The game then plays out as follows:    We then print the name of the winner, BOB, on a new line. The forest consists of  tree containing three nodes. We find the  edges like so:  Edge  connects node  to node . Edge  connects node  to node .        The game then plays out as follows:    We then print the name of the winner, BOB, on a new line. BOB
__label__Game-Theory Our unsung tower-breaking heroes (players  and ) only have one tower left, and they've decided to break it for a special game commemorating the end of  days of Game Theory! The rules are as follows:  always moves first, and both players always move optimally. Initially there is  tower of height . The players move in alternating turns. The moves performed by each player are different: At each turn,  divides the current tower into some number of smaller towers. If the turn starts with a tower of height  and  breaks it into  smaller towers, the following condition must apply: , where  denotes the height of the  new tower. At each turn,  chooses some tower  of the  new towers made by  (where ). Then  must pay  coins to . After that,  gets another turn with tower  and the game continues. At each turn,  divides the current tower into some number of smaller towers. If the turn starts with a tower of height  and  breaks it into  smaller towers, the following condition must apply: , where  denotes the height of the  new tower. At each turn,  chooses some tower  of the  new towers made by  (where ). Then  must pay  coins to . After that,  gets another turn with tower  and the game continues. The game is over when no valid move can be made by , meaning that . 's goal is to pay as few coins as possible, and 's goal is to earn as many coins as possible.  Can you predict the number of coins that  will earn? Input Format The first line contains a single integer, , denoting the number of test cases.  Each of the  subsequent lines contains a single integer, , defining the initial tower height for a test case. Constraints   Output Format For each test case, print a single integer denoting the number of coins earned by  on a new line. Sample Input 3 4 2 7  Sample Output 6 4 8  Explanation Test Case 0:  Our players make the following moves:   splits the initial tower into  smaller towers of sizes  and .   chooses the first tower and earns  coin.   splits the initial tower into  smaller towers of sizes  and .   chooses the first tower and earns  coin.    splits the tower into  smaller towers of sizes  and .   chooses the first tower and earns  coin.  splits the tower into  smaller towers of sizes  and .   chooses the first tower and earns  coin.   splits the tower into  smaller towers of size .   chooses the second tower and earns  coins.  splits the tower into  smaller towers of size .   chooses the second tower and earns  coins. The total number of coins earned by  is , so we print  on a new line.
__label__Game-Theory __label__Game-Theory Big Cat and Little Cat love playing games. Today, they decide to play a Game of Stones, the Kitties are Coming edition. The game's rules are as follows:  The game starts with  stones that are randomly divided into  piles.  The cats move in alternating turns, and Little Cat always moves first. During a move, a cat picks a pile having a number of stones  and splits it into any number of non-empty piles in the inclusive range from  to .  The first cat to be unable to make a move (e.g., because all piles contain exactly  stone) loses the game.  Little Cat is curious about the number of ways in which the stones can be initially arranged so that she is guaranteed to win. Two arrangements of stone piles are considered to be different if they contain different sequences of values. For example, arrangements  and  are different. Given the values for , , and , find the number of winning configurations for Little Cat and print it modulo .  Note: Each cat always moves optimally, meaning that they're both playing to win and neither cat will make a move that causes them to lose the game if some other (winning) sequence of moves can be made. Input Format The first line of input contains three space-separated integers,  (the number of stones),  (the number of piles), and  (the maximum number of piles into which a pile can be split during a single move), respectively. Constraints    Output Format Print the number of initial arrangements of piles that will result in Little Cat winning, modulo . Sample Input 4 3 3  Sample Output 3  Explanation There are three possible arrangements:    For any arrangement, Little Cat can pick a pile containing  stones and split it into  piles with  stone each. At this point, the pile configuration will be , so Big Cat won't be able to make any moves and the game ends. We then print the result of  on a new line.
__label__Mathematics __label__Game-Theory Alice and Bob play the following game: They choose a permutation of the numbers  to .   Alice plays first and they alternate.   In a turn, they can remove any one remaining number from the permutation.   The game ends when the remaining numbers form an increasing sequence of  or more numbers. The person who played the last turn (after which the sequence becomes increasing) wins the game.   Assuming both play optimally, who wins the game?   For example, if  the starting permutation might be .  First, Alice chooses  or  (use  for the example) leaving .  Since this is a decreasing sequence, Bob can remove any number for optimum play (he will lose regardless).  Alice then removes any number leaving an array of only one element.  Since Alice removed the last element to create an increasing sequence, Alice wins.  Function Description  Complete the permutationGame function in the editor below.  It should return a string that represents the winner of the game, either Bob or Alice.   Bob Alice permutationGame has the following parameter:  - arr: an array of integers that represents the starting permutation   Input Format The first line contains the number of test cases .   Each of the next  pairs of lines is in the following format:  - The first line contains an integer , the size of the array   - The second line contains  space-separated integers,  where   Constraints    The permutation will not be an increasing sequence initially. Output Format Output  lines, one for each test case, containing Alice if Alice wins the game and Bob otherwise.   Alice Bob Sample Input 2 3 1 3 2 5 5 3 2 1 4  Sample Output Alice Bob  Explanation For the first test, Alice can remove the  or the  to make the sequence increasing and wins the game.     For the second test, if  is removed then the only way to have an increasing sequence is to only have  number left.  This would take a total of  moves, thus allowing Bob to win. On the first move if Alice removes the , it will take  more moves to create an increasing sequence thus Bob wins. If Alice does not remove the , then Bob can remove it on his next turn to create the same game state to win (decreasing sequence,  numbers left).
__label__Game-Theory __label__Game-Theory Alice and Bob are playing a game, defined below: There is an undirected tree graph with  nodes that has the following properties:  Each node has  golden coins.  Node  is root of the tree.  The parent node of some node  is defined as . Each node has  golden coins.  Node  is root of the tree.  The parent node of some node  is defined as . Moves Players move in turns.  During a move, a player can select a node  and move one or more coins to .  If the current player can't make any move, they lose the game. Players move in turns.  During a move, a player can select a node  and move one or more coins to .  If the current player can't make any move, they lose the game. The game quickly becomes boring because the result is determined by the tree's configuration and the number of coins in each node (assuming that both players play optimally). Alice decides to instead challenge Bob by asking him  questions. For each question : Alice picks a node  and removes the edge between  and .  She picks another node  and draws a new undirected edge between  and . So now . Bob must determine if the first player has a winning strategy for the new tree or not. It's possible that after Alice draws the new edge, the graph will no longer be a tree; if that happens, the question is invalid. Each question is independent, so the answer depends on the initial state of the graph (and not on previous questions). Given the tree and the number of coins in each node, can you help Bob answer all  questions? Input Format The first line contains an integer,  (the number of nodes).  The second line contains  space-separated integers, , describing the number of coins in each node.  Each of the  subsequent lines contains  space-separated integers denoting an undirected edge between nodes  and , respectively.  The next line contains an integer,  (the number of questions Alice asks).  Each of the  subsequent lines contains  space-separated integers,  and , respectively. Constraints    For each question:    Output Format On a new line for each question, print  if the first player has a winning strategy, print  if they do not, or print  if the question is not valid. Sample Input 6 0 2 2 1 3 2 1 2 1 3 3 4 3 5 4 6 3 6 2 4 1 3 6  Sample Output NO YES INVALID  Explanation Initally the tree looks like this:  After the first question (), the tree looks like this:  Alice removes the edge conecting node  to  and makes  the new parent node of . Because this configuration does not result in a winning strategy, we print  on a new line. After the second question (), the tree looks like this:  Alice removes the edge conecting node  to  and makes  the new parent node of . Because this configuration results in a winning strategy, we print  on a new line. After the third question (), the graph is no longer a tree:  Alice removes the edge conecting node  to  and makes  the new parent node of . The graph is now partitioned into two separate subgraphs (one of which is also not a tree); because the game must be played on a single undirected tree graph, we print  on a new line.
__label__Game-Theory General Iroh and Commandant Bumi are heading to the Republic City to stop a rebellion. But it's quite a long travel, so in the meantime they have started discussing about possible attacking plans. Right now, they're arguing about best ways for moving soldiers during the battle. Tired of not getting a final and concise strategy, Iroh proposed a particularly original idea. Iroh: Bumi, look at this map: here we have all possible locations in the battle field soldiers can occupy. I know a game which can give us some ideas.  Bumi: A game? How will a game help us here?  Iroh: It's pretty simple, we know which location is connected to each one, and also, that all those paths between locations are one-way (it's too dangerous to have two ways paths), so we place some soldiers at random initial locations, take turns, and in each turn, we try to make a valid move with one soldier from one location to another. Eventually, we won't be able to move any man so, the first one which is not able to perform any valid move, loses. One important thing is, at some moment, we may have some men at the same field location.  Bumi: Are you sure we are gonna end this? We have so many locations and paths... don't know, soldiers could be moving in circles for ever.  Iroh: Take it easy man, those paths were built by the best architects I've ever known, so there is no way that could happen.  Bumi: Well, I still don't get how does this help us.  Iroh: Me neither, but greatest generals from the Earth Kingdom created their strategies from this game, so, who knows?  Bumi: Ok, I'm in. Who plays first?  Iroh: You go first my friend. Just make sure you always do your best, because I will show no mercy to you :).  Input Format First line in the input contains two integers N and M, describing the number of locations and paths between them, respectively. M lines follow, each one with two integers u and v, denoting a one-way path from u to v.  Then comes a line with a single integer Q, denoting how many times Bumi and Iroh played the game over the given field. Q queries follow each one with two lines, first one with a single integer K, the number of soldiers in the field; and second one with K integers b_i separated by space, each one denoting the initial location of some soldier. Constraints 1 < N <= 105  1 <= M <= 106  1 <= u, v, b_i <= N  1 <= K <= 102  1 <= Q <= 105  Output Format Output Q lines, each one saying Bumi if Bumi should be the winner of the corresponding game or Iroh otherwise.  Remember that, being both top strategy masters, they will always perform the best possible move each turn. Sample Input 10 10 1 10 3 10 7 8 6 8 7 4 9 4 7 6 5 8 1 8 2 8 5 4 10 7 6 4 3 1 9 4 3 8 3 5 3 4 9 7 3 7 9 10  Sample Output Bumi Iroh Iroh Bumi Bumi
__label__Dynamic-Programming __label__Mathematics __label__Game-Theory __label__Game-Theory It's New Year's Day, and Balsa and Koca are stuck inside watching the rain. They decide to invent a game, the rules for which are described below. Given array  containing  integers, they take turns making a single move. Balsa always moves first, and both players are moving optimally (playing to win and making no mistakes). During each move, the current player chooses one element from , adds it to their own score, and deletes the element from ; because the size of  decreases by  after each move, 's size will be  after  moves and the game ends (as all elements were deleted from ). We refer to Balsa's score as  and Koca's score as . Koca wins the game if |-| is divisible by ; otherwise Balsa wins.  Given , determine the winner. Note: . Input Format The first line contains an integer, , denoting the number of test cases.  Each test case is comprised of two lines; the first line has an integer , and the second line has  space-separated integers  describing array . Constraints    Subtasks For  score:  For  score:  Output Format For each test case, print the winner's name on a single line; if Balsa wins print Balsa, otherwise print Koca. Sample Input 2  3 7 6 18 1 3  Sample Output Balsa Koca  Explanation Test Case 1 Array . The possible play scenarios are: , , , and . , , , and . , , , and . , , , and . , , -, and . , , -, and . In this case, it doesn't matter what Balsa chooses because the difference between their scores isn't divisible by . Thus, Balsa wins. Test Case 2 Array . Balsa must choose that element, the first move ends the game.  , , , and . Thus, Koca wins.
__label__Mathematics __label__Game-Theory There are  piles of stones where the ith pile has  stones in it. Alice and Bob play the following game: Alice starts, and they alternate turns. Alice starts, and they alternate turns. In a turn, a player can choose any one of the piles of stones and divide the stones in it into any number of unequal piles such that no two of the newly created piles have the same number of stones. For example, if there 8 stones in a pile, it can be divided into one of these set of piles:  or .  In a turn, a player can choose any one of the piles of stones and divide the stones in it into any number of unequal piles such that no two of the newly created piles have the same number of stones. For example, if there 8 stones in a pile, it can be divided into one of these set of piles:  or .  The player who cannot make a move (because all the remaining piles are indivisible) loses the game. The player who cannot make a move (because all the remaining piles are indivisible) loses the game. Given the starting set of piles, who wins the game assuming both players play optimally (that means they will not make a move that causes them to lose the game if some better, winning move exists)? Input Format The first line contains the number of test cases .  test cases follow. The first line for each test case contains , the number of piles initially. The next line contains  space delimited numbers, the number of stones in each of the piles. Constraints     Output Format Output  lines, one corresponding to each test case containing ALICE if Alice wins the game and BOB otherwise. ALICE BOB Sample Input 4   1   4   2   1 2   3   1 3 4   1   8  Sample Output BOB   BOB   ALICE   BOB  Explanation For the first case, the only possible move for Alice is (4) -> (1,3). Now Bob breaks up the pile with 3 stones into (1,2). At this point Alice cannot make any move and has lost.
__label__Mathematics __label__Game-Theory Laurel and Hardy have  piles of chocolates with each pile containing some number of chocolates. The piles are arranged from left to right in a non decreasing order based on the number of chocolates in each pile. They play the following game.  For every continuous subsequence of chocolate piles (at least 2 piles form a subsequence), Laurel and Hardy will play game on this subsequence of chocolate piles, Laurel plays first, and they play in turn. In one move, the player can choose one of the piles and remove at least one chocolate from it, but the non-decreasing order of the chocolate piles must be maintained. The last person to make a valid move wins.  How many continuous subsequences of chocolate piles will Laurel win if both of them play optimally? The number of chocolates of each pile will be recovered after the game ends for each subsequences.  Input Format The first line contains an integer  denoting the number of piles.  The second line contains the number of chocolates in each pile, arranged from left to right and separated by a single space between them.  Constraints  ≤  ≤    ≤     ≤  Output Format A single integer denoting the number of continuous subsequences of chocolate piles in which Laurel will win. Sample Input 5 1 1 2 2 3  Sample Output 5  Explanation Of the 10 continuous-sub-sequence of chocolate piles,  Laurel loses in [1,1], [1,1,2], [1,1,2,2], [1,2,2,3], [2,2] and  wins in [1,1,2,2,3], [1,2], [1,2,2], [2,2,3] and [2,3] and hence 5.
__label__Game-Theory Manasa loves the nim game, in which there are  buckets, each having  balls. Two players play alternately. Each turn consists of removing some non-zero number of balls from one of the bucket. A player with lack of moves looses. But, Manasa having played it so many times, she gets bored one day. So she wants to change the rules of the game. She loves prime numbers, so she makes a new rule: any player can only remove a prime number of balls from a bucket. But there are infinite number prime numbers. So to keep the game simple, a player can only remove  balls from a bucket if  belongs to the set   The whole game can now be described as follows:    There are  buckets, and the  bucket contains  balls. A player can choose a bucket and remove  balls from that bucket where  belongs to . A player loses if there are no more available moves. Manasa plays the first move against Sandy. Who will win if both of them play optimally? Input Format The first line contains an integer , the number of test cases.  Each test case consists of two lines. The first line contains a single integer . The second line contain  space-separated integers .   Constraints       Output Format Print a single line containing the name of the winner: Manasa or Sandy. Manasa Sandy Sample Input 0 Sample Output 0 Explanation 0 For the first testcase: Since both the buckets have same number of balls, Manasa can choose any one of them for her first move. If Manasa selects to remove  or  balls to remove from first bucket. Now, Sandy  can always counter her move by removing  balls from first bucket if it's left with  balls respectively. Now, there are no valid moves left for first bucket. The same thing repeats for second bucket and Sandy wins. For the second testcase: Manasa removes  balls from the third bucket. Now, if Sandy choose the remove  balls from second bucket Manasa will empty the first bucket and if Sandy choose the remove  balls from first bucket, Manasa will empty second one. Hence, Manasa wins.
__label__Mathematics __label__Game-Theory HackerChess is a variant of chess played at HackerRank. It is a game played between two players who make moves in turns until one of them cannot make any move. The player who cannot make a move loses the game and the other player is declared the winner. The game is played on a board with  rows and  columns. The only pieces used in the game are rooks. A rook in HackerChess moves only vertically, which means that in never leaves a column to which it belongs. Moreover, in a single move, a rook moves through any number of unoccupied cells. Notice that there are no captures in HackerChess, two rooks cannot occupy the same cell, and a rook cannot jump over another rook. Each player has exactly one rook in each of the  columns of the board. Given the initial position of the rooks and knowing that the second player makes the first move, decide who will win the game if both players play optimally. Input Format In the first line, there is a single integer  denoting the number of games to be played. After that, descriptions of  games follow: In the first line, there is a single integer  denoting the size of the board. Next,  lines follow. In the -th of them there is a single integer  denoting the row of the rook belonging to the first player placed in the -th column. After that, another  lines follow. In the -th of them there is a single integer  denoting the row of the rook belonging to the second player placed in the -th column. Constraints      Output Format Print exactly  lines. In the -th of them, print player-1 if the first player will win the -th game. Otherwise, print player-2 in this line. player-1 player-2 Sample Input 0 Sample Output 0 Explanation 0 There is only one game player in the sample input. The game is played on the board with  rows and  columns. Let's denote the first player's rooks as red rooks and the second player's rooks as green ones. Then the initial position of the game looks like this:  The second player moves first and he can move his rook in the first column to the second row. After this move, the position looks as follows:  Next, it is the first player's turn. He cannot make any move with his rook in the first column, so he has to make a move in the second or the third column. Without the loss of generality, let's assume that he makes a move in the second column. He can only make one such move, i.e. move the rook from the second to the third row. This results in the following position:  After that, the best move for the second player is to move his rook in the second column from the first to the second row. After this move, the position looks like this:  Next, it is again the first player's move. The only move he can make is to move his rook in the third column from the second to the third row. It results in the following position:  Then, the best move for the second player is to move his rook in the third column from the first to the second row. After that, the position looks as follows:  Next, it is the first player's move, but since he is unable to make any valid move, he loses and the second player is declared a winner. It shows that regardless of the first player's moves, the second player has a strategy leading to his victory. Sample Input 1 Sample Output 1 Explanation 1 Second player cannot make a move so  is the winner.
__label__Game-Theory Koga and Ryuho, new generation Athena's saints, are training to improve their control over the cosmos. According to the ancient Masters, a saint's power to control the cosmos strengthens, when one allows the energy of the universe to flow within the body and then concentrates it. This energy can even be used to explode the objects.  Today's training is based on a game, and the goal is to use as little cosmos as possible to win. Two saints play as follows:  Initially there are  piles of stones; pile  has  stone, pile  has  stones, and so on. Thus, the  pile has  stones. The saints take turns and in each turn, a saint must select a non-empty pile and destroy at least half of the stones in it. The winner is the saint who destroys the last available stone .  For example, from a pile of  stones, a saint must destroy at least  stones, leaving a single (and possibly empty) pile at most 3 stones. With such game, saints learn how to use the appropriate amount of cosmos in a single strike: too much will destroy more stones than desired, too little won't be enough. They also improve their battle thinking and strategy skills. Ryuho suspects that such game is not as random as it appears to be at first glance. He strongly believes that with the correct single blow, you're assured to win from the very first turn, if you play optimally, no matter how good the other saint plays. Moreover, he is particularly interested in knowing the minimum number of stones he needs to destroy at that first move. Can you help him?   Input Format First line of the input consists of an integer ,  testcases follow, each in a new line. Each line will contain a single integer , which describes the number of initial piles as explained above. Constraints    Output Format For each line in the input, output the minimum number of stones Ryuho needs to destroy in his first turn, assuming he starts playing and that both he and Koga play always as well as possible. If this is not possible, just print . Sample Input 0 Sample Output 0 Explanation 0 For the first testcase, we can see that the saint can destroy the first stone and win the game.  Sample Input 1 Sample Output 1 Explanation 1 There are three piles with stones  and . Initially Ryuho will remove  stone from the first pile. Now other saint has  options -  First, to remove all stones from second pile. In that case Ryuho will remove all stones from third pile and win the game. Second, to remove all stones from third pile. In that case Ryuho will remove all stones from second pile and win the game. Third, to remove  stone from second pile. In that case Ryuho will remove  stones from third pile and they will be left with  stone in each of the second and third pile. No matter what the other saint selects Ryuho will have an option to select the last stone. Fourth, to remove  stones from the third pile. In that case Ryuho will remove  stone from second pile and they will be left with  stone in each of the second and third pile. No matter what the other saint selects Ryuho will have an option to select the last stone. So in all four cases Ryuho will win the game.
__label__Game-Theory Stephanie just learned about a game called Nim in which there are two players and  piles of stones. During each turn, a player must choose any non-empty pile and take as many stones as they want. The first player who cannot complete their turn (i.e., because all piles are empty) loses.   Stephanie knows that, for each start position in this game, it's possible to know which player will win (i.e., the first or second player) if both players play optimally. Now she wants to know the number of different games that exist that satisfy all of the following conditions: The game starts with  non-empty piles and each pile contains less than  stones. All the piles contain pairwise different numbers of stones. The first player wins if that player moves optimally. Help Stephanie by finding and printing the number of such games satisfying all the above criteria, modulo . Input Format The first line contains two space-separated integers describing the respective values of  and . Constraints   Output Format Print the number of such games, modulo . Sample Input 0 Sample Output 0 Explanation 0 We want to know the number of games with  piles where each pile contains  stones. There are six such possible games with the following distributions of stones: . Thus, we print the result of  as our answer.
__label__Graph-Algorithms Jenna is playing a computer game involving a large map with  cities numbered sequentially from  to  that are connected by  bidirectional roads. The game's objective is to travel to as many cities as possible without visiting any city more than once. The more cities the player visits, the more points they earn. As Jenna's fellow student at Hackerland University, she asks you for help choosing an optimal path. Given the map, can you help her find a path that maximizes her score? Note: She can start and end her path at any two distinct cities. Input Format The first line contains two space-separated integers describing the respective values of  (the number of cities) and  (the number of roads).  Each line  of the  subsequent lines contains two space-separated integers,  and , describing a bidirectional road between cities  and . Map Generation Algorithm  The graph representing the map was generated randomly in the following way: Initially, the graph was empty. Permutations  were chosen uniformly at random among all  permutations. For each , edge  was added to the graph. An additional  edges were chosen uniformly at random among all possible sets of  edges which don't intersect with edges added during step . Constraints    For  of test  and . For  of test  and . For  of test  and . It's guaranteed that a valid path of length  always exists.  Scoring A valid path of length  earns  of a test case's available points. The total score will be rounded to next . Output Format Print the following two lines of output: The first line must contain a single integer, , denoting the length of the path. The second line must contain  distinct space-separated integers describing Jenna's path in the same order in which she visited each city. Sample Input 0 Sample Output 0 Explanation 0 The diagrams below depict the city's initial map, an optimal path that would earn a full score, and an alternative path that would earn a partial score:  In the optimal path (center image), Jenna walks the path . This answer earns  of the maximum score because the path length, , is equal to  (i.e., she was able to visit every city exactly once).  In the alternative path (right image), Jenna walks the path  for  of the maximum score.
__label__Search Two spies in a grid will have their covers blown if: They are both in the same row.   They are both in the same column.   They can see each other diagonally (i.e., lie in a line inclined ° or ° to the base of the grid). The level of danger is now increased! In addition to the conditions above, no  spies may lie in any straight line. This line need not be aligned ° or ° to the base of grid. Write a program in the language of your choice to place  spies (one spy per row) on an  grid without blowing anyone's cover. Your program must then print the following  lines describing a valid configuration: The value of . A space-separated list of -indexed column numbers, where each value  is the column number of the spy in row  (where ). Solve this problem for  as large as possible, up to (and including) . Note: Run and Custom Input are not available for this challenge; you must click Submit Code for your submission to be scored. Your score for this challenge will always be the maximum value scored by any of your submissions. Examples  In the examples below,  denotes a spy and * denotes an empty cell. Sample Configuration 0  A valid configuration for :   Sample Output 0  This C++ code: Produces this output: 11 2 4 7 1 8 11 5 3 9 6 10   This configuration will earn a score of . Sample Configuration 1  A valid configuration for : Sample Output 1  This Python code: Produces this output: 13 1 3 12 10 7 2 11 5 8 13 9 4 6  This configuration will earn a score of . Sample Configuration 2  An invalid configuration for : Sample Output 2  The following output: 7 1 3 5 7 2 4 6   will earn a score of  because the spies in the first  rows are in a straight line as are the spies in the next  rows.       Input Format There is no input for this challenge. Constraints  is odd.  (Do not submit for any value of  larger than ) Scoring  A correct configuration will get a score of . Output Format Print the following  lines of output: The first line should be a single integer denoting the value of .  The second line should contain a space-separated list of integers. Each integer  (where ) should be the -indexed column number where the spy in row  is located.
__label__Search Quality Blimps Inc. is looking to expand their sales to other cities (), so they hired you as a salesman to fly to other cities to sell blimps. Blimps can be expensive to travel with, so you will need to determine how many blimps to take along with you on each trip and when to return to headquarters to get more. Quality Blimps has an unlimited supply of blimps.  You will be able to sell only one blimp in each city you visit, but you do not need to visit every city, since some have expensive travel costs. Each city has an initial price that blimps sell for, but this goes down by a certain percentage as more blimps are sold (and the novelty wears off). Find a good route that will maximize profits.  Details Blimp Decline  - The blimps will decline () in price every time you visit  of the cities (the number of cities will always be a multiple of ). For example, if  is  and there are  cities, then for every city you visit (except headquarters), the price of blimps will be multiplied by . So after  visits, every city's blimp price will be about  of the initial value (). Note that if the price declines after you visit some city, then it will only happen after you made the sale on that city, so your sale on that city will not be affected. In particular, each blimp you sell in the first  of the cities will always be sold at their corresponding city's initial price. Input Format The first line of input for each test case will contain three parameters: number of cities ()  blimp cost per mile ()  blimp factor of decline ()  This will be followed by  lines, which will each contain three integers , the city location (x and y coordinates the grid, in miles) and the initial blimp sales price, respectively.   Constraints         The city locations will be distinct Output Format On each line, output the x and y coordinates of the next city you are visiting. When leaving the headquarters, also output the number of blimps you are taking with you for that part of the trip. You do not need to return to headquarters when you finish your sales.  You can only visit each city at most once. Sample Input 10 3 0.95 1 1 30 2 2 35 0 8 50 7 2 20 7 3 25 10 7 90 9 8 35 5 15 10 8 18 15 1 9 60  Sample Output 1 1 2 2 2 0 0 10 7 2 9 8 0 0 0 8 2 1 9  Explanation The salesman first travels a distance of √2 dollars to (1,1) carrying 2 blimps. This will cost him √2 dollars for his own travel and 6√2 dollars for the 2 blimps. He will then earn 30 dollars selling 1 blimp. He then continues to (2,2) with only 1 blimp, which will cost him 1√2 dollars for his travel and 3√2 dollars for his blimp. He will then earn 33.25 dollars selling the blimp, since the prices have declined by 5%. After his return to HQ (a distance of 2√2) he will have earned an approximate profit of 44.87 dollars. Scoring The goal of this challenge is to achieve the maximum profit on each test case. Your profits for each test case will be: Total Blimp Sales - Total Travel Costs You will receive a score for each test case based on the ratio of your profit to the estimated maximum profit. Your total score for this challenge will be a weighted sum of your scores for each test case. If your profit is negative, you'll receive a zero score.
__label__Data-Structures An array is a type of data structure that stores elements of the same type in a contiguous block of memory. In an array, , of size , each memory location has some unique index,  (where ), that can be referenced as  (you may also see it written as ). Given an array, , of  integers, print each element in reverse order as a single line of space-separated integers. Note: If you've already solved our C++ domain's Arrays Introduction challenge, you may want to skip this. Input Format The first line contains an integer,  (the number of integers in ).  The second line contains  space-separated integers describing . Constraints   Output Format Print all  integers in  in reverse order as a single line of space-separated integers.
__label__Data-Structures Given a  2D Array, :  1 1 1 0 0 0 0 1 0 0 0 0 1 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0  We define an hourglass in  to be a subset of values with indices falling in this pattern in 's graphical representation: a b c   d e f g  There are  hourglasses in , and an hourglass sum is the sum of an hourglass' values. Calculate the hourglass sum for every hourglass in , then print the maximum hourglass sum. For example, given the 2D array: -9 -9 -9  1 1 1   0 -9  0  4 3 2 -9 -9 -9  1 2 3  0  0  8  6 6 0  0  0  0 -2 0 0  0  0  1  2 4 0  We calculate the following  hourglass values: -63, -34, -9, 12,  -10, 0, 28, 23,  -27, -11, -2, 10,  9, 17, 25, 18  Our highest hourglass value is  from the hourglass: 0 4 3   1 8 6 6  Note: If you have already solved the Java domain's Java 2D Array challenge, you may wish to skip this challenge. Function Description Complete the function hourglassSum in the editor below.  It should return an integer, the maximum hourglass sum in the array.   hourglassSum has the following parameter(s): arr: an array of integers  Input Format Each of the  lines of inputs  contains  space-separated integers . Constraints    Output Format Print the largest (maximum) hourglass sum found in . Sample Input 1 1 1 0 0 0 0 1 0 0 0 0 1 1 1 0 0 0 0 0 2 4 4 0 0 0 0 2 0 0 0 0 1 2 4 0  Sample Output 19  Explanation  contains the following hourglasses:   The hourglass with the maximum sum () is: 2 4 4   2 1 2 4
__label__Data-Structures Create a list, , of  empty sequences, where each sequence is indexed from  to . The elements within each of the  sequences also use -indexing. Create an integer, , and initialize it to . The  types of queries that can be performed on your list of sequences () are described below: Query: 1 x y Find the sequence, , at index  in . Append integer  to sequence . Query: 2 x y Find the sequence, , at index  in . Find the value of element  in  (where  is the size of ) and assign it to . Print the new value of  on a new line Query: 1 x y Find the sequence, , at index  in . Append integer  to sequence . 1 x y Find the sequence, , at index  in . Append integer  to sequence . Query: 2 x y Find the sequence, , at index  in . Find the value of element  in  (where  is the size of ) and assign it to . Print the new value of  on a new line 2 x y Find the sequence, , at index  in . Find the value of element  in  (where  is the size of ) and assign it to . Print the new value of  on a new line Task  Given , , and  queries, execute each query. Note:  is the bitwise XOR operation, which corresponds to the ^ operator in most languages. Learn more about it on Wikipedia.  ^ Input Format The first line contains two space-separated integers,  (the number of sequences) and  (the number of queries), respectively.  Each of the  subsequent lines contains a query in the format defined above. Constraints    It is guaranteed that query type  will never query an empty sequence or index. Output Format For each type  query, print the updated value of  on a new line. Sample Input 2 5 1 0 5 1 1 7 1 0 3 2 1 0 2 1 1  Sample Output 7 3  Explanation Initial Values:       = [ ]   = [ ]   Query 0: Append  to sequence .     = [5]   = [ ]      Query 1: Append  to sequence .   = [5]   = [7]   Query 2: Append  to sequence .     = [5, 3]   = [7]    Query 3: Assign the value at index  of sequence  to , print .     = [5, 3]   = [7]   7  Query 4: Assign the value at index  of sequence  to , print .     = [5, 3]   = [7]   3
__label__Data-Structures A left rotation operation on an array of size  shifts each of the array's elements  unit to the left. For example, if  left rotations are performed on array , then the array would become . Given an array of  integers and a number, , perform  left rotations on the array. Then print the updated array as a single line of space-separated integers. Input Format The first line contains two space-separated integers denoting the respective values of  (the number of integers) and  (the number of left rotations you must perform).  The second line contains  space-separated integers describing the respective elements of the array's initial state. Constraints      Output Format Print a single line of  space-separated integers denoting the final state of the array after performing  left rotations. Sample Input 5 4 1 2 3 4 5  Sample Output 5 1 2 3 4  Explanation When we perform  left rotations, the array undergoes the following sequence of changes:    Thus, we print the array's final state as a single line of space-separated values, which is 5 1 2 3 4. 5 1 2 3 4
__label__Data-Structures There is a collection of input strings and a collection of query strings.  For each query string, determine how many times it occurs in the list of input strings.   For example, given input  and , we find  instances of ',  of '' and  of ''.  For each query, we add an element to our return array, .   Function Description Complete the function matchingStrings in the editor below.  The function must return an array of integers representing the frequency of occurrence of each query string in strings. matchingStrings has the following parameters: strings - an array of strings to search   queries - an array of query strings   Input Format The first line contains and integer , the size of .  Each of the next  lines contains a string .  The next line contains , the size of .  Each of the next  lines contains a string .   Constraints      .  Output Format Return an integer array of the results of all queries in order.
__label__Greedy-Algorithms Starting with a 1-indexed array of zeros and a list of operations, for each operation add a value to each of the array element between two given indices, inclusive.  Once all operations have been performed, return the maximum value in your array.   For example, the length of your array of zeros .  Your list of queries is as follows:   Add the values of  between the indices  and  inclusive: The largest value is  after all operations are performed.   Function Description  Complete the function arrayManipulation in the editor below.  It must return an integer, the maximum value in the resulting array.   arrayManipulation has the following parameters: n - the number of elements in your array   queries - a two dimensional array of queries where each queries[i] contains three integers, a, b, and k.   Input Format The first line contains two space-separated integers  and , the size of the array and the number of operations.  Each of the next  lines contains three space-separated integers ,  and , the left index, right index and summand.   Constraints         Output Format Return the integer maximum value in the finished array. Sample Input 5 3 1 2 100 2 5 100 3 4 100  Sample Output 200  Explanation After the first update list will be  100 100 0 0 0.  After the second update list will be  100 200 100 100 100.  After the third update list will be  100 200 200 200 100.  The required answer will be .   100 100 0 0 0 100 200 100 100 100 100 200 200 200 100
__label__Data-Structures This challenge is part of a MyCodeSchool tutorial track and is accompanied by a video lesson. If you're new to linked lists, this is a great exercise for learning about them. Given a pointer to the head node of a linked list, print its elements in order, one element per line. If the head pointer is null (indicating the list is empty), don’t print anything. Input Format The first line of input contains , the number of elements in the linked list.  The next  lines contain one element each, which are the elements of the linked list. Note: Do not read any input from stdin/console. Complete the printLinkedList function in the editor below. Constraints   , where  is the  element of the linked list. Output Format Print the integer data for each element of the linked list to stdout/console (e.g.: using printf, cout, etc.). There should be one element per line. Sample Input 2 16 13  Sample Output 16 13  Explanation There are two elements in the linked list. They are represented as 16 -> 13 -> NULL. So, the printLinkedList function should print 16 and 13 each in a new line.
__label__Data-Structures This challenge is part of a tutorial track by MyCodeSchool and is accompanied by a video lesson. You are given the pointer to the head node of a linked list and an integer to add to the list. Create a new node with the given integer. Insert this node at the tail of the linked list and return the head node of the linked list formed after inserting this new node. The given head pointer may be null, meaning that the initial list is empty. Input Format You have to complete the SinglyLinkedListNode insertAtTail(SinglyLinkedListNode head, int data) method. It takes two arguments: the head of the linked list and the integer to insert at tail. You should not read any input from the stdin/console. SinglyLinkedListNode insertAtTail(SinglyLinkedListNode head, int data) The input is handled by code editor and is as follows:  The first line contains an integer , denoting the elements of the linked list.  The next  lines contain an integer each, denoting the element that needs to be inserted at tail.   Constraints     Output Format Insert the new node at the tail and just return the head of the updated linked list. Do not print anything to stdout/console. return The output is handled by code in the editor and is as follows:  Print the elements of the linked list from head to tail, each in a new line. Sample Input 5 141 302 164 530 474  Sample Output 141 302 164 530 474  Explanation First the linked list is NULL. After inserting 141, the list is 141 -> NULL.  After inserting 302, the list is 141 -> 302 -> NULL.  After inserting 164, the list is 141 -> 302 -> 164 -> NULL.  After inserting 530, the list is 141 -> 302 -> 164 -> 530 -> NULL. After inserting 474, the list is 141 -> 302 -> 164 -> 530 -> 474 -> NULL, which is the final list.
__label__Data-Structures This challenge is part of a tutorial track by MyCodeSchool and is accompanied by a video lesson.  You’re given the pointer to the head node of a linked list and an integer to add to the list. Create a new node with the given integer, insert this node at the head of the linked list and return the new head node. The head pointer given may be null meaning that the initial list is empty. Input Format You have to complete the SinglyLinkedListNode Insert(SinglyLinkedListNode head, int data) method which takes two arguments - the head of the linked list and the integer to insert. You should NOT read any input from stdin/console.   SinglyLinkedListNode Insert(SinglyLinkedListNode head, int data) The input is handled by code in the editor and is as follows:   The first line contains an integer , denoting the number of elements to be inserted at the head of the list.  The next  lines contain an integer each, denoting the element to be inserted.   Constraints     Output Format Insert the new node at the head and return the head of the updated linked list. Do NOT print anything to stdout/console. return The output is handled by the code in the editor and it is as follows: Print the elements of linked list from head to tail, each in a new line. Sample Input 5 383 484 392 975 321  Sample Output 321 975 392 484 383  Explanation Intially the list in NULL. After inserting 383, the list is 383 -> NULL.  After inserting 484, the list is 484 -> 383 -> NULL.  After inserting 392, the list is 392 -> 484 -> 383 -> NULL.  After inserting 975, the list is 975 -> 392 -> 484 -> 383 -> NULL.  After inserting 321, the list is 321 -> 975 -> 392 -> 484 -> 383 -> NULL.
__label__Data-Structures This challenge is part of a tutorial track by MyCodeSchool and is accompanied by a video lesson. You’re given the pointer to the head node of a linked list, an integer to add to the list and the position at which the integer must be inserted. Create a new node with the given integer, insert this node at the desired position and return the head node.   A position of 0 indicates head, a position of 1 indicates one node away from the head and so on. The head pointer given may be null meaning that the initial list is empty.   As an example, if your list starts as  and you want to insert a node at position  with , your new list should be  Function Description Complete the function insertNodeAtPosition in the editor below.  It must return a reference to the head node of your finished list. insertNodeAtPosition has the following parameters: head: a SinglyLinkedListNode pointer to the head of the list data: an integer value to insert as data in your new node position: an integer position to insert the new node, zero based indexing Input Format The first line contains an integer , the number of elements in the linked list.  Each of the next  lines contains an integer SinglyLinkedListNode[i].data.  The next line contains an integer  denoting the data of the node that is to be inserted.  The last line contains an integer . Constraints   , where  is the  element of the linked list.   .   Output Format Return a reference to the list head.  Locked code prints the list for you. Sample Input 3 16 13 7 1 2  Sample Output 16 13 1 7  Explanation The initial linked list is 16 13 7. We have to insert  at the position  which currently has  in it. The updated linked list will be 16 13 1 7 16 13 7 16 13 1 7
__label__Data-Structures This challenge is part of a tutorial track by MyCodeSchool and is accompanied by a video lesson. You’re given the pointer to the head node of a linked list and the position of a node to delete. Delete the node at the given position and return the head node. A position of 0 indicates head, a position of 1 indicates one node away from the head and so on. The list may become empty after you delete the node. Input Format You have to complete the deleteNode(SinglyLinkedListNode* llist, int position) method which takes two arguments - the head of the linked list and the position of the node to delete. You should NOT read any input from stdin/console. position will always be at least 0 and less than the number of the elements in the list. deleteNode(SinglyLinkedListNode* llist, int position) position The first line of input contains an integer , denoting the number of elements in the linked list.  The next  lines contain an integer each in a new line, denoting the elements of the linked list in the order.  The last line contains an integer  denoting the position of the node that has to be deleted form the linked list.   Constraints   , where  is the  element of the linked list. Output Format Delete the node at the given position and return the head of the updated linked list. Do NOT print anything to stdout/console. return The code in the editor will print the updated linked list in a single line separated by spaces. Sample Input 8 20 6 2 19 7 4 15 9 3  Sample Output 20 6 2 7 4 15 9  Explanation The given linked list is 20->6->2->19->7->4->15->9. We have to delete the node at position 3, which is 19. After deleting that node, the updated linked list is: 20->6->2->7->4->15->9 20->6->2->19->7->4->15->9 20->6->2->7->4->15->9
__label__Data-Structures This challenge is part of a tutorial track by MyCodeSchool and is accompanied by a video lesson. You are given the pointer to the head node of a linked list and you need to print all its elements in reverse order from tail to head, one element per line. The head pointer may be null meaning that the list is empty - in that case, do not print anything! Input Format You have to complete the void reversePrint(SinglyLinkedListNode* head) method which takes one argument - the head of the linked list. You should NOT read any input from stdin/console. void reversePrint(SinglyLinkedListNode* head) The first line of input contains , the number of test cases.  The input of each test case is as follows:   The first line contains an integer , denoting the number of elements in the list.   The next n lines contain one element each, denoting the elements of the linked list in the order. Constraints   , where  is the  element in the list.   Output Format Complete the reversePrint function in the editor below and print the elements of the linked list in the reverse order, each in a new line.  Sample Input 3 5 16 12 4 2 5 3 7 3 9 5 5 1 18 3 13  Sample Output 5 2 4 12 16 9 3 7 13 3 18 1 5  Explanation There are three test cases.  The first linked list has  elements: 16 -> 12 -> 4 -> 2 -> 5. Printing this in reverse order will produce: 5 -> 2 -> 4 -> 12 -> 16.  The second linked list has  elements: 7 -> 3 -> 9. Printing this in reverse order will produce: 9 -> 3 -> 7.  The third linked list has  elements: 5 -> 1 -> 18 -> 3 -> 13. Printing this in reverse order will produce: 13 -> 3 -> 18 -> 1 -> 5.   16 -> 12 -> 4 -> 2 -> 5 5 -> 2 -> 4 -> 12 -> 16 7 -> 3 -> 9 9 -> 3 -> 7 5 -> 1 -> 18 -> 3 -> 13 13 -> 3 -> 18 -> 1 -> 5
__label__Data-Structures This challenge is part of a tutorial track by MyCodeSchool and is accompanied by a video lesson. You’re given the pointer to the head node of a linked list. Change the next pointers of the nodes so that their order is reversed. The head pointer given may be null meaning that the initial list is empty. next Input Format You have to complete the SinglyLinkedListNode reverse(SinglyLinkedListNode head) method which takes one argument - the head of the linked list. You should NOT read any input from stdin/console. SinglyLinkedListNode reverse(SinglyLinkedListNode head) The input is handled by the code in the editor and the format is as follows:   The first line contains an integer , denoting the number of test cases.  Each test case is of the following format:   The first line contains an integer , denoting the number of elements in the linked list.  The next  lines contain an integer each, denoting the elements of the linked list.   Constraints     , where  is the  element in the list. Output Format Change the next pointers of the nodes that their order is reversed and return the head of the reversed linked list. Do NOT print anything to stdout/console. next return The output is handled by the code in the editor. The output format is as follows: For each test case, print in a new line the elements of the linked list after reversing it, separated by spaces. Sample Input 1 5 1 2 3 4 5  Sample Output 5 4 3 2 1   Explanation The initial linked list is: 1 -> 2 -> 3 -> 4 -> 5 -> NULL The reversed linked list is: 5 -> 4 -> 3 -> 2 -> 1 -> NULL
__label__Data-Structures This challenge is part of a tutorial track by MyCodeSchool You’re given the pointer to the head nodes of two linked lists. Compare the data in the nodes of the linked lists to check if they are equal. The lists are equal only if they have the same number of nodes and corresponding nodes contain the same data. Either head pointer given may be null meaning that the corresponding list is empty. Input Format You have to complete the int CompareLists(Node* headA, Node* headB) method which takes two arguments - the heads of the two linked lists to compare. You should NOT read any input from stdin/console. int CompareLists(Node* headA, Node* headB) The input is handled by the code in the editor and the format is as follows:  The first line contains , the number of test cases. The format for each test case is as follows:   The first line contains an integer , denoting the number of elements in the first linked list.  The next  lines contain an integer each, denoting the elements of the first linked list.  The next line contains an integer , denoting the number of elements in the second linked list.  The next  lines contain an integer each, denoting the elements of the second linked list.   Constraints     , where  is the  element in the list.   Output Format Compare the two linked lists and return 1 if the lists are equal. Otherwise, return 0. Do NOT print anything to stdout/console. return return The output is handled by the code in the editor and it is as follows:   For each test case, in a new line, print  if the two lists are equal, else print .   Sample Input 2 2 1 2 1 1 2 1 2 2 1 2  Sample Output 0 1  Explanation In the first case, linked lists are: 1 -> 2 -> NULL and 1 -> NULL In the second case, linked lists are: 1 -> 2 -> NULL and 1 -> 2 -> NULL
__label__Data-Structures This challenge is part of a tutorial track by MyCodeSchool You’re given the pointer to the head nodes of two sorted linked lists. The data in both lists will be sorted in ascending order. Change the next pointers to obtain a single, merged linked list which also has data in ascending order. Either head pointer given may be null meaning that the corresponding list is empty. next Input Format You have to complete the SinglyLinkedListNode MergeLists(SinglyLinkedListNode headA, SinglyLinkedListNode headB) method which takes two arguments - the heads of the two sorted linked lists to merge. You should NOT read any input from stdin/console. SinglyLinkedListNode MergeLists(SinglyLinkedListNode headA, SinglyLinkedListNode headB) The input is handled by the code in the editor and the format is as follows:   The first line contains an integer , denoting the number of test cases.  The format for each test case is as follows:   The first line contains an integer , denoting the length of the first linked list.  The next  lines contain an integer each, denoting the elements of the linked list.  The next line contains an integer , denoting the length of the second linked list.  The next  lines contain an integer each, denoting the elements of the second linked list.   Constraints    , where  is the  element of the list. Output Format Change the next pointer of individual nodes so that nodes from both lists are merged into a single list. Then return the head of this merged list. Do NOT print anything to stdout/console. next return The output is handled by the editor and the format is as follows:   For each test case, print in a new line, the linked list after merging them separated by spaces.   Sample Input 1 3 1 2 3 2 3 4  Sample Output 1 2 3 3 4   Explanation The first linked list is: 1 -> 2 -> 3 -> NULL The second linked list is: 3 -> 4 -> NULL Hence, the merged linked list is: 1 -> 2 -> 3 -> 3 -> 4 -> NULL
__label__Data-Structures This challenge is part of a tutorial track by MyCodeSchool You’re given the pointer to the head node of a linked list and a specific position. Counting backwards from the tail node of the linked list, get the value of the node at the given position. A position of 0 corresponds to the tail, 1 corresponds to the node before the tail and so on. Input Format You have to complete the int getNode(SinglyLinkedListNode* head, int positionFromTail) method which takes two arguments - the head of the linked list and the position of the node from the tail. positionFromTail will be at least 0 and less than the number of nodes in the list. You should NOT read any input from stdin/console.  int getNode(SinglyLinkedListNode* head, int positionFromTail) The first line will contain an integer , the number of test cases.  Each test case has the following format:  The first line contains an integer , the number of elements in the linked list.  The next  lines contains, an element each denoting the element of the linked list.  The last line contains an integer  denoting the position from the tail, whose value needs to be found out and returned.    Constraints     , where  is the  element of the linked list.    Output Format Find the node at the given position counting backwards from the tail. Then return the data contained in this node. Do NOT print anything to stdout/console. return data The code in the editor handles output.  For each test case, print the value of the node, each in a new line.   Sample Input 2 1 1 0 3 3 2 1 2  Sample Output 1 3  Explanation In first case, there is one element in linked list with value 1. Hence, last element is 1. In second case, there are 3 elements with values 3, 2 and 1 (3 -> 2 -> 1). Hence, element with position of 2 from tail is 3.
__label__Data-Structures This challenge is part of a tutorial track by MyCodeSchool You're given the pointer to the head node of a sorted linked list, where the data in the nodes is in ascending order. Delete as few nodes as possible so that the list does not contain any value more than once. The given head pointer may be null indicating that the list is empty. Input Format You have to complete the SinglyLinkedListNode* removeDuplicates(SinglyLinkedListNode* head) method which takes one argument - the head of the sorted linked list. You should NOT read any input from stdin/console. SinglyLinkedListNode* removeDuplicates(SinglyLinkedListNode* head) The input is handled by the code in the editor and the format is as follows:   The first line contains an integer , denoting the number of test cases. The format for each test case is as follows:   The first line contains an integer , denoting the number of elements in the linked list.  The next  lines contain an integer each, denoting the elements of the linked list. Constraints     Output Format Delete as few nodes as possible to ensure that no two nodes have the same data. Adjust the next pointers to ensure that the remaining nodes form a single sorted linked list. Then return the head of the sorted updated linked list. Do NOT print anything to stdout/console. next return The output is handled by the code in the editor and the format is as follows: For each test case, print in a new line, the data of the linked list after removing the duplicates separated by space. Sample Input 1 5 1 2 2 3 4  Sample Output 1 2 3 4   Explanation The initial linked list is: 1 -> 2 -> 2 -> 3 -> 4 -> NULL The final linked list is: 1 -> 2 -> 3 -> 4 -> NULL
__label__Data-Structures A linked list is said to contain a cycle if any node is visited more than once while traversing the list.  Complete the function provided for you in your editor. It has one parameter: a pointer to a Node object named  that points to the head of a linked list. Your function must return a boolean denoting whether or not there is a cycle in the list. If there is a cycle, return true; otherwise, return false. Note: If the list is empty,  will be null. Input Format Our hidden code checker passes the appropriate argument to your function. You are not responsible for reading any input from stdin. Constraints  Output Format If the list contains a cycle, your function must return true. If the list does not contain a cycle, it must return false. The binary integer corresponding to the boolean value returned by your function is printed to stdout by our hidden code checker. Sample Input The following linked lists are passed as arguments to your function:       Sample Output 0 1  Explanation The first list has no cycle, so we return false and the hidden code checker prints  to stdout. The second list has a cycle, so we return true and the hidden code checker prints  to stdout.
__label__Data-Structures This challenge is part of a tutorial track by MyCodeSchool Given pointers to the head nodes of  linked lists that merge together at some point, find the Node where the two lists merge. It is guaranteed that the two head Nodes will be different, and neither will be NULL. In the diagram below, the two lists converge at Node x: x [List #1] a--->b--->c                      \                       x--->y--->z--->NULL                      /      [List #2] p--->q  Complete the int findMergeNode(SinglyLinkedListNode* head1, SinglyLinkedListNode* head2) method so that it finds and returns the data value of the Node where the two lists merge.  int findMergeNode(SinglyLinkedListNode* head1, SinglyLinkedListNode* head2) Input Format Do not read any input from stdin/console. The findMergeNode(SinglyLinkedListNode,SinglyLinkedListNode) method has two parameters,  and , which are the non-null head Nodes of two separate linked lists that are guaranteed to converge.   findMergeNode(SinglyLinkedListNode,SinglyLinkedListNode) Constraints The lists will merge.  .   .  Output Format Do not write any output to stdout/console.  Each Node has a data field containing an integer.  Return the integer data for the Node where the two lists merge.   Sample Input The diagrams below are graphical representations of the lists that input Nodes  and  are connected to. Recall that this is a method-only challenge; the method only has initial visibility to those  Nodes and must explore the rest of the Nodes using some algorithm of your own design. Test Case 0  1   \    2--->3--->NULL   /  1  Test Case 1 1--->2       \        3--->Null       /      1  Sample Output 2 3  Explanation Test Case 0: As demonstrated in the diagram above, the merge Node's data field contains the integer .  Test Case 1: As demonstrated in the diagram above, the merge Node's data field contains the integer .
__label__Data-Structures Given a reference to the head of a doubly-linked list and an integer, , create a new DoublyLinkedListNode object having data value  and insert it into a sorted linked list while maintaining the sort. Function Description Complete the sortedInsert function in the editor below. It must return a reference to the head of your modified DoublyLinkedList. sortedInsert has two parameters: head: A reference to the head of a doubly-linked list of DoublyLinkedListNode objects. data: An integer denoting the value of the  field for the DoublyLinkedListNode you must insert into the list. Note: Recall that an empty list (i.e., where ) and a list with one element are sorted lists.  Input Format The first line contains an integer , the number of test cases. Each of the test case is in the following format:   The first line contains an integer , the number of elements in the linked list.   Each of the next  lines contains an integer, the data for each node of the linked list.   The last line contains an integer  which needs to be inserted into the sorted doubly-linked list. Constraints      Output Format Do not print anything to stdout. Your method must return a reference to the  of the same list that was passed to it as a parameter. The ouput is handled by the code in the editor and is as follows:  For each test case, print the elements of the sorted doubly-linked list separated by spaces on a new line.   Sample Input 1 4 1 3 4 10 5  Sample Output 1 3 4 5 10  Explanation The initial doubly linked list is:  .  The doubly linked list after insertion is:
__label__Data-Structures This challenge is part of a tutorial track by MyCodeSchool You’re given the pointer to the head node of a doubly linked list. Reverse the order of the nodes in the list. The head node might be NULL to indicate that the list is empty.  Change the next and prev pointers of all the nodes so that the direction of the list is reversed. Return a reference to the head node of the reversed list.  Function Description Complete the reverse function in the editor below.  It should return a reference to the head of your reversed list. reverse has the following parameter(s): head: a reference to the head of a DoublyLinkedList Input Format The first line contains an integer , the number of test cases.   Each test case is of the following format: The first line contains an integer , the number of elements in the linked list.   The next  lines contain an integer each denoting an element of the linked list. Constraints       Output Format Return a reference to the head of your reversed list.  The provided code will print the reverse array as a one line of space-separated integers for each test case.   Sample Input 1 4 1 2 3 4  Sample Output 4 3 2 1   Explanation The initial doubly linked list is:   The reversed doubly linked list is:
__label__Tree __label__Data-Structures Complete the preOrder function in your editor below, which has  parameter: a pointer to the root of a binary tree. It must print the values in the tree's preorder traversal as a single line of space-separated values.   Input Format Our hidden tester code passes the root node of a binary tree to your preOrder function. Constraints  Nodes in the tree   Output Format Print the tree's preorder traversal as a single line of space-separated values. Sample Input      1       \        2         \          5         /  \        3    6         \          4    Sample Output 1 2 5 3 4 6
__label__Tree __label__Data-Structures Complete the postOrder function in your editor below, which has  parameter: a pointer to the root of a binary tree. It must print the values in the tree's postorder traversal as a single line of space-separated values.   Input Format Our hidden tester code passes the root node of a binary tree to your postOrder function. Constraints 1 Nodes in the tree   500 Output Format Print the tree's postorder traversal as a single line of space-separated values. Sample Input      1       \        2         \          5         /  \        3    6         \          4  Sample Output 4 3 6 5 2 1
__label__Tree __label__Data-Structures Complete the inOrder function in your editor below, which has  parameter: a pointer to the root of a binary tree. It must print the values in the tree's inorder traversal as a single line of space-separated values.   Input Format Our hidden tester code passes the root node of a binary tree to your inOrder function. Constraints 1 Nodes in the tree   500 Output Format Print the tree's inorder traversal as a single line of space-separated values. Sample Input      1       \        2         \          5         /  \        3    6         \          4    Sample Output 1 2 3 4 5 6
__label__Tree __label__Data-Structures The height of a binary tree is the number of edges between the tree's root and its furthest leaf.  For example, the following binary tree is of height :   Function Description Complete the getHeight or height function in the editor.  It must return the height of a binary tree as an integer. getHeight or height has the following parameter(s): root: a reference to the root of a binary tree.     Note -The Height of binary tree with single node is taken as zero.   Input Format The first line contains an integer , the number of nodes in the tree.  Next line contains  space separated integer where th integer denotes node[i].data. Note:  Node values are inserted into a binary search tree before a reference to the tree's root node is passed to your function.  In a binary search tree, all nodes on the left branch of a node are less than the node value.  All values on the right branch are greater than the node value. Constraints    Output Format Your function should return a single integer denoting the height of the binary tree. Sample Input  Sample Output 3  Explanation The longest root-to-leaf path is shown below:  There are  nodes in this path that are connected by  edges, meaning our binary tree's .
__label__Tree __label__Data-Structures You are given a pointer to the root of a binary tree. Print the top view of the binary tree.  Top view means when you look the tree from the top the nodes, what you will see will be called the top view of the tree. See the example below.  You only have to complete the function.  For example :    1     \      2       \        5       /  \      3    6       \        4  Top View : 1 -> 2 -> 5 -> 6 Input Format You are given a function, void topView(node * root) {  }  Constraints 1 Nodes in the tree   500 Output Format Print the values on a single line separated by space. Sample Input    1     \      2       \        5       /  \      3    6       \        4  Sample Output 1 2 5 6 Explanation    1     \      2       \        5       /  \      3    6       \        4  From the top only nodes 1,2,5,6 will be visible.
__label__Tree __label__Data-Structures You are given a pointer to the root of a binary tree. You need to print the level order traversal of this tree. In level order traversal, we visit the nodes level by level from left to right.  You only have to complete the function.  For example:      1       \        2         \          5         /  \        3    6         \          4    For the above tree, the level order traversal is 1 -> 2 -> 5 -> 3 -> 6 -> 4. Input Format You are given a function, void levelOrder(Node * root) {  }  Constraints 1 Nodes in the tree   500 Output Format Print the values in a single line separated by a space. Sample Input      1       \        2         \          5         /  \        3    6         \          4    Sample Output 1 2 5 3 6 4 Explanation We need to print the nodes level by level. We process each level from left to right.  Level Order Traversal: 1 -> 2 -> 5 -> 3 -> 6 -> 4.
__label__Tree __label__Data-Structures You are given a pointer to the root of a binary search tree and values to be inserted into the tree. Insert the values into their appropriate position in the binary search tree and return the root of the updated binary tree. You just have to complete the function. Input Format You are given a function, Node * insert (Node * root ,int data) {  }  Constraints No. of nodes in the  tree  500 Output Format Return the root of the binary search tree after inserting the value into the tree. Sample Input         4        / \       2   7      / \     1   3  The value to be inserted is 6. Sample Output          4        /   \       2     7      / \   /     1   3 6
__label__Tree __label__Data-Structures Huffman coding assigns variable length codewords to fixed length input characters based on their frequencies. More frequent characters are assigned shorter codewords and less frequent characters are assigned longer codewords. All edges along the path to a character contain a code digit.  If they are on the left side of the tree, they will be a 0 (zero).  If on the right, they'll be a 1 (one).  Only the leaves will contain a letter and its frequency count.  All other nodes will contain a null instead of a character, and the count of the frequency of all of it and its descendant characters. For instance, consider the string ABRACADABRA.  There are a total of  characters in the string.  This number should match the count in the ultimately determined root of the tree.  Our frequencies are  and .  The two smallest frequencies are for  and , both equal to , so we'll create a tree with them.  The root node will contain the sum of the counts of its descendants, in this case .  The left node will be the first character encountered, , and the right will contain .  Next we have  items with a character count of :  the tree we just created, the character  and the character .  The tree came first, so it will go on the left of our new root node.   will go on the right.  Repeat until the tree is complete, then fill in the 's and 's for the edges.  The finished graph looks like:    Input characters are only present in the leaves. Internal nodes have a character value of ϕ (NULL).  We can determine that our values for characters are:   A - 0 B - 111 C - 1100 D - 1101 R - 10  Our Huffman encoded string is: A B    R  A C     A D     A B    R  A 0 111 10 0 1100 0 1101 0 111 10 0 or 01111001100011010111100  To avoid ambiguity, Huffman encoding is a prefix free encoding technique.  No codeword appears as a prefix of any other codeword.   To decode the encoded string, follow the zeros and ones to a leaf and return the character there.   You are given pointer to the root of the Huffman tree and a binary coded string to decode. You need to print the decoded string. Function Description Complete the function decode_huff in the editor below.  It must return the decoded string. decode_huff has the following parameters:   root: a reference to the root node of the Huffman tree s: a Huffman encoded string Input Format There is one line of input containing the plain string, .  Background code creates the Huffman tree then passes the head node and the encoded string to the function. Constraints  Output Format Output the decoded string on a single line. Sample Input   s="1001011"  Sample Output ABACA  Explanation S="1001011" Processing the string from left to right. S[0]='1' : we move to the right child of the root. We encounter a leaf node with value 'A'. We add 'A' to the decoded string. We move back to the root.  S[1]='0' : we move to the left child.  S[2]='0' : we move to the left child. We encounter a leaf node with value 'B'. We add 'B' to the decoded string. We move back to the root.  S[3] = '1' : we move to the right child of the root. We encounter a leaf node with value 'A'. We add 'A' to the decoded string. We move back to the root.  S[4]='0' : we move to the left child.  S[5]='1' : we move to the right child. We encounter a leaf node with value C'. We add 'C' to the decoded string. We move back to the root.   S[6] = '1' : we move to the right child of the root. We encounter a leaf node with value 'A'. We add 'A' to the decoded string. We move back to the root.  Decoded String = "ABACA"
__label__Tree __label__Data-Structures You are given pointer to the root of the binary search tree and two values  and . You need to return the lowest common ancestor (LCA) of  and  in the binary search tree.     In the diagram above, the lowest common ancestor of the nodes  and  is the node .  Node  is the lowest node which has nodes  and  as descendants. Function Description  Complete the function lca in the editor below.  It should return a pointer to the lowest common ancestor node of the two values given.   lca has the following parameters:  -  root: a pointer to the root node of a binary search tree  -  v1: a node.data value  -  v2: a node.data value   Input Format The first line contains an integer, , the number of nodes in the tree.  The second line contains  space-separated integers representing  values.  The third line contains two space-separated integers,  and .   To use the test data, you will have to create the binary search tree yourself.  Here on the platform, the tree will be created for you. Constraints       The tree will contain nodes with data equal to  and .   Output Format Return the a pointer to the node that is the lowest common ancestor of  and . Sample Input 6 4 2 3 1 7 6 1 7     and . Sample Output [reference to node 4] Explanation LCA of  and  is , the root in this case.  Return a pointer to the node.
__label__Tree __label__Data-Structures A binary tree is a tree which is characterized by one of the following properties: It can be empty (null). It contains a root node only. It contains a root node with a left subtree, a right subtree, or both. These subtrees are also binary trees. In-order traversal is performed as Traverse the left subtree. Visit root. Traverse the right subtree. For this in-order traversal, start from the left child of the root node and keep exploring the left subtree until you reach a leaf.  When you reach a leaf, back up to its parent, check for a right child and visit it if there is one.  If there is not a child, you've explored its left and right subtrees fully. If there is a right child, traverse its left subtree then its right in the same manner.  Keep doing this until you have traversed the entire tree.  You will only store the values of a node as you visit when one of the following is true: it is the first node visited, the first time visited  it is a leaf, should only be visited once   all of its subtrees have been explored, should only be visited once while this is true   it is the root of the tree, the first time visited   Swapping: Swapping subtrees of a node means that if initially node has left subtree L and right subtree R, then after swapping, the left subtree will be R and the right subtree, L. L R R L For example, in the following tree, we swap children of node 1. 1                                 Depth     1               1            [1]    / \             / \   2   3     ->    3   2          [2]    \   \           \   \     4   5           5   4        [3]  In-order traversal of left tree is 2 4 1 3 5 and of right tree is 3 5 1 2 4. 2 4 1 3 5 3 5 1 2 4 Swap operation:  We define depth of a node as follows: The root node is at depth 1. If the depth of the parent node is d, then the depth of current node will be d+1. d d+1 Given a tree and an integer, k, in one operation, we need to swap the subtrees of all the nodes at each depth h, where h ∈ [k, 2k, 3k,...].  In other words, if h is a multiple of k, swap the left and right subtrees of that level. k h h ∈ [k, 2k, 3k,...] h k You are given a tree of n nodes where nodes are indexed from [1..n] and it is rooted at 1. You have to perform t swap operations on it, and after each swap operation print the in-order traversal of the current state of the tree. n [1..n] 1 t Function Description Complete the swapNodes function in the editor below.  It should return a two-dimensional array where each element is an array of integers representing the node indices of an in-order traversal after a swap operation. swapNodes has the following parameter(s):  - indexes: an array of integers representing index values of each , beginning with , the first element, as the root.  - queries: an array of integers, each representing a  value. Input Format  The first line contains n, number of nodes in the tree.    n Each of the next n lines contains two integers, a b, where a is the index of left child, and b is the index of right child of ith node.    n a b a b Note: -1 is used to represent a null node.    -1 The next line contains an integer, t, the size of .  Each of the next t lines contains an integer , each being a value .   t t Output Format  For each k, perform the swap operation and store the indices of your in-order traversal to your result array.  After all swap operations have been performed, return your result array for printing.   k Constraints        Either  or   Either  or   The index of a non-null child will always be greater than that of its parent.   Sample Input 0  3 2 3 -1 -1 -1 -1 2 1 1  Sample Output 0  3 1 2 2 1 3  Explanation 0 As nodes 2 and 3 have no children, swapping will not have any effect on them. We only have to swap the child nodes of the root node.     1   [s]       1    [s]       1       / \      ->   / \        ->  / \     2   3 [s]     3   2  [s]     2   3  Note: [s] indicates that a swap operation is done at this depth. [s] Sample Input 1  5 2 3 -1 4 -1 5 -1 -1 -1 -1 1 2  Sample Output 1  4 2 1 5 3  Explanation 1 Swapping child nodes of node 2 and 3 we get     1                  1      / \                / \    2   3   [s]  ->    2   3    \   \            /   /      4   5          4   5    Sample Input 2  11 2 3 4 -1 5 -1 6 -1 7 8 -1 9 -1 -1 10 11 -1 -1 -1 -1 -1 -1 2 2 4  Sample Output 2  2 9 6 4 1 3 7 5 11 8 10 2 6 9 4 1 3 7 5 10 8 11  Explanation 2  Here we perform swap operations at the nodes whose depth is either 2 or 4 for  and then at nodes whose depth is 4 for .          1                     1                          1                      / \                   / \                        / \                    /   \                 /   \                      /   \                  2     3    [s]        2     3                    2     3                /      /                \     \                    \     \              /      /                  \     \                    \     \            4      5          ->        4     5          ->        4     5          /      / \                  /     / \                  /     / \        /      /   \                /     /   \                /     /   \      6      7     8   [s]        6     7     8   [s]        6     7     8  \          / \            /           / \              \         / \      \        /   \          /           /   \              \       /   \      9      10   11        9           11   10              9     10   11
__label__Tree __label__Data-Structures Kitty has a tree, , consisting of  nodes where each node is uniquely labeled from  to . Her friend Alex gave her  sets, where each set contains  distinct nodes. Kitty needs to calculate the following expression on each set:   where:  denotes an unordered pair of nodes belonging to the set.  denotes the number of edges on the unique path between nodes  and . Given  and  sets of  distinct nodes, can you help her calculate the expression for each set? For each set of nodes, print the value of the expression modulo  on a new line. Input Format The first line contains two space-separated integers describing the respective values of  (the number of nodes in tree ) and  (the number of sets).  Each of the  subsequent lines contains two space-separated integers,  and , describing an undirected edge between nodes  and .  The  subsequent lines define each set over two lines in the following format: The first line contains an integer, , denoting the size of the set.  The second line contains  space-separated integers describing the set's elements. Constraints        The sum of  over all  does not exceed .  All elements in each set are distinct.  Subtasks  for  of the maximum score.   for  of the maximum score.  for  of the maximum score. Output Format Print  lines of output where each line  contains the expression for the  query, modulo . Sample Input 0 Sample Output 0 Explanation 0 Tree  looks like this:  We perform the following calculations for  sets: Set : Given set , the only pair we can form is , where . We then calculate the following answer and print it on a new line:   Set : Given set , we cannot form any pairs because we don't have at least two elements. Thus, we print  on a new line. Set : Given set , we cannot form any pairs because we don't have at least two elements. Thus, we print  on a new line. Set : Given set , we can form the pairs , , and . We then calculate the following answer and print it on a new line: Set : Given set , we can form the pairs , , and . We then calculate the following answer and print it on a new line:
__label__Tree __label__Data-Structures For the purposes of this challenge, we define a binary tree to be a binary search tree with the following ordering requirements: The  value of every node in a node's left subtree is less than the data value of that node. The  value of every node in a node's right subtree is greater than the data value of that node. Given the root node of a binary tree, can you determine if it's also a binary search tree?  Complete the function in your editor below, which has  parameter: a pointer to the root of a binary tree. It must return a boolean denoting whether or not the binary tree is a binary search tree. You may have to write one or more helper functions to complete this challenge. Input Format You are not responsible for reading any input from stdin. Hidden code stubs will assemble a binary tree and pass its root node to your function as an argument. Constraints  Output Format You are not responsible for printing any output to stdout. Your function must return true if the tree is a binary search tree; otherwise, it must return false. Hidden code stubs will print this result as a Yes or No answer on a new line. Sample Input  Sample Output No
__label__Tree __label__Data-Structures The square-ten tree decomposition of an array is defined as follows: The lowest () level of the square-ten tree consists of single array elements in their natural order. The  level (starting from ) of the square-ten tree consists of subsequent array subsegments of length  in their natural order. Thus, the  level contains subsegments of length , the  level contains subsegments of length , the  level contains subsegments of length , etc. In other words, every  level (for every ) of square-ten tree consists of array subsegments indexed as:    The image below depicts the bottom-left corner (i.e., the first  array elements) of the table representing a square-ten tree. The levels are numbered from bottom to top:  Task  Given the borders of array subsegment , find its decomposition into a minimal number of nodes of a square-ten tree. In other words, you must find a subsegment sequence  such as  for every , , , where every  belongs to any of the square-ten tree levels and  is minimal amongst all such variants. Input Format The first line contains a single integer denoting .  The second line contains a single integer denoting . Constraints  The numbers in input do not contain leading zeroes. Output Format As soon as array indices are too large, you should find a sequence of  square-ten tree level numbers, , meaning that subsegment  belongs to the  level of the square-ten tree.  Print this sequence in the following compressed format:  On the first line, print the value of  (i.e., the compressed sequence block count).  For each of the  subsequent lines, print  space-separated integers,  and  (, ), meaning that the number  appears consequently  times in sequence . Blocks should be listed in the order they appear in the sequence. In other words,  should be equal to ,  should be equal to , etc. Thus  must be true and  must be true for every . All numbers should be printed without leading zeroes. Sample Input 0 Sample Output 0 Explanation 0 Segment  belongs to level  of the square-ten tree.
__label__Tree __label__Data-Structures Greg has a tree of nodes containing integer data.  He wants to insert a node with some non-zero integer value somewhere into the tree.  His goal is to be able to cut two edges and have the values of each of the three new trees sum to the same amount.  This is called a balanced forest.  Being frugal, the data value he inserts should be minimal.  Determine the minimal amount that a new node can have to allow creation of a balanced forest.  If it's not possible to create a balanced forest, return -1. For example, you are given node values  and .  It is the following tree:     The blue node is root, the first number in a node is node number and the second is its value.  Cuts can be made between nodes  and  and nodes  and  to have three trees with sums ,  and .  Adding a new node  of  to the third tree completes the solution.   Function Description Complete the balancedForest function in the editor below.  It must return an integer representing the minimum value of  that can be added to allow creation of a balanced forest, or  if it is not possible.   balancedForest has the following parameter(s): c: an array of integers, the data values for each node   edges: an array of 2 element arrays, the node pairs per edge   Input Format The first line contains a single integer, , the number of queries.   Each of the following  sets of lines is as follows:   The first line contains an integer, , the number of nodes in the tree.  The second line contains  space-separated integers describing the respective values of , where each  denotes the value at node . Each of the following  lines contains two space-separated integers,  and , describing edge  connecting nodes  and . Constraints       Each query forms a valid undirected tree.   Subtasks For  of the maximum score:   For  of the maximum score:   Output Format For each query, return the minimum value of the integer .  If no such value exists, return  instead.  Sample Input 2 5 1 2 2 1 1 1 2 1 3 3 5 1 4 3 1 3 5 1 3 1 2  Sample Output 2 -1  Explanation We perform the following two queries: The tree initially looks like this:         Greg can add a new node  with  and create a new edge connecting nodes  and . Then he cuts the edge connecting nodes  and  and the edge connecting nodes  and . We now have a three-tree balanced forest where each tree has a sum of .       In the second query, it's impossible to add a node in such a way that we can split the tree into a three-tree balanced forest so we return .
__label__Tree __label__Data-Structures Jenny loves experimenting with trees. Her favorite tree has  nodes connected by  edges, and each edge is  unit in length. She wants to cut a subtree (i.e., a connected part of the original tree) of radius  from this tree by performing the following two steps: Choose a node, , from the tree. Cut a subtree consisting of all nodes which are not further than  units from node .  For example, the blue nodes in the diagram below depict a subtree centered at  that has radius :  Given , , and the definition of Jenny's tree, find and print the number of different subtrees she can cut out. Two subtrees are considered to be different if they are not  isomorphic. Input Format The first line contains two space-separated integers denoting the respective values of  and .  Each of the next  subsequent lines contains two space-separated integers,  and , describing a bidirectional edge in Jenny's tree having length . Constraints      Subtasks For  of the max score:     Output Format Print the total number of different possible subtrees. Sample Input 0 Sample Output 0 Explanation 0 In the diagram below, blue nodes denote the possible subtrees:  The last  subtrees are considered to be the same (i.e., they all consist of two nodes connected by one edge), so we print  as our answer. Sample Input 1 Sample Output 1 Explanation 1 In the diagram below, blue nodes denote the possible subtrees:  Here, we have four possible different subtrees.
__label__Tree __label__Data-Structures We consider metric space to be a pair, , where  is a set and  such that the following conditions hold:     where  is the distance between points  and . Let's define the product of two metric spaces, , to be  such that:  , where , . So, it follows logically that  is also a metric space. We then define squared metric space, , to be the product of a metric space multiplied with itself: . For example, , where  is a metric space. , where . In this challenge, we need a tree-space. You're given a tree, , where  is the set of vertices and  is the set of edges. Let the function  be the distance between two vertices in tree  (i.e.,  is the number of edges on the path between vertices  and ). Note that  is a metric space. You are given a tree, , with  vertices, as well as  points in . Find and print the distance between the two furthest points in this metric space! Input Format The first line contains two space-separated positive integers describing the respective values of  (the number of vertices in ) and  (the number of given points).  Each line  of the  subsequent lines contains two space-separated integers,  and , describing edge  in .  Each line  of the  subsequent lines contains two space-separated integers describing the respective values of  and  for point . Constraints     Scoring This challenge uses binary scoring, so you must pass all test cases to earn a positive score. Output Format Print a single non-negative integer denoting the maximum distance between two of the given points in metric space . Sample Input 0 Sample Output 0 Explanation 0 The distance between points  and  is . Sample Input 1 Sample Output 1 Explanation 1 The best points are  and , which gives us a distance of .
__label__Tree __label__Data-Structures An AVL tree (Georgy Adelson-Velsky and Landis' tree, named after the inventors) is a self-balancing binary search tree.  In an AVL tree, the heights of the two child subtrees of any node differ by at most one; if at any time they differ by more than one, rebalancing is done to restore this property. We define balance factor for each node as : balanceFactor = height(left subtree) - height(right subtree)  The balance factor of any node of an AVL tree is in the integer range [-1,+1]. If after any modification in the tree, the balance factor becomes less than −1 or greater than +1, the subtree rooted at this node is unbalanced, and a rotation is needed.  (https://en.wikipedia.org/wiki/AVL_tree)         You are given a pointer to the root of an AVL tree. You need to insert a value into this tree and perform the necessary rotations to ensure that it remains balanced.  Input Format  You are given a function, node *insert(node * root,int new_val) {   }  'node' is defined as : struct node { int val;            //value struct node* left;  //left child struct node* right; //right child int ht;             //height of the node } node;  You only need to complete the function.      Note: All the values in the tree will be distinct. Height of a Null node is -1 and the height of the leaf node is 0.  Output Format  Insert the new value into the tree and return a pointer to the root of the tree. Ensure that the tree remains balanced. Sample Input      3   /  \  2    4        \         5  The value to be inserted is 6. Sample Output     3   /  \  2    5      / \     4   6  Explanation After inserting 6 in the tree. the tree becomes:     3 (Balance Factor = -2)   /  \  2    4 (Balance Factor = -2)        \         5 (Balance Factor = -1)          \           6 (Balance Factor = 0)  Balance Factor of nodes 3 and 4 is no longer in the range [-1,1]. We need to perform a rotation to balance the tree. This is the right right case. We perform a single rotation to balance the tree. After performing the rotation, the tree becomes :                                3 (Balance Factor = -1)                             /   \       (Balance Factor = 0) 2     5 (Balance Factor = 0)                                 / \            (Balance Factor = 0)4   6 (Balance Factor = 0)
__label__Data-Structures Given two numbers  and .  indicates the number of elements in the array  and  indicates number of queries. You need to perform two types of queries on the array .   You are given  queries. Queries can be of two types, type 1 and type 2.   Type 1 queries are represented as 1 i j : Modify the given array by removing elements from  to  and adding them to the front.   Type 1 queries are represented as 1 i j : Modify the given array by removing elements from  to  and adding them to the front.   1 i j Type 2 queries are represented as 2 i j : Modify the given array by removing elements from  to  and adding them to the back.   Type 2 queries are represented as 2 i j : Modify the given array by removing elements from  to  and adding them to the back.   2 i j Your task is to simply print  of the resulting array after the execution of  queries followed by the resulting array.   Note While adding at back or front the order of elements is preserved.   Input Format First line consists of two space-separated integers,  and .  Second line contains  integers, which represent the elements of the array.   queries follow. Each line contains a query of either type 1 or type 2 in the form   Constraints       Output Format Print the absolute value i.e.  in the first line.  Print elements of the resulting array in the second line. Each element should be seperated by a single space. Sample Input 8 4 1 2 3 4 5 6 7 8 1 2 4 2 3 5 1 4 7 2 1 4  Sample Output 1 2 3 6 5 7 8 4 1  Explanation Given array is .  After execution of query , the array becomes .  After execution of query , the array becomes .  After execution of query , the array becomes .  After execution of query , the array becomes .  Now  is  i.e.  and the array is
__label__Search __label__Tree __label__Data-Structures The median of  numbers is defined as the middle number after sorting them in order if  is odd. Or it is the average of the middle two numbers if  is even. You start with an empty number list. Then, you can add numbers to the list, or remove existing numbers from it. After each add or remove operation, output the median. Example:  For a set of  numbers  the median is the third number in the sorted set , which is . Similarly, for a set of  numbers, , the median is the average of the second and the third element in the sorted set , which is .   Input:  The first line is an integer, , that indicates the number of operations. Each of the next  lines is either a x or r x. a x indicates that  is added to the set, and r x indicates that  is removed from the set. Output:  For each operation: If the operation is add, output the median after adding  in a single line. If the operation is remove and the number  is not in the list, output Wrong! in a single line. If the operation is remove and the number  is in the list, output the median after deleting  in a single line. (If the result is an integer DO NOT output decimal point. And if the result is a real number, DO NOT output trailing 0s.) Note  If your median is 3.0, print only 3. And if your median is 3.50, print only 3.5. Whenever you need to print the median and the list is empty, print Wrong! Constraints:    For each a x or r x,  will always be a signed integer (which will fit in 32 bits). Sample Input:  7   r 1   a 1   a 2   a 1   r 1   r 2   r 1    Sample Output:  Wrong!   1   1.5   1   1.5   1   Wrong!  Note: As evident from the last line of the input, if after remove operation the list becomes empty, you have to print Wrong!.
__label__Data-Structures People connect with each other in a social network. A connection between Person  and Person  is represented as . When two persons belonging to different communities connect, the net effect is the merger of both communities which  and  belongs to.  At the beginning, there are  people representing  communities. Suppose person  and  connected and later  and  connected, then ,, and  will belong to the same community. There are two type of queries:  communities containing person  and  merged (if they belong to different communities).  communities containing person  and  merged (if they belong to different communities).  print the size of the community to which person  belongs.   print the size of the community to which person  belongs.  Input Format The first line of input will contain integers  and , i.e. the number of people and the number of queries. The next  lines will contain the queries. Constraints :   Output Format The output of the queries. Sample Input 3 6 Q 1 M 1 2 Q 2 M 2 3 Q 3 Q 2  Sample Output 1 2 3 3  Explanation Initial size of each of the community is .
__label__Data-Structures This question is designed to help you get a better understanding of basic heap operations.  You will be given queries of  types: " "  - Add an element  to the heap.   " "  - Delete the element  from the heap.   "" - Print the minimum of all the elements in the heap. NOTE: It is guaranteed that the element to be deleted will be there in the heap. Also, at any instant, only distinct elements will be in the heap. Input Format The first line contains the number of queries, .  Each of the next  lines contains a single query of any one of the  above mentioned types.    Constraints     Output Format For each query of type , print the minimum value on a single line.   Sample Input 5   1 4   1 9   3   2 4   3    Sample Output 4   9   Explanation After the first  queries, the heap contains {}. Printing the minimum gives  as the output. Then, the  query deletes  from the heap, and the  query gives  as the output.
__label__Data-Structures You have an empty sequence, and you will be given  queries. Each query is one of these three types: 1 x  -Push the element x into the stack. 2    -Delete the element present at the top of the stack. 3    -Print the maximum element in the stack.  Input Format The first line of input contains an integer, . The next  lines each contain an above mentioned query. (It is guaranteed that each query is valid.) Constraints       Output Format For each type  query, print the maximum element in the stack on a new line. Sample Input 10 1 97 2 1 20 2 1 26 1 20 2 3 1 91 3  Sample Output 26 91
__label__Data-Structures A queue is an abstract data type that maintains the order in which elements were added to it, allowing the oldest elements to be removed from the front and new elements to be added to the rear. This is called a First-In-First-Out (FIFO) data structure because the first element added to the queue (i.e., the one that has been waiting the longest) is always the first one to be removed. A basic queue has the following operations: Enqueue: add a new element to the end of the queue. Dequeue: remove the element from the front of the queue and return it. In this challenge, you must first implement a queue using two stacks. Then process  queries, where each query is one of the following  types:  1 x: Enqueue element  into the end of the queue. 1 x 2: Dequeue the element at the front of the queue. 2 3: Print the element at the front of the queue. 3 Input Format The first line contains a single integer, , denoting the number of queries.  Each line  of the  subsequent lines contains a single query in the form described in the problem statement above. All three queries start with an integer denoting the query , but only query  is followed by an additional space-separated value, , denoting the value to be enqueued. Constraints       It is guaranteed that a valid answer always exists for each query of type . Output Format For each query of type , print the value of the element at the front of the queue on a new line.  Sample Input 10 1 42 2 1 14 3 1 28 3 1 60 1 78 2 2  Sample Output 14 14  Explanation We perform the following sequence of actions: Enqueue ; . Dequeue the value at the head of the queue, ; . Enqueue ; . Print the value at the head of the queue, ; . Enqueue ; . Print the value at the head of the queue, ; . Enqueue ; . Enqueue ; . Dequeue the value at the head of the queue, ; . Dequeue the value at the head of the queue, ; .
__label__Data-Structures There are  values to represent nodes in a graph. They are divided into two sets  and . Each set has exactly  values. Set  is represent by .  can contain any value between  to (inclusive). Set  is represented by .  can contain any value between  to (inclusive). Same value can be chosen any number of times.   Here  represents the edges of the graph.   Your task is to print the number of vertices in the smallest and the largest connected components of the graph.   Note Single nodes should not be considered in the answer.  For more clarity look at the following figure.    For the above graph smallest connected component is 7 and largest connected component is 17.   Input Format First line contains an integer .  Each of the next  lines contain two space-separated integers,  line contains  and .   Constraints       Output Format Print two space separated integers, the number of vertices in the smallest and the largest components. Sample Input 5 1 6  2 7 3 8 4 9 2 6  Sample Output 2 4  Explanation The number of vertices in the smallest connected component in the graph is  i.e. either  or .  The number of vertices in the largest connected component in the graph is  i.e. .
__label__Data-Structures A bracket is considered to be any one of the following characters: (, ), {, }, [, or ].  ( ) { } [ ] Two brackets are considered to be a matched pair if the an opening bracket (i.e., (, [, or {) occurs to the left of a closing bracket (i.e., ), ], or }) of the exact same type. There are three types of matched pairs of brackets: [], {}, and (). ( [ { ) ] } [] {} () A matching pair of brackets is not balanced if the set of brackets it encloses are not matched. For example, {[(])} is not balanced because the contents in between { and } are not balanced. The pair of square brackets encloses a single, unbalanced opening bracket, (, and the pair of parentheses encloses a single, unbalanced closing square bracket, ]. {[(])} { } ( ] By this logic, we say a sequence of brackets is balanced if the following conditions are met: It contains no unmatched brackets. The subset of brackets enclosed within the confines of a matched pair of brackets  is also a matched pair of brackets. Given  strings of brackets, determine whether each sequence of brackets is balanced. If a string is balanced, return YES.  Otherwise, return NO.   YES NO Function Description  Complete the function isBalanced in the editor below.  It must return a string: YES if the sequence is balanced or NO if it is not.   YES NO isBalanced has the following parameter(s): s: a string of brackets Input Format The first line contains a single integer , the number of strings.  Each of the next  lines contains a single string , a sequence of brackets. Constraints   , where  is the length of the sequence.   All chracters in the sequences ∈ { {, }, (, ), [, ] }. Output Format For each string, return YES or NO. YES NO Sample Input 3 {[()]} {[(])} {{[[(())]]}}  Sample Output YES NO YES  Explanation The string {[()]} meets both criteria for being a balanced string, so we print YES on a new line.     {[()]} YES The string {[(])} is not balanced because the brackets enclosed by the matched pair { and } are not balanced: [(]).       {[(])} { } [(]) The string {{[[(())]]}} meets both criteria for being a balanced string, so we print YES on a new line.   {{[[(())]]}} YES
__label__Data-Structures You are given a square grid with some cells open (.) and some blocked (X).  Your playing piece can move along any row or column until it reaches the edge of the grid or a blocked cell.  Given a grid, a start and an end position, determine the number of moves it will take to get to the end position.   For example, you are given a grid with sides  described as follows: ... .X. ...  Your starting position  so you start in the top left corner.  The ending position is .  The path is .  It takes  moves to get to the goal. Function Description  Complete the minimumMoves function in the editor.  It must print an integer denoting the minimum moves required to get from the starting position to the goal. minimumMoves has the following parameter(s): grid: an array of strings representing the rows of the grid   startX: an integer   startY: an integer   goalX: an integer   goalY: an integer   Input Format The first line contains an integer , the size of the array grid.  Each of the next  lines contains a string of length .  The last line contains four space-separated integers,   Constraints   Output Format Print an integer denoting the minimum number of steps required to move the castle to the goal position. Sample Input 3 .X. .X. ... 0 0 0 2  Sample Output 3  Explanation Here is a path that one could follow in order to reach the destination in  steps: .
__label__Data-Structures Jesse loves cookies. He wants the sweetness of all his cookies to be greater than value . To do this, Jesse repeatedly mixes two cookies with the least sweetness. He creates a special combined cookie with: sweetness  Least sweet cookie   2nd least sweet cookie). He repeats this procedure until all the cookies in his collection have a sweetness  .  You are given Jesse's cookies. Print the number of operations required to give the cookies a sweetness  . Print   if this isn't possible.  Input Format The first line consists of integers , the number of cookies and , the minimum required sweetness, separated by a space.  The next line contains  integers describing the array  where  is the sweetness of the  cookie in Jesse's collection. Constraints       Output Format Output the number of operations that are needed to increase the cookie's sweetness .  Output  if this isn't possible.  Sample Input 6 7 1 2 3 9 10 12  Sample Output 2  Explanation Combine the first two cookies to create a cookie with sweetness  =   After this operation, the cookies are .  Then, combine the cookies with sweetness  and sweetness , to create a cookie with resulting sweetness  =   Now, the cookies are .  All the cookies have a sweetness .   Thus,  operations are required to increase the sweetness.
__label__Data-Structures Kundu is true tree lover. Tree is a connected graph having N vertices and N-1  edges. Today when he got a tree, he colored each edge with one of either red(r) or black(b) color. He is interested in knowing how many triplets(a,b,c) of vertices are there , such that, there is atleast one edge having red color on all the three paths i.e. from vertex a to b, vertex b to c and vertex c to a . Note that (a,b,c), (b,a,c) and all such permutations will be considered as the same triplet.  r b If the answer is greater than 109 + 7, print the answer modulo (%) 109 + 7. Input Format  The first line contains an integer N, i.e., the number of vertices in tree.  The next N-1 lines represent edges:  2 space separated integers denoting an edge followed by a color of the edge. A color of an edge is denoted by a small letter of English alphabet, and it can be either red(r) or black(b).   r b Output Format  Print a single number i.e. the number of triplets.   Constraints  1 ≤ N ≤ 105  A node is numbered between 1 to N.   Sample Input  5 1 2 b 2 3 r 3 4 r 4 5 b  Sample Output  4  Explanation Given tree is something like this.  (2,3,4) is one such triplet because on all paths i.e 2 to 3, 3 to 4 and 2 to 4 there is atleast one edge having red color. (2,3,5), (1,3,4) and (1,3,5) are other such triplets.  Note that (1,2,3) is NOT a triplet, because the path from 1 to 2 does not have an edge with red color.
__label__Data-Structures The median of a set of integers is the midpoint value of the data set for which an equal number of integers are less than and greater than the value. To find the median, you must first sort your set of integers in non-decreasing order, then: If your set contains an odd number of elements, the median is the middle element of the sorted sample. In the sorted set ,  is the median. If your set contains an even number of elements, the median is the average of the two middle elements of the sorted sample. In the sorted set ,  is the median. Given an input stream of  integers, you must perform the following task for each  integer: Add the  integer to a running list of integers. Find the median of the updated list (i.e., for the first element through the  element). Print the list's updated median on a new line. The printed value must be a double-precision number scaled to  decimal place (i.e.,  format). Input Format The first line contains a single integer, , denoting the number of integers in the data stream.  Each line  of the  subsequent lines contains an integer, , to be added to your list. Constraints    Output Format After each new integer is added to the list, print the list's updated median on a new line as a single double-precision number scaled to  decimal place (i.e.,  format). Sample Input 6 12 4 5 3 8 7  Sample Output 12.0 8.0 5.0 4.5 5.0 6.0  Explanation There are  integers, so we must print the new median on a new line as each integer is added to the list:
__label__Data-Structures You are given  queries. Each query consists of a single number . You can perform any of the  operations on  in each move: 1: If we take 2 integers  and  where , , then we can change  2: Decrease the value of  by .  Determine the minimum number of moves required to reduce the value of  to . Input Format The first line contains the integer .  The next  lines each contain an integer, .   Constraints     Output Format Output  lines. Each line containing the minimum number of moves required to reduce the value of  to . Sample Input 2 3 4  Sample Output 3 3  Explanation For test case 1, We only have one option that gives the minimum number of moves.  Follow  ->  ->  -> . Hence,  moves. For the case 2, we can either go  ->  ->  ->  ->  or  ->  ->  -> . The 2nd option is more optimal. Hence,  moves.
__label__Data-Structures __label__Greedy-Algorithms You have three stacks of cylinders where each cylinder has the same diameter, but they may vary in height. You can change the height of a stack by removing and discarding its topmost cylinder any number of times.  Find the maximum possible height of the stacks such that all of the stacks are exactly the same height. This means you must remove zero or more cylinders from the top of zero or more of the three stacks until they're all the same height, then print the height. The removals must be performed in such a way as to maximize the height.  Note: An empty stack is still a stack. Input Format The first line contains three space-separated integers, , , and , describing the respective number of cylinders in stacks , , and . The subsequent lines describe the respective heights of each cylinder in a stack from top to bottom:       The second line contains  space-separated integers describing the cylinder heights in stack . The first element is the top of the stack.   The third line contains  space-separated integers describing the cylinder heights in stack . The first element is the top of the stack.    The fourth line contains  space-separated integers describing the cylinder heights in stack . The first element is the top of the stack.   Constraints   Output Format Print a single integer denoting the maximum height at which all stacks will be of equal height. Sample Input 5 3 4 3 2 1 1 1 4 3 2 1 1 4 1  Sample Output 5  Explanation Initially, the stacks look like this:  Observe that the three stacks are not all the same height. To make all stacks of equal height, we remove the first cylinder from stacks  and , and then remove the top two cylinders from stack  (shown below).  As a result, the stacks undergo the following change in height:    All three stacks now have . Thus, we print  as our answer.
__label__Data-Structures Tieu owns a pizza restaurant and he manages it in his own way.  While in a normal restaurant, a customer is served by following the first-come, first-served rule, Tieu simply minimizes the average waiting time of his customers. So he gets to decide who is served first, regardless of how sooner or later a person comes.  Different kinds of pizzas take different amounts of time to cook. Also, once he starts cooking a pizza, he cannot cook another pizza until the first pizza is completely cooked. Let's say we have three customers who come at time t=0, t=1, & t=2 respectively, and the time needed to cook their pizzas is 3, 9, & 6 respectively. If Tieu applies first-come, first-served rule, then the waiting time of three customers is 3, 11, & 16  respectively. The average waiting time in this case is (3 + 11 + 16) / 3 = 10. This is not an optimized solution. After serving the first customer at time t=3, Tieu can choose to serve the third customer. In that case, the waiting time will be 3, 7, & 17 respectively. Hence the average waiting time is (3 + 7 + 17) / 3 = 9. Help Tieu achieve the minimum average waiting time. For the sake of simplicity, just find the integer part of the minimum average waiting time. Input Format The first line contains an integer N, which is the number of customers.  In the next N lines, the ith line contains two space separated numbers Ti and Li. Ti is the time when ith customer order a pizza, and Li is the time required to cook that pizza.   In the next N lines, the ith line contains two space separated numbers Ti and Li. Ti is the time when ith customer order a pizza, and Li is the time required to cook that pizza.   The  customer is not the customer arriving at the  arrival time.  The  customer is not the customer arriving at the  arrival time.  Output Format Display the integer part of the minimum average waiting time. Constraints 1 ≤ N ≤ 105 0 ≤ Ti ≤ 109 1 ≤ Li ≤ 109 Note The waiting time is calculated as the difference between the time a customer orders pizza (the time at which they enter the shop) and the time she is served. The waiting time is calculated as the difference between the time a customer orders pizza (the time at which they enter the shop) and the time she is served. Cook does not know about the future orders. Cook does not know about the future orders. Sample Input #00 3 0 3 1 9 2 6  Sample Output #00 9  Sample Input #01 3 0 3 1 9 2 5  Sample Output #01 8  Explanation #01 Let's call the person ordering at time = 0 as A, time = 1 as B and time = 2 as C. By delivering pizza for A, C and B we get the minimum average wait time to be  (3 + 6 + 16)/3 = 25/3 = 8.33   the integer part is 8 and hence the answer.  8
__label__Data-Structures Suppose there is a circle. There are  petrol pumps on that circle. Petrol pumps are numbered  to  (both inclusive). You have two pieces of information corresponding to each of the petrol pump: (1) the amount of petrol that particular petrol pump will give, and (2) the distance from that petrol pump to the next petrol pump.  Initially, you have a tank of infinite capacity carrying no petrol. You can start the tour at any of the petrol pumps. Calculate the first point from where the truck will be able to complete the circle. Consider that the truck will stop at each of the petrol pumps. The truck will move one kilometer for each litre of the petrol. Input Format The first line will contain the value of . The next  lines will contain a pair of integers each, i.e. the amount of petrol that petrol pump will give and the distance between that petrol pump and the next petrol pump. Constraints:   Output Format An integer which will be the smallest index of the petrol pump from which we can start the tour. Sample Input 3 1 5 10 3 3 4  Sample Output 1  Explanation We can start the tour from the second petrol pump.
__label__Data-Structures Alexa has two stacks of non-negative integers, stack  and stack  where index  denotes the top of the stack. Alexa challenges Nick to play the following game: In each move, Nick can remove one integer from the top of either stack  or stack . Nick keeps a running sum of the integers he removes from the two stacks. Nick is disqualified from the game if, at any point, his running sum becomes greater than some integer  given at the beginning of the game. Nick's final score is the total number of integers he has removed from the two stacks. Given , , and  for  games, find the maximum possible score Nick can achieve (i.e., the maximum number of integers he can remove without being disqualified) during each game and print it on a new line. Input Format The first line contains an integer,  (the number of games). The  subsequent lines describe each game in the following format: The first line contains three space-separated integers describing the respective values of  (the number of integers in stack ),  (the number of integers in stack ), and  (the number that the sum of the integers removed from the two stacks cannot exceed). The second line contains  space-separated integers describing the respective values of . The third line contains  space-separated integers describing the respective values of . Constraints     Subtasks  for  of the maximum score. Output Format For each of the  games, print an integer on a new line denoting the maximum possible score Nick can achieve without being disqualified. Sample Input 0 Sample Output 0 Explanation 0 The two stacks initially look like this:  The image below depicts the integers Nick should choose to remove from the stacks. We print  as our answer, because that is the maximum number of integers that can be removed from the two stacks without the sum exceeding .  (There can be multiple ways to remove the integers from the stack, the image shows just one of them.)
__label__Data-Structures Skyline Real Estate Developers is planning to demolish a number of old, unoccupied buildings and construct a shopping mall in their place. Your task is to find the largest solid area in which the mall can be constructed. There are a number of buildings in a certain two-dimensional landscape. Each building has a height, given by . If you join  adjacent buildings, they will form a solid rectangle of area .   For example, the heights array .  A rectangle of height  and length  can be constructed within the boundaries.  The area formed is .   Function Description Complete the function largestRectangle int the editor below.  It should return an integer representing the largest rectangle that can be formed within the bounds of consecutive buildings.   largestRectangle largestRectangle has the following parameter(s): h: an array of integers representing building heights Input Format The first line contains , the number of buildings.  The second line contains  space-separated integers, each representing the height of a building.    Constraints    Output Format Print a long integer representing the maximum area of rectangle formed. Sample Input 5 1 2 3 4 5  Sample Output 9  Explanation An illustration of the test case follows.
__label__Data-Structures Consider an -integer sequence, . We perform a query on  by using an integer, , to calculate the result of the following expression:   In other words, if we let , then you need to calculate .   Given  and  queries (each query consists of an integer, ), print the result of each query on a new line. Input Format The first line consists of two space-separated integers describing the respective values of  and .  The second line consists of  space-separated integers describing the respective values of .  Each of the  subsequent lines contains a single integer denoting the value of  for that query.  Constraints     Output Format For each query, print an integer denoting the query's answer on a new line. After completing all the queries, you should have printed  lines. Sample Input 0 Sample Output 0 Explanation 0 For , the answer is   Sample Input 1 Sample Output 1 Explanation 1 For each query, the "prefix" has the least maximum value among the consecutive subsequences of the same size.
__label__Data-Structures Victoria has a tree, , consisting of  nodes numbered from  to . Each edge from node  to  in tree  has an integer weight, . Let's define the cost, , of a path from some node  to some other node  as the maximum weight () for any edge in the unique path from node  to node . Victoria wants your help processing  queries on tree , where each query contains  integers,  and , such that . For each query, she wants to print the number of different paths in  that have a cost, , in the inclusive range . It should be noted that path from some node  to some other node  is considered same as path from node  to  i.e  is same as .  Input Format The first line contains  space-separated integers,  (the number of nodes) and  (the number of queries), respectively.  Each of the  subsequent lines contain  space-separated integers, , , and , respectively, describing a bidirectional road between nodes  and  which has weight .  The  subsequent lines each contain  space-separated integers denoting  and . Constraints         Scoring  for  of the test data.    for  of the test data. Output Format For each of the  queries, print the number of paths in  having cost  in the inclusive range  on a new line. Sample Input 5 5 1 2 3 1 4 2 2 5 6 3 4 1 1 1 1 2 2 3 2 5 1 6  Sample Output 1 3 5 5 10  Explanation :   :   :   :   ...etc.
__label__Data-Structures In this challenge, you must implement a simple text editor. Initially, your editor contains an empty string, . You must perform  operations of the following  types: append  - Append string  to the end of . delete   - Delete the last  characters of . print     - Print the  character of . undo     - Undo the last (not previously undone) operation of type  or , reverting  to the state it was in prior to that operation.  Input Format The first line contains an integer, , denoting the number of operations.  Each line  of the  subsequent lines (where ) defines an operation to be performed. Each operation starts with a single integer,  (where ), denoting a type of operation as defined in the Problem Statement above. If the operation requires an argument,  is followed by its space-separated argument. For example, if  and , line  will be 1 abcd.  1 abcd Constraints     The sum of the lengths of all  in the input .   The sum of  over all delete operations .   All input characters are lowercase English letters.   It is guaranteed that the sequence of operations given as input is possible to perform. Output Format Each operation of type  must print the  character on a new line. Sample Input 8 1 abc 3 3 2 3 1 xy 3 2 4  4  3 1  Sample Output c y a  Explanation Initially,  is empty. The following sequence of  operations are described below: . We append  to , so .  Print the  character on a new line. Currently, the  character is c. c Delete the last  characters in  (), so .  Append  to , so .  Print the  character on a new line. Currently, the  character is y. y Undo the last update to , making  empty again (i.e., ). Undo the next to last update to  (the deletion of the last  characters), making . Print the  character on a new line. Currently, the  character is a. a
__label__Data-Structures There are a number of plants in a garden. Each of these plants has been treated with some amount of pesticide. After each day, if any plant has more pesticide than the plant on its left, being weaker than the left one, it dies.   You are given the initial values of the pesticide in each of the plants. Print the number of days after which no plant dies, i.e. the time after which there are no plants with more pesticide content than the plant to their left.   For example, pesticide levels .  Using a -indexed array, day  plants  and  die leaving .  On day , plant  of the current array dies leaving .  As there is no plant with a higher concentration of pesticide than the one to its left, plants stop dying after day .   Function Description  Complete the function poisonousPlants in the editor below.  It must return an integer representing the number of days until plants no longer die from pesticide. poisonousPlants has the following parameter(s): p: an array of integers representing pesticide levels in each plant Input Format The first line contains an integer , the size of the array .  The next line contains  space-separated integers .   Constraints    Output Format Output an integer equal to the number of days after which no plants die. Sample Input 7 6 5 8 4 7 10 9  Sample Output 2  Explanation Initially all plants are alive.   Plants = {(6,1), (5,2), (8,3), (4,4), (7,5), (10,6), (9,7)}    Plants[k] = (i,j) => jth plant has pesticide amount = i.   After the 1st day, 4 plants remain as plants 3, 5, and 6 die.   Plants = {(6,1), (5,2), (4,4), (9,7)}   After the 2nd day, 3 plants survive as plant 7 dies. Plants = {(6,1), (5,2), (4,4)}   After the 2nd day the plants stop dying.
__label__Data-Structures Given an array  of  distinct elements. Let  and  be the smallest and the next smallest element in the interval  where .   .   where , are the bitwise operators ,  and  respectively.  Your task is to find the maximum possible value of . Input Format First line contains integer .  Second line contains  integers, representing elements of the array .   Constraints      Output Format Print the value of maximum possible value of .    Sample Input 5 9 6 3 5 2  Sample Output 15  Explanation Consider the interval  the result will be maximum.
__label__Data-Structures You are a waiter at a party. There are  stacked plates on pile . Each plate has a number written on it. Then there will be  iterations. In -th iteration, you start picking up the plates in  from the top one by one and check whether the number written on the plate is divisible by the -th prime. If the number is divisible, you stack that plate on pile . Otherwise, you stack that plate on pile . After  iterations, plates can only be on pile , . Output numbers on these plates from top to bottom of each piles in order of , . Input Format The first line contains two space separated integers,  and .  The next line contains  space separated integers representing the initial pile of plates, i.e., . The leftmost value represents the bottom plate of the pile. Constraints        Output Format Output  lines. Each line contains a number written on the plate. Printing should be done in the order defined above. Sample Input 0 Sample Output 0 Explanation 0 Initially:  = [3, 4, 7, 6, 5]<-TOP After 1 iteration:  = []<-TOP  = [6, 4]<-TOP  = [5, 7, 3]<-TOP We should output numbers in  first from top to bottom, and then output numbers in  from top to bottom. Sample Input 1 Sample Output 1 Explanation 1 Initially:  = [3, 3, 4, 4, 9]<-TOP After  iteration:  = []<-TOP  = [4, 4]<-TOP  = [3, 3, 9]<-TOP After  iteration:  = []<-TOP  = [4, 4]<- TOP  = [3, 3, 9]<-TOP  We should output numbers in  first from top to bottom, and then output numbers in  from top to bottom.
__label__Data-Structures We're going to make our own Contacts application! The application must perform two types of operations: add name, where  is a string denoting a contact name. This must store  as a new contact in the application.   add name find partial, where  is a string denoting a partial name to search the application for. It must count the number of contacts starting with  and print the count on a new line. find partial Given  sequential add and find operations, perform each operation in order. Input Format The first line contains a single integer, , denoting the number of operations to perform.  Each line  of the  subsequent lines contains an operation in one of the two forms defined above.   Constraints       It is guaranteed that  and  contain lowercase English letters only. The input doesn't have any duplicate  for the  operation. Output Format For each find partial operation, print the number of contact names starting with  on a new line. find partial Sample Input 4 add hack add hackerrank find hac find hak  Sample Output 2 0  Explanation We perform the following sequence of operations: Add a contact named hack. hack Add a contact named hackerrank. hackerrank Find and print the number of contact names beginning with hac. There are currently two contact names in the application and both of them start with hac, so we print  on a new line. hac hac Find and print the number of contact names beginning with hak. There are currently two contact names in the application but neither of them start with hak, so we print  on a new line. hak hak
__label__Data-Structures __label__Data-Structures Given  strings. Each string contains only lowercase letters from (both inclusive). The set of  strings is said to be GOOD SET if no string is prefix of another string else, it is BAD SET. (If two strings are identical, they are considered prefixes of each other.) For example, aab, abcde, aabcd is BAD SET because aab is prefix of aabcd.   Print GOOD SET if it satisfies the problem requirement.  Else, print BAD SET and the first string for which the condition fails.   Input Format  First line contains , the number of strings in the set.  Then next  lines follow, where  line contains  string.   Constraints     Length of the string   Output Format  Output GOOD SET if the set is valid.  Else, output BAD SET followed by the first string for which the condition fails.   GOOD SET BAD SET Sample Input00  7 aab defgab abcde aabcde cedaaa bbbbbbbbbb jabjjjad  Sample Output00  BAD SET aabcde  Sample Input01 4 aab aac aacghgh aabghgh  Sample Output01  BAD SET aacghgh  Explanation  aab is prefix of aabcde. So set is BAD SET and it fails at string aabcde.
__label__Data-Structures Meera teaches a class of  students, and every day in her classroom is an adventure. Today is drawing day! The students are sitting around a round table, and they are numbered from  to  in the clockwise direction. This means that the students are numbered , and students  and  are sitting next to each other. After letting the students draw for a certain period of time, Meera starts collecting their work to ensure she has time to review all the drawings before the end of the day. However, some of her students aren't finished drawing! Each student  needs  extra minutes to complete their drawing.  Meera collects the drawings sequentially in the clockwise direction, starting with student ID , and it takes her exactly  minute to review each drawing. This means that student  gets  extra minutes to complete their drawing, student  gets  extra minute, student  gets  extra minutes, and so on. Note that Meera will still spend  minute for each student even if the drawing isn't ready.  Given the values of , help Meera choose the best possible  to start collecting drawings from, such that the number of students able to complete their drawings is maximal. Then print  on a new line. If there are multiple such IDs, select the smallest one. Input Format The first line contains a single positive integer, , denoting the number of students in the class.  The second line contains  space-separated integers describing the respective amounts of time that each student needs to finish their drawings (i.e., ). Constraints   Subtasks  for  of the maximum score. Output Format Print an integer denoting the ID number, , where Meera should start collecting the drawings such that a maximal number of students can complete their drawings. If there are multiple such IDs, select the smallest one.
__label__Data-Structures __label__Advanced-Data-Structures Chinese Version Russian Version You are given a 3-D Matrix in which each block contains 0 initially. The first block is defined by the coordinate (1,1,1) and the last block is defined by the coordinate (N,N,N). There are two types of queries. UPDATE x y z W  updates the value of block (x,y,z) to W. QUERY x1 y1 z1 x2 y2 z2  calculates the sum of the value of blocks whose x coordinate is between x1 and x2 (inclusive), y coordinate between y1 and y2 (inclusive) and z coordinate between z1 and z2 (inclusive).  Input Format  The first line contains an integer T, the number of test-cases. T testcases follow.  For each test case, the first line will contain two integers N and M separated by a single space.  N defines the N * N * N matrix.  M defines the number of operations.  The next M lines will contain either    1. UPDATE x y z W  2. QUERY  x1 y1 z1 x2 y2 z2   Output Format  Print the result for each QUERY. Constrains  1 <= T <= 50  1 <= N <= 100  1 <= M <= 1000  1 <= x1 <= x2 <= N  1 <= y1 <= y2 <= N  1 <= z1 <= z2 <= N  1 <= x,y,z <= N  -109 <= W <= 109  Sample Input 2 4 5 UPDATE 2 2 2 4 QUERY 1 1 1 3 3 3 UPDATE 1 1 1 23 QUERY 2 2 2 4 4 4 QUERY 1 1 1 3 3 3 2 4 UPDATE 2 2 2 1 QUERY 1 1 1 1 1 1 QUERY 1 1 1 2 2 2 QUERY 2 2 2 2 2 2  Sample Output 4 4 27 0 1 1  Explanation  First test case, we are given a cube of 4 * 4 * 4 and 5 queries.  Initially all the cells (1,1,1) to (4,4,4) are 0.  UPDATE 2 2 2 4 makes the cell (2,2,2) = 4  QUERY 1 1 1 3 3 3. As (2,2,2) is updated to 4 and the rest are all 0. The answer to this query is 4.  UPDATE 1 1 1 23. updates the cell (1,1,1) to 23.  QUERY 2 2 2 4 4 4. Only the cell (1,1,1) and (2,2,2) are non-zero and (1,1,1) is not between (2,2,2) and (4,4,4). So, the answer is 4.  QUERY 1 1 1 3 3 3. 2 cells are non-zero and their sum is 23+4 = 27.  UPDATE 2 2 2 4 QUERY 1 1 1 3 3 3 UPDATE 1 1 1 23 QUERY 2 2 2 4 4 4 QUERY 1 1 1 3 3 3
__label__Data-Structures __label__Advanced-Data-Structures A cricket match is going to be held. The field is represented by a 1D plane. A cricketer, Mr. X has  favorite shots. Each shot has a particular range. The range of the   shot is from i to i. That means his favorite shot can be anywhere in this range. Each player on the opposite team  can field only in a particular range. Player  can field from i to i. You are given the  favorite shots of Mr. X and the range of  players.  represents the strength of each player i.e. the number of shots player  can stop.  Your task is to find: . Game Rules: A player can stop the  shot if the range overlaps with the player's fielding range. For more clarity about overlapping, study the following figure:    Input Format The first line consists of two space separated integers,  and . Each of the next  lines contains two space separated integers. The  line contains  and . Each of the next  lines contains two integers. The  line contains integers  and . Output Format You need to print the sum of the strengths of all the players: . Constraints:    Sample Input 4 4                 1 2  2 3 4 5 6 7 1 5 2 3 4 7 5 7     Sample Output 9  Explanation Player 1 can stop the 1st, 2nd and 3rd shot so the strength is . Player 2 can stop the 1st and 2nd shot so the strength is . Player 3 can stop the 3rd and 4th shot so the strength is . Player 4 can stop the 3rd and 4th shot so the strength is . The sum of the strengths of all the players is .
__label__Graph-Algorithms __label__Data-Structures __label__Advanced-Data-Structures Enter-View  is a linear, street-like country. By linear, we mean all the cities of the country are placed on a single straight line - the -axis. Thus every city's position can be defined by a single coordinate, , the distance from the left borderline of the country. You can treat all cities as single points. Unfortunately, the dictator of telecommunication of EV (Mr. S. Treat Jr.) doesn't know anything about the modern telecom technologies, except for peer-to-peer connections. Even worse, his thoughts on peer-to-peer connections are extremely faulty: he believes that, if  people are living in city , there must be at least  cables from city  to every other city of EV - this way he can guarantee no congestion will ever occur! Mr. Treat hires you to find out how much cable they need to implement this telecommunication system, given the coordination of the cities and their respective population.  Note that The connections between the cities can be shared. Look at the example for the detailed explanation. Input Format  A number  is given in the first line and then comes  blocks, each representing a scenario. Each scenario consists of three lines. The first line indicates the number of cities (N). The second line indicates the coordinates of the N cities. The third line contains the population of each of the cities. The cities needn't be in increasing order in the input. Output Format  For each scenario of the input, write the length of cable needed in a single line modulo . Constraints        Border to border length of the country  Sample Input  2   3   1 3 6   10 20 30   5   5 55 555 55555 555555   3333 333 333 33 35  Sample Output  280   463055586  Explanation For the first test case, having  cities requires  sets of cable connections. Between city  and , which has a population of  and , respectively, Mr. Treat believes at least  cables should come out of city 1 for this connection, and at least 20 cables should come out of city  for this connection. Thus, the connection between city  and city  will require  cables, each crossing a distance of  km. Applying this absurd logic to connection 2,3 and 1,3, we have  =>  connections   km of cable  =>  connections   km of cable  =>  connections   km of cable For a total of  , Output is  km of cable
__label__Mathematics __label__Tree __label__Data-Structures __label__Advanced-Data-Structures A subsequence of a sequence is a sequence which is obtained by deleting zero or more elements from the sequence.  You are given a sequence A in which every element is a pair of integers  i.e  A = [(a1, w1), (a2, w2),..., (aN, wN)]. A A For a subseqence B = [(b1, v1), (b2, v2), ...., (bM, vM)] of the given sequence :  B We call it increasing if for every i (1 <= i < M ) , bi < bi+1. Weight(B) = v1 + v2 + ... + vM.   Task:  Given a sequence, output the maximum weight formed by an increasing subsequence. Input:  The first line of input contains a single integer T. T test-cases follow. The first line of each test-case contains an integer N. The next line contains a1, a2 ,... , aN separated by a single space. The next line contains w1, w2, ..., wN separated by a single space. Output:  For each test-case output a single integer: The maximum weight of increasing subsequences of the given sequence.   Constraints:  1 <= T <= 5  1 <= N <= 150000  1 <= ai <= 109, where i ∈ [1..N]  1 <= wi <= 109, where i ∈ [1..N]  Sample Input: 2   4   1 2 3 4   10 20 30 40   8   1 2 3 4 1 2 3 4   10 20 30 40 15 15 15 50  Sample Output: 100   110  Explanation:  In the first sequence, the maximum size increasing subsequence is 4, and there's only one of them. We choose B = [(1, 10), (2, 20), (3, 30), (4, 40)], and we have Weight(B) = 100. B = [(1, 10), (2, 20), (3, 30), (4, 40)] Weight(B) = 100 In the second sequence, the maximum size increasing subsequence is still 4, but there are now 5 possible subsequences: 1 2 3 4   10 20 30 40  1 2 3 4   10 20 30 50  1 2 3 4   10 20 15 50  1 2 3 4   10 15 15 50  1 2 3 4   15 15 15 50  Of those, the one with the greatest weight is B = [(1, 10), (2, 20), (3, 30), (4, 50)], with Weight(B) = 110. B = [(1, 10), (2, 20), (3, 30), (4, 50)] Weight(B) = 110 Please note that this is not the maximum weight generated from picking the highest value element of each index. That value, 115, comes from [(1, 15), (2, 20), (3, 30), (4, 50)], which is not a valid subsequence because it cannot be created by only deleting elements in the original sequence.
__label__Data-Structures __label__Advanced-Data-Structures Jim has invented a new flying object called HZ42. HZ42 is like a broom and can only fly horizontally, independent of the environment. One day, Jim started his flight from Dubai's highest skyscraper, traveled some distance and landed on another skyscraper of same height! So much fun! But unfortunately, new skyscrapers have been built recently. Let us describe the problem in one dimensional space. We have in total  skyscrapers aligned from left to right. The th skyscraper has a height of . A flying route can be described as  with , which means, Jim starts his HZ42 at the top of the skyscraper  and lands on the skyscraper . Since HZ42 can only fly horizontally, Jim will remain at the height  only. Thus the path  can be valid, only if each of the skyscrapers  is not strictly greater than  and if the height of the skyscraper he starts from and arrives on have the same height. Formally,  is valid iff  and . Help Jim in counting the number of valid paths represented by ordered pairs .   Input Format The first line contains , the number of skyscrapers. The next line contains  space separated integers representing the heights of the skyscrapers.  Output Format Print an integer that denotes the number of valid routes. Constraints  and no skyscraper will have height greater than  and less than . Sample Input #00 6 3 2 1 2 3 3  Sample Output #00 8  Sample Input #01 3 1 1000 1  Sample Output #01 0  Explanation First testcase: (1, 5), (1, 6) (5, 6) and (2, 4) and the routes in the opposite directions are the only valid routes.  Second testcase: (1, 3) and (3, 1) could have been valid, if there wasn't a big skyscraper with height 1000 between them.
__label__Data-Structures __label__Advanced-Data-Structures Consider a lowercase English alphabetic letter character denoted by . A shift operation on some  turns it into the next letter in the alphabet. For example, and , ,  .  Given a zero-indexed string, , of  lowercase letters, perform  queries on  where each query takes one of the following two forms: 1 i j t: All letters in the inclusive range from  to  are shifted  times.   1 i j t 2 i j: Consider all indices in the inclusive range from  to . Find the number of non-empty subsets of characters,  where , such that characters  can be rearranged to form a palindrome. Then print this number modulo  on a new line. Two palindromic subsets are considered to be different if their component characters came from different indices in the original string. 2 i j Note Two palindromic subsets are considered to be different if their component characters came from different indices in the original string. Input Format The first line contains two space-separated integers describing the respective values of  and .  The second line contains a string of  lowercase English alphabetic letters (i.e., a through z) denoting .  Each of the  subsequent lines describes a query in one of the two formats defined above. a z Constraints      for each query.  for each query of type . Subtasks For  of the maximum score:      For another  of the maximum score:  All queries will be of type .  Output Format For each query of type  (i.e., 2 i j), print the number of non-empty subsets of characters satisfying the conditions given above, modulo , on a new line. 2 i j Sample Input 0 Sample Output 0 Explanation 0 We perform the following  queries: 2 0 2:  and we want to find the palindromic subsets of substring . There are five such subsets that form palindromic strings (, , , , and ), so we print the result of  on a new line 2 0 2 2 0 0:  and we want to find the palindromic subsets of substring . Because this substring only has one letter, we only have one subset forming a palindromic string (). We then print the result of  on a new line.  2 0 0 2 1 2:   and we want to find the palindromic subsets of substring . There are two such subsets that form palindromic strings ( and ), so we print the result of  on a new line.   2 1 2 1 0 1 1:  and we need to perform  shift operations on each character from index  to index . After performing these shifts, .   1 0 1 1 2 0 2:  and we want to find the palindromic subsets of substring . There are three valid subsets that form palindromic strings (, , and ), so we print the result of  on a new line. 2 0 2
__label__Tree Taylor loves trees, and this new challenge has him stumped! Consider a tree, , consisting of  nodes. Each node is numbered from  to , and each node  has an integer, , attached to it.  A query on tree  takes the form w x y z. To process a query, you must print the count of ordered pairs of integers  such that the following four conditions are all satisfied:  w x y z   the path from node  to node .  path from node  to node .   Given  and  queries, process each query in order, printing the pair count for each query on a new line. Input Format The first line contains two space-separated integers describing the respective values of  (the number of nodes) and  (the number of queries).  The second line contains  space-separated integers describing the respective values of each node (i.e., ).  Each of the  subsequent lines contains two space-separated integers,  and , defining a bidirectional edge between nodes  and .  Each of the  subsequent lines contains a w x y z query, defined above. w x y z Constraints         Scoring for this problem is Binary, that means you have to pass all the test cases to get a positive score. Output Format For each query, print the count of ordered pairs of integers satisfying the four given conditions on a new line. Sample Input 10 5 10 2 3 5 10 5 3 6 2 1 1 2 1 3 3 4 3 5 3 6 4 7 5 8 7 9 2 10 8 5 2 10 3 8 4 9 1 9 5 9 4 6 4 6 5 8 5 8  Sample Output 0 1 3 2 0  Explanation We perform  queries on the following tree:  Find the number of valid ordered pairs where  is in the path from node  to node  and  is in the path from node  to node . No such pair exists, so we print . Find the number of valid ordered pairs where  is in the path from node  to node  and  is in the path from node  to node . One such pair, , exists, so we print . Find the number of valid ordered pairs where  is in the path from node  to node  and  is in the path from node  to node . Three such pairs, , , and  exist, so we print . Find the number of valid ordered pairs where  is in the path from node  to node  and  is in the path from node  to node . Two such pairs,  and , exist, so we print .   Find the number of valid ordered pairs where  is in the path from node  to node  and  is in the path from node  to node . No such pair exists, so we print .
__label__Data-Structures __label__Advanced-Data-Structures Consider a sequence, , and a polynomial of degree  defined as . You must perform  queries on the sequence, where each query is one of the following two types: 1 i x: Replace  with . 1 i x 2 l r: Consider the polynomial  and determine whether  is divisible by  over the field , where . In other words, check if there exists a polynomial  with integer coefficients such that each coefficient of  is divisible by . If a valid  exists, print Yes on a new line; otherwise, print No. 2 l r Yes No Given the values of , , , and  queries, perform each query in order. Input Format The first line contains four space-separated integers describing the respective values of  (the length of the sequence),  (a coefficient in ),  (a coefficient in ), and  (the number of queries).  The second line contains  space-separated integers describing .  Each of the  subsequent lines contains three space-separated integers describing a query of either type 1 or type 2. 1 2 Constraints  For query type 1:  and . 1 For query type 2: . 2   Output Format For each query of type 2, print Yes on a new line if  is a divisor of ; otherwise, print No instead. 2 Yes No Sample Input 0 Sample Output 0 Explanation 0 Given  and the initial sequence , we perform the following  queries:  is not a divisor of , so we print No on a new line. No Set  to , so . After the second query, . Because , we print Yes on a new line. Yes
__label__Tree __label__Data-Structures Given an array, your goal is to find, for each element, the largest subarray containing it whose cost is at least . Specifically, let  be an array of length , and let  be the subarray from index  to index . Also, Let  be the largest number in . Let  be the smallest number in . Let  be the bitwise OR of the elements of . Let  be the bitwise AND of the elements of . The cost of , denoted , is defined as   You are given the array  and and an integer . For each index  from  to , your goal is to find the largest size of any subarray  such that  and . Consider, array  and . The possible sub-arrays and their costs would be as follows:   Complete the function costlyIntervals which takes two integers  and  as first line of input, and array  in the second line of input. Return an array of  integers, where the  element contains the answer for index  of the input array, . Every element of the output array denotes the largest size of a subarray containing  whose cost is at least , or  if there is no such subarray. costlyIntervals Constraints     Subtasks  For  of the maximum score, . For  of the maximum score, . Sample Input ,     Sample Output   Explanation In this example, we have . There is only one subarray whose cost is at least , and that is , since . Its size is . Thus, for  and , the answer is , and for the others, .
__label__Tree __label__Data-Structures One of the most important skills a programmer needs to learn early on is the ability to pose a problem in an abstract way. This skill is important not just for researchers but also in applied fields like software engineering and web development.   You are able to solve most of a problem, except for one last subproblem, which you have posed in an abstract way as follows: Given an array consisting of  integers , define   For example, for an input array [ 10, -5, 5, 20 ], a subsegment  would be computed as follows:    What is , i.e., the maximum value of  among all subsegments ?   Complete the function maximumValue which takes an integer array as input and returns the maximum value of  among all subsegments . maximumValue Note that:   Input Format The first line contains a single integer  The second line contains  space-separated integers  Constraints     Output Format Print a single integer denoting the answer Sample Input 0 Sample Output 0 Explanation 0 The maximum value occurs at  as shown below.   Sample Input 1 Sample Output 1 Explanation 1 The maximum value occurs at .
__label__Tree __label__Data-Structures __label__Advanced-Data-Structures Treeland is a country with  cities and  roads. There is exactly one path between any two cities.   The ruler of Treeland wants to implement a self-driving bus system and asks tree-loving Alex to plan the bus routes. Alex decides that each route must contain a subset of connected cities; a subset of cities is connected if the following two conditions are true: There is a path between every pair of cities which belongs to the subset. Every city in the path must belong to the subset.  In the figure above,  is a connected subset, but  is not  (for the second condition to be true,  would need to be part of the subset). Each self-driving bus will operate within a connected segment of Treeland. A connected segment  where  is defined by the connected subset of cities .  In the figure above,  is a connected segment that represents the subset . Note that a single city can be a segment too. Help Alex to find number of connected segments in Treeland. Input Format The first line contains a single positive integer, .  The  subsequent lines each contain two positive space-separated integers,  and , describe an edge connecting two nodes in tree . Constraints   Subtasks  For  score:  For  score:  Output Format Print a single integer: the number of segments , which are connected in tree . Sample Input 3 1 3 3 2  Sample Output 5  Explanation The connected segments for our test case are: , , , , and . These segments can be represented by the respective subsets: , , , , and .  Note:  is not a connected segment. It represents the subset  and the path between  and  goes through  which is not a member of the subset.
__label__Tree __label__Data-Structures __label__Advanced-Data-Structures You are given an unrooted tree of  nodes numbered from  to . Each node  has a color, .  Let  be the number of different colors in the path between node  and node . For each node , calculate the value of , defined as follows:   Your task is to print the value of  for each node . Input Format The first line contains a single integer, , denoting the number of nodes.  The second line contains  space-separated integers, , where each  describes the color of node .  Each of the  subsequent lines contains  space-separated integers,  and , defining an undirected edge between nodes  and . Constraints   Output Format Print  lines, where the  line contains a single integer denoting . Sample Input 5 1 2 3 2 3 1 2 2 3 2 4 1 5  Sample Output 10 9 11 9 12  Explanation The Sample Input defines the following tree:  Each  is calculated as follows:
__label__Tree __label__Data-Structures __label__Mathematics __label__Advanced-Data-Structures Shashank loves trees and math. He has a rooted tree, , consisting of  nodes uniquely labeled with integers in the inclusive range . The node labeled as  is the root node of tree , and each node in  is associated with some positive integer value (all values are initially ).  Let's define  as the  Fibonacci number. Shashank wants to perform  types of operations over his tree, :    Update the subtree rooted at node  such that the node at level  in subtree  (i.e., node ) will have  added to it, all the nodes at level  will have  added to them, and so on. More formally, all the nodes at a distance  from node  in the subtree of node  will have the  Fibonacci number added to them.    Find the sum of all values associated with the nodes on the unique path from  to . Print your sum modulo  on a new line. Given the configuration for tree  and a list of  operations, perform all the operations efficiently. Note: . Input Format The first line contains  space-separated integers,  (the number of nodes in tree ) and  (the number of operations to be processed), respectively.  Each line  of the  subsequent lines contains an integer, , denoting the parent of the  node.  Each of the  subsequent lines contains one of the two types of operations mentioned in the Problem Statement above. Constraints    Output Format For each operation of type  (i.e., ), print the required answer modulo  on a new line. Sample Input 5 10 1 1 2 2 Q 1 5 U 1 1 Q 1 1 Q 1 2 Q 1 3 Q 1 4 Q 1 5 U 2 2 Q 2 3 Q 4 5  Sample Output 0 1 2 2 4 4 4 10  Explanation Intially, the tree looks like this:  After update operation , it looks like this:  After update operation , it looks like this:
__label__Dynamic-Programming Given an array, we define its value to be the value obtained by following these instructions: Write down all pairs of numbers from this array.   Compute the product of each pair.   Find the sum of all the products. For example, for a given array, for a given array [, , , ],  Note that  is listed twice, one for each occurrence of .   Given an array of integers, find the largest value of any of its nonempty subarrays. Note: A subarray is a contiguous subsequence of the array. Complete the function largestValue which takes an array and returns an integer denoting the largest value of any of the array's nonempty subarrays.   largestValue Input Format The first line contains a single integer , denoting the number of integers in array .  The second line contains  space-separated integers  denoting the elements of array .   Constraints     Subtasks   for 20% of the points.    for 70% of the points. Output Format Print a single line containing a single integer denoting the largest value of any of the array's nonempty subarrays. Sample Input 0 Sample Output 0 Explanation 0 In this case, we have . The largest-valued subarray turns out to be  with value .   Sample Input 1 Sample Output 1
__label__Advanced-Data-Structures Let's define a function, , on a string, , of length  as follows:   where  denotes the ASCII value of the  character in string , , and .  Nikita has a string, , consisting of  lowercase letters that she wants to perform  queries on. Each query consists of an integer, , and you have to find the value of  where  is the  alphabetically smallest palindromic substring of . If  doesn't exist, print  instead. Input Format The first line contains  space-separated integers describing the respective values of  (the length of string ) and  (the number of queries).  The second line contains a single string denoting .  Each of the  subsequent lines contains a single integer denoting the value of  for a query.  Constraints     It is guaranteed that string  consists of lowercase English alphabetic letters only (i.e.,  to ).  .  Scoring  for  of the test cases.  for  of the test cases. Output Format For each query, print the value of function  where  is the  alphabetically smallest palindromic substring of ; if  doesn't exist, print  instead. Sample Input 5 7 abcba 1 2 3 4 6 7 8         Sample Output 97 97 696207567 98 29493435 99 -1  Explanation There are  palindromic substrings of . Let's list them in lexicographical order and find value of : ,   ,   ,   ,   ,   ,   ,    doesn't exist, so we print  for .
__label__Data-Structures __label__Advanced-Data-Structures White Falcon just solved the data structure problem below using heavy-light decomposition. Can you help her find a new solution that doesn't require implementing any fancy techniques?  There are  types of query operations that can be performed on a tree: 1 u x: Assign  as the value of node . 1 u x 2 u v: Print the sum of the node values in the unique path from node  to node . 2 u v Given a tree with  nodes where each node's value is initially , execute  queries.  Input Format The first line contains  space-separated integers,  and , respectively.  The  subsequent lines each contain  space-separated integers describing an undirected edge in the tree.  Each of the  subsequent lines contains a query you must execute. Constraints   It is guaranteed that the input describes a connected tree with  nodes.  Nodes are enumerated with -based indexing. Output Format For each type- query, print its integer result on a new line. Sample Input 3 3 0 1 1 2 1 0 1 1 1 2 2 0 2  Sample Output 3  Explanation  After the first  queries, the value of node  and the value of node . The third query requires us to print the sum of the node values in the path from nodes  to , which is . Thus, we print  on a new line.
__label__Tree __label__Data-Structures __label__Advanced-Data-Structures Simon received the board game Ticket to Ride as a birthday present. After playing it with his friends, he decides to come up with a strategy for the game. There are  cities on the map and  road plans. Each road plan consists of the following:  Two cities which can be directly connected by a road. The length of the proposed road.  The entire road plan is designed in such a way that if one builds all the roads, it will be possible to travel between any pair of cities.  A ticket enables you to travel between two different cities. There are  tickets, and each ticket has a cost associated with it. A ticket is considered to be useful if there is a path between those cities. Simon wants to choose two cities,  and , and build a minimal number of roads so that they form a simple path between them. Let  be the sum of costs of all useful tickets and  be the sum of lengths of all the roads Simon builds. The profit for pair  is defined as . Note that  and  are not necessarily unique and may be the same cities. Given  road plans and  ticket prices, help Simon by printing the value of his maximum possible profit on a new line. Input Format The first line contains single positive integer, , denoting the number of cities.  Each of the  subsequent lines contains three space-separated integers describing the respective values of , , and  for a road plan, where , , and . Here,  and  are two cities that the road plan proposes to connect and  is the length of the proposed road.  The next line contains a single positive integer, , denoting the number of tickets.  Each of the  subsequent lines contains three space-separated integers describing the respective values of , , and  for a ticket from city  to city  (where  is the cost of the ticket). Constraints    Output Format Print a single integer denoting the the maximum profit Simon can make. Time Limits   seconds for Java and C#. Please refer to our Environment page to see time limits for other languages. Sample Input 7 1 2 1 1 3 1 1 4 4 4 5 1 4 6 1 4 7 1 5 5 7 3 3 6 2 3 4 10 2 7 15 1 6 7  Sample Output 13  Explanation  Simon can maximize his profit by choosing the pair .  The roads on the path between them are , , and . The total road length is .  The useful tickets are , , and . The total ticket cost is .  The profit is .
__label__Data-Structures __label__Advanced-Data-Structures Our lazy white falcon finally decided to learn heavy-light decomposition. Her teacher gave an assignment for her to practice this new technique. Please help her by solving this problem.  You are given a tree with  nodes and each node's value is initially . The problem asks you to operate the following two types of queries: "1 u x" assign  to the value of the node . "2 u v" print the maximum value of the nodes on the unique path between  and . Input Format First line consists of two integers seperated by a space:  and . Following  lines consisting of two integers denotes the undirectional edges of the tree.  Following  lines consist of the queries you are asked to operate.  Constraints  It is guaranteed that input denotes a connected tree with  nodes. Nodes are enumerated with 0-based indexing. Output Format For each second type of query print single integer in a single line, denoting the asked maximum value. Sample Input 3 3 0 1 1 2 1 0 1 1 1 2 2 0 2  Sample Output 2  Explanation After the first two updates value of the th node is  and st node is . That is why maxiumum value on the path between  and  is .
__label__Data-Structures __label__Advanced-Data-Structures Alexey is playing with an array, , of  integers. His friend, Ivan, asks him to calculate the sum of the maximum values for all subsegments of . More formally, he wants Alexey to find . Alexey solved Ivan's challenge faster than expected, so Ivan decides to add another layer of difficulty by having Alexey answer  queries. The  query contains subsegment , and he must calculate the sum of maximum values on all subsegments inside subsegment .  More formally, for each query , Alexey must calculate the following function: . Can you help Alexey solve this problem? Input Format The first line contains  space-separated positive integers,  (the length of array ) and  (number of queries), respectively.  The second line contains  space-separated integers,  describing each element  (where ) in array .  Each of the  subsequent lines contains  space-separated positive integers describing the respective values for  and  in query  (where ). Constraints    Output Format For each query  (where ), print its answer on a new line. Sample Input 3 6 1 3 2 1 1 1 2 1 3 2 2 2 3 3 3  Sample Output 1 7 15 3 8 2  Explanation The answer for the second query is shown below:   The answer for the third query is shown below:
__label__Game-Theory __label__Tree __label__Data-Structures __label__Advanced-Data-Structures Andy and Lily love playing games with numbers and trees. Today they have a  tree consisting of  nodes and  edges. Each edge  has an integer weight, . Before the game starts, Andy chooses an unordered pair of distinct nodes, , and uses all the edge weights present on the unique path from node  to node  to construct a list of numbers. For example, in the diagram below, Andy constructs a list from the edge weights along the path :  Andy then uses this list to play the following game with Lily: Two players move in alternating turns, and both players play optimally (meaning they will not make a move that causes them to lose the game if some better, winning move exists). Andy always starts the game by removing a single integer from the list. During each subsequent move, the current player removes an integer less than or equal to the integer removed in the last move. The first player to be unable to move loses the game. For example, if the list of integers is  and Andy starts the game by removing , the list becomes . Then, in Lily's move, she must remove a remaining integer less than or equal to  (i.e., , , , or ). The two friends decide to play  games, where each game is in the form of a tree. For each game, calculate the number of unordered pairs of nodes that Andy can choose to ensure he always wins the game. Input Format The first line contains a single integer, , denoting the number of games. The subsequent lines describe each game in the following format: The first line contains an integer, , denoting the number of nodes in the tree. Each line  of the  subsequent lines contains three space-separated integers describing the respective values of , , and  for the  edge connecting nodes  and  with weight . Constraints         Sum of  over all games does not exceed  Scoring  For  of score, the sum of  over all games does not exceed . For  of score, the sum of  over all games does not exceed . Output Format For each game, print an integer on a new line describing the number of unordered pairs Andy can choose to construct a list that allows him to win the game. Sample Input 0 Sample Output 0 Explanation 0 Andy and Lily play the following  games: The first game's tree looks like this:   There are  ways to choose , and only one such pair causes Andy to lose the game. If he chooses the pair , the list is . Andy removes  in his first move, and Lily removes the remaining  in the next move; at this point, Andy has no remaining moves and Lily wins. Because Andy will win if he selects any of the other  pairs, we print  on a new line. The first game's tree looks like this:   There are  ways to choose , and only one such pair causes Andy to lose the game. If he chooses the pair , the list is . Andy removes  in his first move, and Lily removes the remaining  in the next move; at this point, Andy has no remaining moves and Lily wins. Because Andy will win if he selects any of the other  pairs, we print  on a new line. The second game's tree looks like this:    There are  ways to choose , and two pairs that cause Andy to lose the game: If Andy chooses , the list is . Andy removes  in his first move, and Lily removes the remaining  in the next move; at this point, Andy has no remaining moves and Lily wins. If Andy chooses , the list is . Andy can remove either a  or a  in the first move, but either way Lily will make an optimal choice in her next move that causes Andy to lose. Andy will win if he selects any of the other  pairs, so we print  on a new line. The second game's tree looks like this:    There are  ways to choose , and two pairs that cause Andy to lose the game: If Andy chooses , the list is . Andy removes  in his first move, and Lily removes the remaining  in the next move; at this point, Andy has no remaining moves and Lily wins. If Andy chooses , the list is . Andy can remove either a  or a  in the first move, but either way Lily will make an optimal choice in her next move that causes Andy to lose. Andy will win if he selects any of the other  pairs, so we print  on a new line. The third game's tree looks like this:    There are  ways to choose , and Andy will win the game regardless of which pair he chooses. Thus, we print  on a new line. The third game's tree looks like this:    There are  ways to choose , and Andy will win the game regardless of which pair he chooses. Thus, we print  on a new line.
__label__Data-Structures __label__Advanced-Data-Structures White Falcon was amazed by what she can do with heavy-light decomposition on trees. As a resut, she wants to improve her expertise on heavy-light decomposition. Her teacher gave her an another assignment which requires path updates. As always, White Falcon needs your help with the assignment. You are given a tree with  nodes and each node's value  is initially . Let's denote the path from node  to node  like this: , where  and , and  and  are connected.   The problem asks you to operate the following two types of queries on the tree: "1 u v x" Add  to ,  to ,  to , ...,   to .  "2 u v" print the sum of the nodes' values on the path between  and  at modulo . Input Format First line cosists of two integers  and  seperated by a space. Following  lines contains two integers which denote the undirectional edges of the tree. Following  lines contains one of the query types described above. Note: Nodes are numbered by using 0-based indexing.  Constraints   Output Format For every query of second type print a single integer. Sample Input 3 2 0 1 1 2 1 0 2 1 2 1 2  Sample Output 5  Explanation After the first type of query, . Hence the answer of the second query is .
__label__Data-Structures __label__Advanced-Data-Structures A giant library has just been inaugurated this week. It can be modeled as a sequence of N consecutive shelves with each shelf having some number of books. Now, being the geek that you are, you thought of the following two queries which can be performed on these shelves. Change the number of books in one of the shelves. Change the number of books in one of the shelves. Obtain the number of books on the shelf having the kth rank within  the range of shelves.  Obtain the number of books on the shelf having the kth rank within  the range of shelves.  A shelf is said to have the kth rank if its position is k when the shelves are sorted based on the number of the books they contain, in ascending order. Can you write a program to simulate the above queries? Input Format  The first line contains a single integer T, denoting the number of test cases.  The first line of each test case contains an integer N denoting the number of shelves in the library.  The next line contains N space separated integers where the ith integer represents the number of books on the ith shelf where 1<=i<=N.  The next line contains an integer Q denoting the number of queries to be performed. Q lines follow with each line representing a query.  Queries can be of two types: 1 x k - Update the number of books in the xth shelf to k (1 <= x <= N). 0 x y k - Find the number of books on the shelf between the shelves x and y  (both inclusive) with the kth rank (1 <= x <= y <= N, 1 <= k <= y-x+1). Output Format  For every test case, output the results of the queries in a new line. Constraints  1 <= T <= 5  1 <= N <= 104  1 <= Q <= 104  The number of books on each shelf is always guaranteed to be between 1 and 1000. Sample Input 2 2 1 2 2 0 1 2 1 0 1 2 2 4 4 3 2 1 4 0 1 1 1 1 1 1 0 1 1 1 0 1 4 3  Sample Output 1 2 4 1 2  Explanation  There are two test cases : The first test case contains only two shelves which can be represented as [1, 2]. Two queries are to be processed :  i) The first query asks for smallest number of books between the 1st and 2nd shevles which is 1.   ii) The second query asks for the 2nd smallest number of books between the 1st and 2nd shevles which is 2.   The first test case contains only two shelves which can be represented as [1, 2]. Two queries are to be processed :  i) The first query asks for smallest number of books between the 1st and 2nd shevles which is 1.   ii) The second query asks for the 2nd smallest number of books between the 1st and 2nd shevles which is 2.   The second test case contains four shelves which can be represented as [4, 3, 2, 1]. Four queries are to be processed :   i) The first query asks for the smallest number of books in the 1st shelf which is 4.   ii) The second query updates the number of books in the 1st shelf to 1. Hence the shelves now look like [1, 3, 2, 1].   iii) The third query asks for the smallest number of books in the 1st shelf which is now 1.   iv) The last query asks for the 3rd smallest number of books between the 1st and 4th shelves which is 2. The second test case contains four shelves which can be represented as [4, 3, 2, 1]. Four queries are to be processed :   i) The first query asks for the smallest number of books in the 1st shelf which is 4.   ii) The second query updates the number of books in the 1st shelf to 1. Hence the shelves now look like [1, 3, 2, 1].   iii) The third query asks for the smallest number of books in the 1st shelf which is now 1.   iv) The last query asks for the 3rd smallest number of books between the 1st and 4th shelves which is 2.
__label__Mathematics __label__Data-Structures __label__Advanced-Data-Structures In a galaxy far away, there is a constant battle between the republic and the droid army. The droid army decided to launch their final attack on the republic. They have N space-fighters.  Initially the ith fighter is located at (xi, yi). All of the space-fighters move with constant velocity V units/sec in the positive X direction.  i.e., fighter at (xi, yi) moves to (xi+V, yi) in 1 second.  The ith space-fighter broadcasts enemy information at a frequency fi. The republic is not scared of the artificially intelligent droid force as they have Yoda. Yoda has a special power, at any time T he can choose a region of the droid army and block one specific frequency F. This power has one constraint; it can be applied only in the form of a two sided unbounded axis parallel rectangular box open towards the both the directions across X axis (refer image below for clarity). If a frequency (F) is blocked all the space-fighters in the region having the frequency F can’t communicate.  Given the initial positions of the space-fighters, and their velocity, you are to answer queries of the following form: YU YD T where YU, YD are the bounds on y-axis inside which YODA can block a frequency at time T.  In the region described by the query, after a time T seconds from the start, if Yoda can chose one frequency (F) he wishes to, what is the maximum number of communications he can block? Input Format  Each test case is described as follows; the first line contains 3 space separated integers N - the number of space-fighters, Q - the number of queries you have to answer, and V - the velocity of the space-fighters separated by a single space.  N lines follow, each containing 3 space separated integers xi, yi, and fi, denoting the x co-ordinate, y co-ordinate and the frequency at which the ith ship broadcasts respectively. Each of the next Q lines contain 3 space separated integers representing YU, YD, T respectively. Refer the figure for more clarity Note: Points on the boundaries should be counted as well. Output Format  For each query you are to output a single integer denoting the result. Constraints  1 <= N <= 50000 1 <= Q <= 30000 1 <= V <= 10000 -109 <= xi <= 109 -109 <= yi <= 109 1 <= fi <= 109 -109 <= YU <= 109 -109 <= YD <= 109 1 <= T <= 10000 YU >= YD Sample Input 5 5 82 -4 1 4 -3 -2 2 -3 5 1 0 -5 2 1 -1 2 1 -1 57 -2 -5 11 5 -5 40 -1 -5 16 5 -1 93  Sample Output 1 2 3 3 1  Explanation Consider the points ships in the Y-range 1 to -1, they are the (-4, 1) and (1, -1), and both operate on different frequencies, hence the most times a frequency is repeated is once.
__label__Data-Structures __label__Advanced-Data-Structures A Sumo wrestling championship is scheduled to be held this winter in the HackerCity where N wrestlers from different parts of the world are going to participate. The rules state that two wrestlers can fight against each other if and only if the difference in their height is less than or equal to K,  (i.e) wrestler A and wrestler B can fight if and only if |height(A)-height(B)|<=K.    Given an array H[], where H[i] represents the height of the ith fighter, for a given l, r where 0 <= l <= r < N, can you count the number of pairs of fighters between l and r (both inclusive) who qualify to play a game? 0 <= l <= r < N Input Format  The first line contains an integer N and K  separated by a single space representing the number of Sumo wrestlers who are going to participate and the height difference K.  The second line contains N integers separated by a single space, representing their heights H[0] H[1] ... H[N - 1].  The third line contains Q, the number of queries. This is followed by Q lines each having two integers l and r separated by a space.   Output Format  For each query Q, output the corresponding value of the number of pairs of fighters for whom the absolute difference of height is not greater that K.   Constraints  1 <= N <= 100000  0 <= K <= 109  0 <= H[i] <= 109  1 <= Q <= 100000  0 <= l <= r < N   Sample Input Sample Output  Explanation  Query #0: Between 0 and 1 we have i,j as (0,1) and |H[0]-H[1]|=2 therefore output is 1.  Query #1: The pairs (H[1],H[2]) (H[1],H[3]) and (H[2],H[3]) are the pairs such that |H[i]-H[j]| <=2. Hence output is 3.  Query #2: Apart from those in Query #1, we have (H[0],H[1]), (H[0], H[3]), (H[0], H[4]), hence 6.   Timelimits Timelimits are given here
__label__Data-Structures __label__Advanced-Data-Structures Shik loves sorted intervals. But currently he does not have enough time to sort all the numbers. So he decided to use Almost sorted intervals. An Almost sorted interval is a consecutive subsequence in a sequence which satisfies the following property: The first number is the smallest. The last number is the largest. Please help him count the number of almost sorted intervals in this permutation.   Note: Two intervals are different if at least one of the starting or ending indices are different. Input Format  The first line contains an integer N.  The second line contains a permutation from 1 to N. Output Format  Output the number of almost sorted intervals.   Constraints  1 ≤ N ≤ 106  Sample Input  5 3 1 2 5 4  Sample Output  8  Explanation  The subsequences [3], [1], [1 2], [1 2 5], [2], [2 5], [5], [4] are almost sorted intervals.
__label__Data-Structures __label__Advanced-Data-Structures In Burger Town new burger restaurants will be opened! Concretely,  restaurants will open in  days, while restaurant  will be opened on day  and will be located at . The town should be imagined as an one dimensional line in which every object's location can be described by the  coordinate. Tim has just recently arrived the town after a very bad result in a programming contest. Thus he wants to cheer himself up by starting a trip to try out some new burgers.  Every burger restaurant  is associated with two integers  and . If Tim eats a burger from , then his happiness will increase by , which can also be negative, depending on the deliciousness of the burger. On the other hand, if Tim looks through the window of an opened restaurant , from which he will not eat a burger, then his happiness decreases by , since Tim gets sad by only seeing the burgers.  Tim's journey can start from any day  at the burger restaurant  and eats a burger from there. On each subsequent day , Tim has the following options: Stay at the previous restaurant .  Or go to the new restaurant  to eat a burger from there. If he decides for the latter option, then on the path from  to  he will look through all the windows that are on his path and maybe lose some happiness. Concretely, if , then he will look through the window of every opened restaurant , having . Similar for the case . Since Tim is a very good friend of yours you should help him finding a trip that will maximize his happiness. If he should stay at home since no trip would cheer him up, then print 0.  0 Note: Tim's happiness is 0 at the beginning of the trip and is allowed to be negative throughout the time.  Input Format  will be given on the first line, then  lines will follow, describing the restaurants numbered from 1 to  accordingly. Restaurant  will be described by ,  and  separated by a single space. Output Format Output the maximium happiness on one line. Constraints         and no two restaurants will have the same  coordinates.  and no two restaurants will have the same  coordinates. Sample Input  3  2 -5 1  1 5 1  3 5 1  Sample Output 8  Sample Input  4  4 10 0  1 -5 0  3 0 10  2 10 0  Sample Output  15  Sample Input  3  1 -1 0  2 -2 0  3 -3 0  Sample Output  0  First testcase: His trip starts on day 2 at restaurant 2 located at . He gains  happiness points there by eating a burger. On the next day he goes from restaurant 2 to 3, but will look through the window of restaurant 2 and 1. Therefore he loses  and  points on the way to restaurant 3. There he eats a burger and gains another  points. In total his happiness is equal to  8 and this is optimal. 8 Second testcase: His trip starts on day 1 at restaurant 1. Then his actions on day 2, 3 and 4 will be go to restaurant 2, stay at restaurant 2 and go to restaurant 4 respectively. The happiness of this optimal trip is equal to  15. 15 Third testcase: It's not worth to start the trip from any of the restaurant since he will only have negative happiness. That's why he should stay at home and 0 should be printed.  0
__label__Data-Structures __label__Advanced-Data-Structures Roy has taken a liking to the Binary Search Trees(BST). He is interested in knowing the number of ways an array  of  integers can be arranged to form a BST. Thus, he tries a few combinations, and notes down the numbers at the odd levels and the numbers at the even levels.  You're given two values, alpha and beta. Can you calculate the sum of Liking of all possible BST's that can be formed from an array of  integers? Liking of each BST is defined as follows  (sum of numbers on even levels * alpha) - (sum of numbers on odd levels * beta)  Note  The root element is at level  ( Even ) The elements smaller or equal to the parent element are present in the left subtree, elements greater than or equal to the parent element are present in the right subtree.  Explained here If the answer is no less than , output the answer % .  (If the answer is less than , keep adding  until the value turns non negative.) Input Format  The first line of input file contains an integer, , denoting the number of test cases to follow.  Each testcase comprises of  lines.  The first line contains , the number of integers.  The second line contains two space separated integers, alpha and beta.  The third line contains space separated  integers_, denoting the  integer in array .   Output Format  Output  lines. Each line contains the answer to its respective test case.  Constraints          Sample Input Sample Output Explanation There are  test cases in total.  For the first test case, only  BST can be formed with 1 as the root node. Hence the Liking / sum is .  For the first test case, only  BST can be formed with 1 as the root node. Hence the Liking / sum is .  1 For the second test case, we get 2 BSTs of the form, the Liking of the first tree is  and , this sums to , hence the answer.  For the second test case, we get 2 BSTs of the form, the Liking of the first tree is  and , this sums to , hence the answer.  For the third test case, we get  BSTs. The Liking of each of the BST from left  to right are  which sums to  and hence the answer.   Similarly, for the fourth test case, the answer is .
__label__Data-Structures __label__Advanced-Data-Structures You are given a tree with N nodes with every node being colored. A color is represented by an integer ranging from 1 to 109. Can you find the number of distinct colors available in a subtree rooted at the node s?  Input Format  The first line contains three space separated integers representing the number of nodes in the tree (N), number of queries to answer (M) and the root of the tree.  In each of the next N-1 lines, there are two space separated integers(a b) representing an edge from node a to Node b and vice-versa.    N lines follow: N+ith line contains the color of the ith node. M lines follow: Each line containg a single integer s. Output Format  Output exactly M lines, each line containing the output of the ith query. Constraints  0 <= M <= 105 1 <= N <= 105 1 <= root <= N 1 <= color of the Node <= 109 Example Sample Input 4 2 1 1 2 2 4 2 3 10 20 20 30 1 2  Sample Output 3 2  Explanation Query 1-Subtree rooted at 1 is the entire tree and colors used are 10 20 20 30 , so the answer is 3(10,20 and 30) Query 2-Subtree rooted at 2 contains color 20 20 30, so the answer is 2(20 and 30)
__label__Data-Structures __label__Advanced-Data-Structures Chinese Version Russian Version You are given a tree with N nodes and each has a value associated with it. You are given Q queries, each of which is either an update or a retrieval operation.  The update query is of the format i j X  This means you'd have to add a GP series to the nodes which lie in the path from node i to node j (both inclusive) with first term of the GP as X on node i and the common ratio as R (given in the input) i j X i R The retrieval query is of the format i j You need to return the sum of the node values (S) lying in the path from node i to node j modulo 100711433.  Input Format  The first line contains two integers (N and R respectively) separated by a space.  In the next N-1 lines, the ith line describes the ith edge: a line with two integers a b separated by a single space denotes an edge between a, b.  The next line contains 2 space separated integers (U and Q respectively) representing the number of Update and Query operations to follow.  U lines follow. Each of the next U lines contains 3 space separated integers (i,j, and X respectively).  Each of the next Q lines contains 2 space separated integers, i and j respectively.  Output Format  It contains exactly Q lines and each line containing the answer of the ith query. Constraints 2 <= N <= 100000  2 <= R <= 109  1 <= U <= 100000  1 <= Q <= 100000  1 <= X <= 10  1 <= a, b, i, j <= N   Sample Input  6 2 1 2 1 4 2 6 4 5 4 3 2 2 1 6 3 5 3 5 6 4 5 1  Sample Output 31 18  Explanation The node values after the first updation becomes :   3 6 0 0 0 12    The node values after second updation becomes :   3 6 20 10 5 12    Answer to Query #1: 12 + 6 + 3 + 10 = 31  Answer to Query #2: 5 + 10 +3 = 18
__label__Data-Structures __label__Advanced-Data-Structures You are given a sequence . The task is to perform the following queries on it: Type 1. Given two integers  and  . Reorder the elements of the sequence in such a way (changed part of the sequence is in brackets):   Type 2. Given two integers  and , print the value of sum . Input Format  The first line contains two integers  and . The second line contains  integers , denoting initial sequence. Each of the next  lines contains three integers , where  denotes the type of the query, and  are parameters of the query. It's guaranteed that for a first-type query  will be even.   Constraints           Output Format For each query of the second type print the required sum. Sample Input 6 4 1 2 3 4 5 6 1 2 5 2 2 3 2 3 4 2 4 5  Example Output 5 7 9  Explanation After the first query the sequence becomes [1, 3, 2, 5, 4, 6].
__label__Search __label__Tree __label__Data-Structures __label__Advanced-Data-Structures Let  denote an arithmetic progression (AP) with first term  and common difference , i.e.  denotes an infinite . You are given  APs => . Let  denote the sequence obtained by multiplying these APs. Multiplication of two sequences is defined as follows. Let the terms of the first sequence be , and terms of the second sequence be . The sequence obtained by multiplying these two sequences is    If  are the terms of a sequence, then the terms of the first difference of this sequence are given by  calculated as  respectively. Similarly, the second difference is given by , and so on. We say that the  difference of a sequence is a constant if all the terms of the  difference are equal.   Let  be a sequence defined as =>   Similarly,  is defined as => product of .  Task:  Can you find the smallest  for which the  difference of the sequence  is a constant? You are also required to find this constant value.   You will be given many operations. Each operation is of one of the two forms:   1) 0 i j => 0 indicates a query . You are required to find the smallest  for which the  difference of  is a constant. You should also output this constant value.   0 i j 2) 1 i j v => 1 indicates an update . For all , we update .   1 i j v Input Format  The first line of input contains a single integer , denoting the number of APs.  Each of the next  lines consists of three integers  .  The next line consists of a single integer , denoting the number of operations. Each of the next  lines consist of one of the two operations mentioned above.    Output Format  For each query, output a single line containing two space-separated integers  and .  is the smallest value for which the  difference of the required sequence is a constant.  is the value of this constant. Since  might be large, output the value of  modulo 1000003.   Note:  will always be such that it fits into a signed 64-bit integer. All indices for query and update are 1-based. Do not take modulo 1000003 for . Constraints        For updates of the form 1 i j v,     1 i j v Sample Input  2   1 2 1   5 3 1   3   0 1 2   1 1 1 1   0 1 1    Sample Output  2 12   2 8    Explanation The first sequence given in the input is =>   The second sequence given in the input is =>   For the first query operation, we have to consider the product of these two sequences:  =>   =>   First difference is =>   Second difference is =>  This is a constant and hence the output is 2 12.   2 12 After the update operation 1 1 1 1, the first sequence becomes =>   i.e =>   For the second query, we consider only the first sequence =>   First difference is =>   Second difference is =>  This is a constant and hence the output is 2 8 1 1 1 1 2 8
__label__Data-Structures __label__Advanced-Data-Structures Coolguy gives you a simple problem. Given a -indexed array, , containing  elements, what will  be after this pseudocode is implemented and executed? Print . //f(a, b) is a function that returns the minimum element in interval [a, b]  ans = 0  for a -> [1, n]     for b -> [a, n]         for c -> [b + 1, n]             for d -> [c, n]                 ans = ans + min(f(a, b), f(c, d))  Input Format The first line contains  (the size of array ).  The second line contains  space-separated integers describing . Constraints  ≤  ≤   ≤  ≤  Note:  is -indexed (i.e.: ). Output Format Print the integer result of . Sample Input 3 3 2 1  Sample Output 6  Explanation       We then sum these numbers () and print , which is .
__label__Data-Structures __label__Advanced-Data-Structures White Falcon has a tree with  nodes. Each node contains a linear function. Let's denote by  the linear function contained in the node .   Let's denote the path from node  to node  like this: , where  and , and  and  are connected.   White Falcon also has  queries. They are in the following format:       . Assign  as the function of all the nodes on the path from  to , i.e.,  is changed to  where  is the path from  to .     . Assign  as the function of all the nodes on the path from  to , i.e.,  is changed to  where  is the path from  to .    . Calculate  modulo     . Calculate  modulo  Input Format The first line contains , the number of nodes. The following  lines each contain two integers  and  that describe the function .   Following  lines contain edges of the tree.  The next line contains , the number of queries. Each subsequent line contains one of the queries described above. Output Format For every query of the second kind, print one line containing an integer, the answer for that query.   Constraints   (Number of nodes)   (Number of queries)   Sample Input 2 1 1 1 2 1 2 2 1 2 2 1 1 2 1 2 1  Sample Output 3  Explanation
__label__Data-Structures __label__Advanced-Data-Structures Given a rooted tree of  nodes, where each node is uniquely numbered in between [1..N]. The node 1 is the root of the tree. Each node has an integer value which is initially 0. You need to perform the following two kinds of queries on the tree: add t value: Add value to all nodes in subtree rooted at t max a b: Report maximum value on the path from a to b Input Format First line contains N, number of nodes in the tree. Next N-1 lines contain two space separated integers x and y which denote that there is an edge between node x and node y.  Next line contains Q, the number of queries to process.  Next Q lines follow with either add or max query per line. Constraints           Output Format For each max query output the answer in a separate line. Sample Input 5 1 2 2 3 2 4 5 1 6 add 4 30 add 5 20 max 4 5 add 2 -20 max 4 5 max 3 4  Sample Output 30 20 10  Explanation In the test case we have the following tree:  Initially all node values are zero.  Queries are performed in the following way: add 4 30 // add 30 to node 4  add 5 20 // add 20 to node 5  max 4 5 // maximum of nodes 4,2,1,5 is 30  add 2 -20 // subtract 20 from nodes 2,3,4  max 4 5 // maximum of nodes 4,2,1,5 is 20  max 3 4 // maximum of nodes 3,2,4 is 10
__label__Search __label__Data-Structures __label__Advanced-Data-Structures There is an integer array  which does not contain more than two elements of the same value. How many distinct ascending triples () are present?  Input format  The first line contains an integer, , denoting the number of elements in the array. This is followed by a single line, containing  space-separated integers. Please note that there are no leading spaces before the first number, and there are no trailing spaces after the last number. Output format:  A single integer that denotes the number of distinct ascending triplets present in the array. Constraints:    Every element of the array is present at most twice.  Every element of the array is a 32-bit non-negative integer. Sample input:  6   1 1 2 2 3 4    Sample output:  4  Explanation  The distinct triplets are  (1,2,3)  (1,2,4)  (1,3,4)  (2,3,4) The elements of the array might not be sorted. Make no assumptions of the same.
__label__Bit __label__Data-Structures __label__Advanced-Data-Structures You are given an array, , consisting of  integers. A segment, , is beautiful if and only if the bitwise AND of all numbers in  with indices in the inclusive range of  is not greater than . In other words, segment  is beautiful if . You must answer  queries. Each query, , consists of  integers: , , and . The answer for each  is the number of beautiful segments  such that  and . Input Format The first line contains two space-separated integers,  (the number of integers in ) and  (the number of queries). The second line contains  space-separated integers, where the  integer denotes the  element of array . Each line  of the  subsequent lines contains  space-separated integers, , , and , respectively, describing query . Constraints       holds for test cases worth at least  of the problem's score.  holds for test cases worth at least  of the problem's score.  Output Format Print  lines, where the  line contains the number of beautiful segments for query . Sample Input 5 3 1 2 7 3 4 1 5 3 2 4 6 3 5 2  Sample Output 13 5 2  Explanation The beautiful segments for all queries are listed below. Query 0: The beautiful segments are . Query 1: The beautiful segments are . Query 2: The beautiful segments are .
__label__Data-Structures __label__Advanced-Data-Structures Two positive integers  and  are given.   is decimal representation of integer .  Lets define . For example, if :   For each query you will be given two integers  and  that define a substring equal to .  Your task is to calculate divisibility of given substring.  Divisibility of given substring is equal to number of  pairs such that:   and   is divisible by , assuming that  is divisible by any other integer. Timelimits  Timelimits for this challenge is given here Input Format First line contains two integers  and  separated by a single space.  is the number of queries.  Second line contains a big integer .  Next  lines contains two integers  and  separated by a single space each - begin and end points of substring. Constraints   Output Format Output  lines, the -th line of the output should contain single integer  divisibility of the -th query substring. Sample Input 3 5 4831318 3 5 5 7 1 7 1 2 2 3  Sample Output 2 3 9 1 1  Explanation In the first query, b = 3 and e = 5. Two such pairs that are divisible by P = 3 are   f(3, 3) = 3 and f(5, 5). Hence the answer 2.   In the second query, b = 5 and e = 7. Three such pairs that are divisible by P are   F(5, 5) = 3, f(6, 7) = 18 and f(5, 7) = 318
__label__Data-Structures __label__Advanced-Data-Structures Consider a binary search tree T which is initially empty. Also, consider the first N positive integers {1, 2, 3, 4, 5, ....., N} and its permutation P {a1, a2, ..., aN}.  N If we start adding these numbers to the binary search tree T, starting from a1, continuing with a2, ... (and so on) ..., ending with aN. After every addition we ask you to output the sum of distances between every pair of T's nodes. Input Format  The first line of the input consists of the single integer N, the size of the list.  The second line of the input contains N single space separated numbers the permutation a1, a2, ..., aN itself. Constraints  1 ≤ N ≤ 250000   Output Format  Output N lines.  On the ith line output the sum of distances between every pair of nodes after adding the first i numbers from the permutation to the binary search tree T  Sample Input #00 8 4 7 3 1 8 2 6 5  Sample Output #00 0 1 4 10 20 35 52 76  Explanation #00  After adding the first element, the distance is 0 as there is only 1 element  0 4  After adding the second element, the distance between 2 nodes is 1.   1 4  \   7  After adding the third element, the distance between every pair of elements is 2+1+1=4 2+1+1=4   4  / \ 3   7      After adding the fourth element, the distance between every pair of elements is 3 + 2 + 1 + 2 + 1 + 1 = 10 3 + 2 + 1 + 2 + 1 + 1 = 10     4    / \   3   7      / 1  After adding the fifth element, the distance between every pair of elements is 4 + 3 + 2 + 1 + 3 + 2 + 1 + 2 + 1 + 1 = 20 4 + 3 + 2 + 1 + 3 + 2 + 1 + 2 + 1 + 1 = 20     4    / \   3   7      /     \ 1       8  After adding the sixth element, the distance between every pair of elements is 5 + 4 + 3 + 2 + 1 + 4 + 3 + 2 + 1 + 3 + 2 + 1 + 2 + 1 + 1 = 35 5 + 4 + 3 + 2 + 1 + 4 + 3 + 2 + 1 + 3 + 2 + 1 + 2 + 1 + 1 = 35     4    / \   3   7      /     \ 1       8  \   2  After adding the seventh element, the distance between every pair of elements is 5+5+4+3+2+1+4+4+3+2+1+3+3+2+1+2+2+1+1+1+2=52 5+5+4+3+2+1+4+4+3+2+1+3+3+2+1+2+2+1+1+1+2=52     4    / \   3   7      /   / \ 1   6   8  \   2  After adding the final element, the distance between every pair of elements is 6+5+5+4+3+2+1+5+4+4+3+2+1+4+3+3+2+1+3+2+2+1+2+1+1+2+1+3=76 6+5+5+4+3+2+1+5+4+4+3+2+1+4+3+3+2+1+3+2+2+1+2+1+1+2+1+3=76         4       /   \     3      7      /      /   \  1      6     8   \    /    2  5
__label__Data-Structures __label__Advanced-Data-Structures You are given a list of  numbers . For each element at position  (), we define  and  as:   = closest index j such that j < i and . If no such j exists then  = 0.   = closest index k such that k > i and . If no such k exists then  = 0.    We define  =  * . You need to find out the maximum  among all i. Input Format The first line contains an integer , the number of integers. The next line contains the  integers describing the list a[1..N]. Constraints     Output Format Output the maximum  among all indices from  to .  Sample Input 5 5 4 3 4 5  Sample Output 8  Explanation We can compute the following:          The largest of these is 8, so it is the answer.
__label__Tree __label__Data-Structures __label__Advanced-Data-Structures Burger Town is a city that consists of  special junctions and  pathways. There is exactly one shortest path between each pair of junctions. Junction  is located at  and the distance between two junctions  is defined by the Taxicab geometry.  Tim has recently afforded a taxicab to work as a taxicab driver. His vehicle was very cheap, but has a very big flaw. It can only drive  units horizontally and  units vertically before refueling.  If a customer wants to be brought from a junction  to another junction , then this car is only capable of driving the route, iff the sum of horizontal distances and the sum of vertical distances on this path are less than or equal to  and  respectively.  Also, there is a unique path between any two junctions.    Now he has thoughts about returning the vehicle back to the seller. But he first wants to know, if it's even worth it. That's why he wants to know the number of unordered pairs  such that it is not possible to drive a customer from junction  to junction .  Input Format On the first line you will be given ,  and  separated by a single space.  Each of the next  lines contains two space separated integers , denoting the location of junction . Each of the next  lines contains two space separated integers describing a path existing between , i.e., there is a path between  and .   Output Format Output the number of unordered pairs  such that it is not possible to drive from  to .  Constraints    Sample Input 3 2 1 0 0 1 1 2 0 1 2 2 3  Sample Output 1  Explanation The car is only capable of driving  units horizontally and  unit vertically. The horizontal distance between junction 1 and 3(via 2) is equal to 2(), which fits under the horizontal limit of the car. The vertical distance between 1 and 3 is also equal to 2(), but this is not possible for this car since .
__label__Data-Structures __label__Advanced-Data-Structures Jaggu is a little kid and he likes playing with water balloons. He took 1 million ( 106 ) empty buckets and he filled the bucket with water balloons under the instruction of his sister Ishika.  His sister gives him two types of commands: R pos1 pos2 which implies that jaggu needs to tell her what is the total number of water balloons in the bucket from pos1 to pos2 (both included). R pos1 pos2 U pos M plus which implies that he has to work like the function  U pos M plus Update(pos,M,plus) void Update(int pos,int M,int plus) {     int N=1000000;  //1 million     for (int i=1;i<=50;i++)     {         int back = pos         for(int j=1;j<=1000;j++)         {             add M water ballons at bucket pos             int s,in=__builtin_popcount(pos);             for(int k=0;;k++)             {                 s=pos+pow(2,k)                 if( __builtin_popcount(s) <= in )                 {                     in = __builtin_popcount(s)                     pos = s;                     if(pos>N)       break;                     add M water ballons at bucket pos                 }             }             pos = pos - N         }         pos = back+plus;         if(pos>N) pos-=N;     } }  Jaggu is too lazy to put the water ballons in the bucket. Afraid that he might be caught for not doing what his sister told him to do so, he asks your help to provide correct answers  for each of his sister's query. . Input Format First line contains Q, number of queries to follow. Next Q line follows , which can be either an Update Query or Report Query.Each Update Query is followed by atleast 1 report query. Output Format For each report query , output the answer in a separate line. Constraints 1 ≤ Q ≤ 2 * 105 1 ≤ pos1,pos2,pos ≤ 106 pos1 ≤ pos2 1 ≤ M ≤ 10 1 ≤ plus ≤ 999999 Sample Input 2 U 692778 7 291188 R 636916 747794  Sample Output 378   Explanation Follow the code above to get the answer. Note  Input is randomly generated. Input is randomly generated. __builtin_popcount(x) gives the number of set bits in binary representation of x. __builtin_popcount(x) gives the number of set bits in binary representation of x. pow(2,k) denotes 2 raised to k , i.e. exponentiation of 2. pow(2,k) denotes 2 raised to k , i.e. exponentiation of 2. Timelimit is 3 times the timelimit mentioned here
__label__Data-Structures __label__Advanced-Data-Structures Given a tree of N nodes, where each node is uniquely numbered in between [1, N]. Each node also has a value which is initially 0. You need to perform following two operations in the tree.   Update Operation Report Operation Update Operation U r t a b  Adds ab + (a+1)b + (b+1)a to all nodes in the subtree rooted at t, considering that tree is rooted at r (see explanation for more details).   ab + (a+1)b + (b+1)a t r Report Operation R r t m  Output the sum of all nodes in the subtree rooted at t, considering that tree is rooted at r. Output the sum modulo m (see explanation for more details). t r m Input Format First line contains N, number of nodes in the tree.  Next N-1 lines contain two space separated integers x and y which denote that there is an edge between node x and node y.  Next line contains Q, number of queries to follow.  Next Q lines follow, each line will be either a report operation or an update operation.   Output Format For each report query output the answer in a separate line. Constraints 1 ≤ N ≤ 100000  1 ≤ Q ≤ 100000  1 ≤ m ≤ 101  1 ≤ r, t, x, y ≤ N  x ≠ y  1 ≤ a, b ≤ 1018  Notes There will be at most one edge between a pair of nodes. There will be no loop. Tree will be completely connected.  Sample Input 4 1 2 2 3 3 4 4 U 3 2 2 2 U 2 3 2 2 R 1 2 8 R 4 3 9  Sample Output 2 3  Explanation Initially Values in each node : [0,0,0,0]  The first query is U 3 2 2 2. Here, tree is rooted at 3. It looks like  U 3 2 2 2     3(0)    / \   /   \  2(0)  4(0)  |  |  1(0)  For the sub tree rooted at 2 ( nodes 2 and 1 ), we add ab  + (a+1)b + (b+1)a = 22 + 32 + 32 = 22. After first update operation, nodes 1, 2, 3, and 4 will have values 22, 22, 0 and 0 respectively.       3(0)    / \   /   \  2(22) 4(0)  |  |  1(22)  The second query is U 2 3 2 2. Here, tree is rooted at 2. It looks like U 2 3 2 2     2(22)    / \   /   \  1(22) 3(0)        |        |        4(0)  For the sub tree rooted at 3 (nodes 3 and 4), we add ab + (a+1)b + (b+1)a = 22 + 32 + 32 = 22. After second update operation, nodes 1, 2, 3, and 4 each have values 22,22,22,22 respectively.       2(22)    / \   /   \  1(22) 3(22)        |        |        4(22)  The first report query is R 1 2 8 asks for the sum modulo 8 of the subtree rooted at 2, when the tree is rooted at 1. The tree looks like  R 1 2 8 1(22)  \   \    2*(22)    |    |    3*(22)    |    |    4*(22)  The sum of the values of nodes 2, 3 and 4 are  (22 + 22 + 22) % 8 = 2  The second report query is R 4 3 9 asks for the sum modulo 9 of the subtree rooted at 3 when the tree is rooted at 4. The tree looks like  R 4 3 9 4(22)  \   \    3*(22)    |    |    2*(22)    |    |    1*(22)  The sum of the values of nodes 3, 2 and 1 are  (22 + 22 + 22) % 9 = 3  Time Limits:  C, C++: 4s | Java and other JVM based languages: 10s | Python, Python3 = 45s | Other interpreted Language: 30s | C#, Haskell: 10s | Rest: 3 times of default.
__label__Data-Structures __label__Advanced-Data-Structures In this problem you operate on two arrays of  integers. We will call them the  and the  respectively.  Your goal is just to maintain them under the modification operations, such as:    1   : Reverse the subarray of the  array, starting at the  number, ending at the  number, inclusively;   2     : Swap two consecutive fragments of the  array, the first is from the  number to the , the second is from the  number to the ;   3  : Swap the piece that starts at the  number and end at the  one between the  and the  array;   4  : We consider only the piece from the  number to the  one. The numbers in the  array are -coordinates of some set of points and the numbers in the  array are -coordinates of them. For the obtained set of points we would like to place such a circle on a plane that would contain all the points in it and would have the minimal radius. Find this minimal radius.   Input Format  The first line of input contains two space separated integers  and  denoting the number of integers in arrays and the number of queries respectively.  The second line contains  space separated integers: the initial elements of the  array.  The third line contains  space separated integers: the initial elements of the  array.  Then there are  lines containing queries in the format listed above.   Output Format  For each type-4 query output the sought minimal radius with exactly two symbols after the decimal point precision.   Constraints    All the numbers in arrays are non-negative and don't exceed .  The sum of  over the type-4 queries won't exceed .  In the query of the type 2, .  In the queries of the types 1, 3, 4, ; . Sample Input 10 10 1 2 3 4 5 6 7 8 9 10 1 2 3 4 5 6 7 8 9 10 3 2 6 1 0 9 9 4 6 9 2 0 2 7 9 9 1 0 3 6 2 1 2 3 4 5 1 1 7 10 2 1 8 8 9 10 4 6 9 2 0 2 2 4 6  Example Output 2.12 2.50
__label__Data-Structures __label__Advanced-Data-Structures You are given a rooted tree with N nodes and the root of the tree, R, is also given. Each node of the tree contains a value, that is initially empty. You have to mantain the tree under two operations: Update Operation Report Operation Update Operation  Each Update Operation begins with the character U. Character U is followed by 3 integers T, V and K. For every node which is the descendent of the node T, update it's value by adding V + d*K, where V and K are the parameters of the query and d is the distance of the node from T. Note that V is added to node T.   U U Report Operation  Each Report Operation begins with the character Q. Character Q is followed by 2 integers, A and B. Output the sum of values of nodes in the path from A to B modulo (109 + 7)  Q Q Input Format  The first Line consists of 3 space separated integers, N E R, where N is the number of nodes present, E is the total number of queries (update + report), and R is root of the tree.   Each of the next N-1 lines contains 2 space separated integers, X and Y (X and Y are connected by an edge). Thereafter, E lines follows: each line can represent either the Update Operation or the Report Operation. Update Operation is of the form : U T V K. Report Operation is of the form : Q A B. Output Format  Output the answer for every given report operation. Constraints  1 ≤ N, E ≤ 105  1 ≤ E ≤ 105  1 ≤ R, X, Y, T, A, B ≤ N  1 ≤ V, K ≤ 109  X ≠ Y Sample Input 7 7 1 1 2 2 3 2 4 2 5 5 6 6 7 U 5 10 2 U 4 5 3 Q 1 7 U 6 7 4 Q 2 7 Q 1 4 Q 2 4  Sample Output 36 54 5 5  Explanation  Values of Nodes after U 5 10 2: [0 0 0 0 10 12 14]. U 5 10 2 [0 0 0 0 10 12 14] Values of Nodes after U 4 5 3: [0 0 0 5 10 12 14].  U 4 5 3 [0 0 0 5 10 12 14] Sum of the Nodes from 1 to 7: 0 + 0 + 10 + 12 + 14 = 36. Values of Nodes after U 6 7 4: [0 0 0 5 10 19 25].   U 6 7 4 Sum of the Nodes from 2 to 7: 0 + 10 + 19 + 25 = 54.  Sum of the Nodes from 1 to 4: 0 + 0 + 5 = 5. Sum of the Nodes from 2 to 4: 0 + 5 = 5.
__label__Data-Structures __label__Advanced-Data-Structures Natural numbers from 1 to N have been placed in an increasing order over some helix ( a circular structure ). When the helix starts rotating, it is easy to find out  The position of a given number The number located at a given position.  The helix has numbers arranged in the following fashion:   [1, 2, 3, ..., N]  Due to some malfunction, the helix has started rotating in a weird manner. Right now, every possible contiguous interval can be rotated, and hence, locating a particular number or identifying the number at a given position is almost impossible. For example, if at some particular instant, the integer list is like this: [1, 2, 3, 4, 5, ..., N]  rotating the interval [5...N] will leave the list like this: [1, 2, 3, 4, N, N - 1, N - 2, ..., 5]  We need a software to handle this. Can you help us? Input Format  The first line of the input consists of two space separated integers, N, Q. N signifies that initially our list contains numbers from 1 to N, placed in an increasing order. Q lines follow and contain input in one of the following formats:   1 A B  indicating that the helix rotated circularly in the interval [A..B] ( both inclusive); 2 A  indicating that we are interested in knowing the current position of the number A   3 A  indicating that we are interested in knowing the number at position A.   Output Format  For each line in the input of the form 2 A  2 A output a line saying  element A is at position x  where A is the number we are interested in and x is its current position. For each line of the form 3 A 3 A output a line saying  element at position A is x  where A is the position we are interested in and x is the integer located at this position.  Constraints  1 ≤ N, Q ≤ 105  positions are 1-indexed.    Sample Input 5 10 1 1 3 2 3 3 3 1 3 5 1 2 4 3 1 3 5 2 4 1 5 5 2 2  Sample Output element 3 is at position 1 element at position 3 is 1 element at position 1 is 3 element at position 5 is 1 element 4 is at position 2 element 2 is at position 4  Explanation Initially elements are placed like this: [1, 2, 3, 4, 5]  after the first rotation, they are placed like this: [3, 2, 1, 4, 5]  and that's how we get the first 2 results (first 2 lines in the output). After second rotation, they are placed like this: [3, 2, 5, 4, 1]  and third one does this: [3, 4, 5, 2, 1]  In the last rotation (1 5 5), it's easy to see that output matches the initial positions of the elements. Last rotation doesn't change the positions of the elements.
__label__Graph-Algorithms __label__Data-Structures __label__Advanced-Data-Structures Time Limits C:5, Cpp:5, C#:6, Java:8, Php:18, Ruby:20, Python:20, Perl:18, Haskell:10, Scala:14, Javascript:20, Pascal:5 Like every IT company, the Uplink Corporation has its own network. But, unlike the rest of the companies around the world, Uplink's network is subject to very specific restrictions: Any pair of servers within the network should be directly connected by at most 1 link. Each link is controlled by some specific network administrator. No server has more than 2 links connected to it, that are controlled by the same administrator. For easier management, links controlled by some administrator cannot be redundant (this is, removing any link will disconnect some two previously connected servers) Notice that 2 connected servers might not have any direct link between them. Furthermore, in order to keep the network in a secured status, Uplink directives periodically try to perform some modifications over the network to mislead hackers. The problem is, having such a huge network, they need a software to efficiently simulate the network status after any of such modifications. You have been assigned to write the core section of that software.  Operations performed by the directives are: Change the administrator assigned to some particular link. Place some number of security devices along a particular link. Also, given a network administrator, they would like to know how many devices are in the path created by links controlled by that administrator (if any) between 2 servers. Input Format  Input begins with a line containing 4 integers  separated by a single whitespace, denoting the number of servers, links, network administrators and transformations, respectively.  lines follow each one with 3 integers  and , saying that there is a link between server  and server , and that link is controlled by administrator . Initially, network topology fulfills the restrictions described above and there is no security device along any link. Remaining  lines in the input follow one the next formats:     meaning that link between server  and server   is requested to be assigned to administrator      meaning that the number of security devices along the link between server  and server   will be fixed to  , removing any existing devices on this link before the operation. The involved link will always exist.       meaning that directives want to know the number of security devices placed along the path between server  and server , just considering links controlled by administrator . Output Format  For each network transformation in the form     you should output: "Wrong link" if there is no direct link between server  and server . "Already controlled link" if the requested link does exist, but it is already controlled by administrator . "Server overload" if administrator  already controls 2 links connected to one of the involved servers. "Network redundancy" if the requested assignment creates no new connection considering just the links controlled by . "Assignment done" if none of the above conditions holds. In this case, link directly connecting  with  is assigned to . For each network transformation in the form     you should output: "No connection" if there is no path between the requested servers considering just the links controlled by . " security devices placed" where D is the number of security devices placed so far on the existing connection between the requested servers considering just the links controlled by .  Constraints           Sample Input: 4 5 3 15 1 2 1 2 3 1 3 4 2 1 4 2 1 3 3 2 3 4 49 1 1 2 3 2 1 4 64 3 1 4 2 1 1 2 3 3 4 2 3 3 1 3 3 1 1 4 3 3 3 4 2 3 2 4 1 2 1 4 13 2 1 3 21 2 2 3 24 1 2 3 3 1 2 4 3  Sample Output: Assignment done 64 security devices placed Already controlled link No connection 0 security devices placed Server overload 49 security devices placed No connection Network redundancy Wrong link
__label__Data-Structures __label__Advanced-Data-Structures You are given a tree with N nodes and each has a value associated with it. You are given Q queries, each of which is either an update or a retrieval operation.  Initially all node values are zero.   The update query is of the format a1 d1 a2 d2 A B  This means you'd have to add  in all nodes in the path from A to B where  is the distance between the node and A. The retrieval query is of the format i j  You need to return the sum of the node values lying in the path from node i to node j modulo 1000000007.  Note:    First all update queries are given and then all retrieval queries.   Distance between 2 nodes is the shortest path length between them taking each edge weight as 1.   Input Format  The first line contains two integers (N and R respectively) separated by a space.   In the next N-1 lines, the ith line describes the ith edge: a line with two integers x y separated by a single space denotes an edge between nodes x and y.   The next line contains 2 space separated integers (U and Q respectively) representing the number of Update and Query operations to follow.   U lines follow. Each of the next U lines contains 6 space separated integers (a1,d1,a2,d2,A and B respectively). Each of the next Q lines contains 2 space separated integers, i and j respectively.  Output Format  It contains exactly Q lines and each line containing the answer of the ith query. Constraints 2 <= N <= 105  2 <= R <= 109  1 <= U <= 105  1 <= Q <= 105  1 <= a1,a2,d1,d2 <= 108  1 <= x, y, i, j, A, B  <= N   Note  For the update operation, x can be equal to y and for the query operation, i can be equal to j.   Sample Input  7 2 1 2 1 3 2 4 2 6 4 5 6 7 1 4 1 1 1 1 4 6 4 5 2 7 4 7 5 3  Sample Output 1 44 45 9  Explanation The node values after updation becomes :   0 8 0 1 0 36 0  Answer to Query #1: 1+0 = 1    Answer to Query #2: 8+36+0 = 44 Answer to Query #3: 1+8+36+0 = 45 Answer to Query #4: 0+1+8+0+0 = 9
__label__Data-Structures __label__Advanced-Data-Structures Consider a permutation, , of integers from  to . Let's determine the  of  to be the minimum absolute difference between any  consecutive integers in :    Generate a lexicographically sorted list of all permutations of length  having a maximal distance between all permutations of the same length. Print the lexicographically  permutation. Input Format The first line contains an integer,  (the number of test cases). The  subsequent lines each contain two space-separated integers,  (the permutation length) and  (the 1-based index in the list of permutations having a maximal distance), respectively. The  line corresponds to the  test case.  Note: It is guaranteed that the sum of all  does not exceed . Constraints    Output Format For each test case: if the list of permutations having maximal distance has at least  elements, print the  permutation as sequential (i.e.: from  to ) space-separated integers on a new line; otherwise, print . Sample Input 3 3 5 4 2 4 3  Sample Output 3 1 2 3 1 4 2 -1  Explanation For  and :              Each of the  permutations has distance . We choose the fifth one (because ), and print 3 1 2 on a new line. 3 1 2 For  and :  The maximal distance in the list of permutations of integers from  to  is , and the only permutations having that distance are  and . We choose the second one (because ), and print 3 1 4 2 on a new line. 3 1 4 2
__label__Data-Structures The LRT Company has  employees. Each employee has a unique ID number from  to , where the director's ID is number . Every employee in the company has exactly one immediate supervisor — except the director, who has no supervisor. The company's employee hierarchy forms a tree of employee IDs that's rooted at employee number  (the director). The director decides to have a retreat lasting  days. Each day, the employees will be assigned to different groups for team building exercises. Groups are constructed in the following way: An employee can invite their immediate supervisor (the director has no supervisor and, thus, doesn't invite anyone). If employee  is invited by employee , then  and  are considered to be in the same group. Once an employee is invited to be in a group, they are in that group. This means that if two employees have the same immediate supervisor, only one of them can invite that supervisor to be in their group.   Every employee must be in a group, even if they are the only employee in it. The venue where LRT is hosting the retreat has different pricing for each of the  days of the retreat. For each day , there is a cost of  dollars per group and a per-group size limit of  (i.e., the maximum number of people that can be in any group on that day). Help the director find optimal groupings for each day so the cost of the -day retreat is minimal, then print the total cost of the retreat. As this answer can be quite large, your answer must be modulo . Input Format The first line contains two space-separated integers denoting the respective values of  (the number of employees) and  (the retreat's duration in days).  The next line contains  space-separated integers where each integer  denotes  (), which is the ID number of employee 's direct supervisor.  Each line  of the  subsequent lines contain two space-separated integers describing the respective values of  (the cost per group in dollars) and  (the maximum number of people per group) for the  day of the retreat. Constraints    Subtask   for  of the maximum possible score. Output Format Print a single integer denoting the minimum total cost for the -day retreat. As this number can be quite large, print your answer modulo . Sample Input 7 3 1 1 3 4 2 4 5 3 6 2 1 1  Sample Output 46  Explanation In the Sample Case above, the company has  employees and the retreat goes on for  days. The hierarchy looks like this:   On the first day, the cost per group is  dollars and each group has a maximum size of . The employees split into the following three groups: Employee  invites their manager, employee . Employee  then invites their manager, employee  (the director). Employee  invites their manager, employee . Employee  then invites their manager, employee . Employee 's manager is already in another group, so they are in a group by themself. These groupings are demonstrated in the following image where each group has a different pattern:  In other words, the final groups are , , and . This means the total cost for the first day is  dollars. On the second day, they split into  groups with a maximum size of  at a total cost of  dollars. On the third day, they split into  groups of size  at a total cost of  dollars. When we sum the costs for all three days, we get  as our answer.
__label__Data-Structures __label__Advanced-Data-Structures Alice purchased an array of  wooden boxes that she indexed from  to . On each box , she writes an integer that we'll refer to as . Alice wants you to perform  operations on the array of boxes. Each operation is in one of the following forms: (Note: For each type of operations, ) 1 l r c: Add  to each . Note that  can be negative. 1 l r c 2 l r d: Replace each  with .  2 l r d 3 l r: Print the minimum value of any . 3 l r 4 l r: Print the sum of all . 4 l r Recall that  is the maximum integer  such that  (e.g.,  and ). Given , the value of each , and  operations, can you perform all the operations efficiently?  Input Format The first line contains two space-separated integers denoting the respective values of  (the number of boxes) and  (the number of operations).  The second line contains  space-separated integers describing the respective values of  (i.e., the integers written on each box).  Each of the  subsequent lines describes an operation in one of the four formats defined above. Constraints      Output Format For each operation of type  or type , print the answer on a new line. Sample Input 0 Sample Output 0 Explanation 0 Initially, the array of boxes looks like this:  We perform the following sequence of operations on the array of boxes: The first operation is 1 0 4 1, so we add  to each  where :   The first operation is 1 0 4 1, so we add  to each  where :   1 0 4 1 The second operation is 1 5 9 1, so we add  to each  where :   The second operation is 1 5 9 1, so we add  to each  where :   1 5 9 1 The third operation is 2 0 9 3, so we divide each  where  by  and take the floor:   2 0 9 3 The fourth operation is 3 0 9, so we print the minimum value of  for , which is the result of . 3 0 9 The fifth operation is 4 0 9, so we print the sum of  for , which is the result of . 4 0 9 ... and so on.
__label__Data-Structures Transforming data into some other data is typical of a programming job. This problem is about a particular kind of transformation which we'll call the max transform. Let  be a zero-indexed array of integers. For , let  denote the subarray of  from index  to index , inclusive. Let's define the max transform of  as the array obtained by the following procedure: Let  be a list, initially empty. For  from  to : For  from  to : Let .   Append  to the end of .   For  from  to : Let .   Append  to the end of .   Let .   Append  to the end of .   Return .   The returned array is defined as the max transform of . We denote it by .  Complete the function solve that takes an integer array  as input. solve Given an array , find the sum of the elements of , i.e., the max transform of the max transform of . Since the answer may be very large, only find it modulo .   Input Format The first line of input contains a single integer  denoting the length of .   The second line contains  space-separated integers  denoting the elements of .   Constraints     Subtasks  For  of the total score,   Output Format Print a single line containing a single integer denoting the answer.   Sample Input 0 Sample Output 0 Explanation 0 In the sample case, we have:   Therefore, the sum of the elements of  is .
