__label__Strings __label__Greedy-Algorithms In this challenge, you will be given a string.  You must remove characters until the string is made up of any two alternating characters.  When you choose a character to remove, all instances of that character must be removed.  Your goal is to create the longest string possible that contains just two alternating letters. As an example, consider the string abaacdabd.  If you delete the character a, you will be left with the string bcdbd.  Now, removing the character c leaves you with a valid string bdbd having a length of 4. Removing either b or d at any point would not result in a valid string. abaacdabd a bcdbd c bdbd b d Given a string , convert it to the longest possible string  made up only of alternating characters.  Print the length of string  on a new line.  If no string  can be formed, print  instead. Function Description Complete the alternate function in the editor below.  It should return an integer that denotes the longest string that can be formed, or  if it cannot be done.   alternate has the following parameter(s):   s: a string   Input Format The first line contains a single integer denoting the length of .  The second line contains string . Constraints    Output Format Print a single integer denoting the maximum length of  for the given ; if it is not possible to form string , print  instead. Sample Input 10 beabeefeab  Sample Output 5  Explanation The characters present in  are a, b, e, and f. This means that  must consist of two of those characters and we must delete two others.  Our choices for characters to leave are [a,b], [a,e], [a, f], [b, e], [b, f] and [e, f]. a b e f If we delete e and f, the resulting string is babab. This is a valid  as there are only two distinct characters (a and b), and they are alternating within the string. e f babab a b If we delete a and f, the resulting string is bebeeeb. This is not a valid string  because there are consecutive e's present.  Removing them would leave consecutive b's, so this fails to produce a valid string . a f bebeeeb e b's Other cases are solved similarly. babab is the longest string we can create. babab
__label__Two-Pointers Given an integer array A, and an integer target, return the number of tuples i, j, k  such that i < j < k and A[i] + A[j] + A[k] == target. As the answer can be very large, return it modulo 10^9 + 7.   Example 1: Input: A = [1,1,2,2,3,3,4,4,5,5], target = 8 Output: 20 Explanation:  Enumerating by the values (A[i], A[j], A[k]): (1, 2, 5) occurs 8 times; (1, 3, 4) occurs 8 times; (2, 2, 4) occurs 2 times; (2, 3, 3) occurs 2 times.   Example 2: Input: A = [1,1,2,2,2,2], target = 5 Output: 12 Explanation:  A[i] = 1, A[j] = A[k] = 2 occurs 12 times: We choose one 1 from [1,1] in 2 ways, and two 2s from [2,2,2,2] in 6 ways.     Note:  3 <= A.length <= 3000 0 <= A[i] <= 100 0 <= target <= 300
__label__Mathematics __label__Game-Theory Alice and Bob play the following game: They choose a permutation of the numbers  to .   Alice plays first and they alternate.   In a turn, they can remove any one remaining number from the permutation.   The game ends when the remaining numbers form an increasing sequence of  or more numbers. The person who played the last turn (after which the sequence becomes increasing) wins the game.   Assuming both play optimally, who wins the game?   For example, if  the starting permutation might be .  First, Alice chooses  or  (use  for the example) leaving .  Since this is a decreasing sequence, Bob can remove any number for optimum play (he will lose regardless).  Alice then removes any number leaving an array of only one element.  Since Alice removed the last element to create an increasing sequence, Alice wins.  Function Description  Complete the permutationGame function in the editor below.  It should return a string that represents the winner of the game, either Bob or Alice.   Bob Alice permutationGame has the following parameter:  - arr: an array of integers that represents the starting permutation   Input Format The first line contains the number of test cases .   Each of the next  pairs of lines is in the following format:  - The first line contains an integer , the size of the array   - The second line contains  space-separated integers,  where   Constraints    The permutation will not be an increasing sequence initially. Output Format Output  lines, one for each test case, containing Alice if Alice wins the game and Bob otherwise.   Alice Bob Sample Input 2 3 1 3 2 5 5 3 2 1 4  Sample Output Alice Bob  Explanation For the first test, Alice can remove the  or the  to make the sequence increasing and wins the game.     For the second test, if  is removed then the only way to have an increasing sequence is to only have  number left.  This would take a total of  moves, thus allowing Bob to win. On the first move if Alice removes the , it will take  more moves to create an increasing sequence thus Bob wins. If Alice does not remove the , then Bob can remove it on his next turn to create the same game state to win (decreasing sequence,  numbers left).
__label__Mathematics Normally, the factorial of a positive integer n is the product of all positive integers less than or equal to n.  For example, factorial(10) = 10 * 9 * 8 * 7 * 6 * 5 * 4 * 3 * 2 * 1. We instead make a clumsy factorial: using the integers in decreasing order, we swap out the multiply operations for a fixed rotation of operations: multiply (*), divide (/), add (+) and subtract (-) in this order. For example, clumsy(10) = 10 * 9 / 8 + 7 - 6 * 5 / 4 + 3 - 2 * 1.  However, these operations are still applied using the usual order of operations of arithmetic: we do all multiplication and division steps before any addition or subtraction steps, and multiplication and division steps are processed left to right. Additionally, the division that we use is floor division such that 10 * 9 / 8 equals 11.  This guarantees the result is an integer. Implement the clumsy function as defined above: given an integer N, it returns the clumsy factorial of N.   Example 1: Input: 4 Output: 7 Explanation: 7 = 4 * 3 / 2 + 1  Example 2: Input: 10 Output: 12 Explanation: 12 = 10 * 9 / 8 + 7 - 6 * 5 / 4 + 3 - 2 * 1    Note:  1 <= N <= 10000 -2^31 <= answer <= 2^31 - 1  (The answer is guaranteed to fit within a 32-bit integer.)
__label__Mathematics An integer  is a divisor of an integer  if the remainder of .   Given an integer, for each digit that makes up the integer determine whether it is a divisor.  Count the number of divisors occurring within the integer.   Note: Each digit is considered to be unique, so each occurrence of the same digit should be counted (e.g. for ,  is a divisor of  each time it occurs so the answer is ). Function Description Complete the findDigits function in the editor below.  It should return an integer representing the number of digits of  that are divisors of .   findDigits has the following parameter(s): n: an integer to analyze Input Format The first line is an integer, , indicating the number of test cases.  The  subsequent lines each contain an integer, .   Constraints    Output Format For every test case, count the number of digits in  that are divisors of .  Print each answer on a new line. Sample Input 2 12 1012  Sample Output 2 3  Explanation The number  is broken into two digits,  and . When  is divided by either of those two digits, the remainder is  so they are both divisors. The number  is broken into four digits, , , , and .  is evenly divisible by its digits , , and , but it is not divisible by  as division by zero is undefined.
__label__Tree Given an integer array with no duplicates. A maximum tree building on this array is defined as follow:  The root is the maximum number in the array.  The left subtree is the maximum tree constructed from left part subarray divided by the maximum number. The right subtree is the maximum tree constructed from right part subarray divided by the maximum number.    Construct the maximum tree by the given array and output the root node of this tree.  Example 1: Input: [3,2,1,6,0,5] Output: return the tree root node representing the following tree:        6     /   \    3     5     \    /       2  0           \         1   Note:  The size of the given array will be in the range [1,1000].
__label__Dynamic-Programming __label__Strings We define a function, , on a string, , as follows:   where:  denotes the number of characters in string .  denotes the number of distinct characters in string . Consuela loves creating string challenges and she needs your help testing her newest one! Given a string, , consisting of  lowercase letters, compute the summation of function  (provided above) over all possible distinct substrings of . As the result is quite large, print it modulo . Input Format The first line contains a single integer, , denoting the number of test cases.  Each of the  subsequent lines contains a string, . Constraints     The sum of  over all test cases does not exceed . Scoring  for  of test data.  for  of test data.    for  of test data. Output Format For each test case, print the answer modulo . Sample Input 3 aa aba abc  Sample Output 3 19 38  Explanation Test 0:  and  are the only distinct substrings.     Test 1: , , , , and  are the only distinct substrings.
__label__Data-Structures This challenge is part of a tutorial track by MyCodeSchool and is accompanied by a video lesson. You’re given the pointer to the head node of a linked list and the position of a node to delete. Delete the node at the given position and return the head node. A position of 0 indicates head, a position of 1 indicates one node away from the head and so on. The list may become empty after you delete the node. Input Format You have to complete the deleteNode(SinglyLinkedListNode* llist, int position) method which takes two arguments - the head of the linked list and the position of the node to delete. You should NOT read any input from stdin/console. position will always be at least 0 and less than the number of the elements in the list. deleteNode(SinglyLinkedListNode* llist, int position) position The first line of input contains an integer , denoting the number of elements in the linked list.  The next  lines contain an integer each in a new line, denoting the elements of the linked list in the order.  The last line contains an integer  denoting the position of the node that has to be deleted form the linked list.   Constraints   , where  is the  element of the linked list. Output Format Delete the node at the given position and return the head of the updated linked list. Do NOT print anything to stdout/console. return The code in the editor will print the updated linked list in a single line separated by spaces. Sample Input 8 20 6 2 19 7 4 15 9 3  Sample Output 20 6 2 7 4 15 9  Explanation The given linked list is 20->6->2->19->7->4->15->9. We have to delete the node at position 3, which is 19. After deleting that node, the updated linked list is: 20->6->2->7->4->15->9 20->6->2->19->7->4->15->9 20->6->2->7->4->15->9
__label__Mathematics Given a non-empty integer array, find the minimum number of moves required to make all array elements equal, where a move is incrementing a selected element by 1 or decrementing a selected element by 1. You may assume the array's length is at most 10,000. Example: Input: [1,2,3]  Output: 2  Explanation: Only two moves are needed (remember each move increments or decrements one element):  [1,2,3]  =>  [2,2,3]  =>  [2,2,2]
__label__Dynamic-Programming We have a sequence of books: the i-th book has thickness books[i][0] and height books[i][1]. We want to place these books in order onto bookcase shelves that have total width shelf_width. We choose some of the books to place on this shelf (such that the sum of their thickness is <= shelf_width), then build another level of shelf of the bookcase so that the total height of the bookcase has increased by the maximum height of the books we just put down.  We repeat this process until there are no more books to place. Note again that at each step of the above process, the order of the books we place is the same order as the given sequence of books.  For example, if we have an ordered list of 5 books, we might place the first and second book onto the first shelf, the third book on the second shelf, and the fourth and fifth book on the last shelf. Return the minimum possible height that the total bookshelf can be after placing shelves in this manner.   Example 1:  Input: books = [[1,1],[2,3],[2,3],[1,1],[1,1],[1,1],[1,2]], shelf_width = 4 Output: 6 Explanation: The sum of the heights of the 3 shelves are 1 + 3 + 2 = 6. Notice that book number 2 does not have to be on the first shelf.    Constraints:  1 <= books.length <= 1000 1 <= books[i][0] <= shelf_width <= 1000 1 <= books[i][1] <= 1000
__label__Tree __label__Depth-first-Search Given a binary tree with N nodes, each node has a different value from {1, ..., N}. A node in this binary tree can be flipped by swapping the left child and the right child of that node. Consider the sequence of N values reported by a preorder traversal starting from the root.  Call such a sequence of N values the voyage of the tree. (Recall that a preorder traversal of a node means we report the current node's value, then preorder-traverse the left child, then preorder-traverse the right child.) Our goal is to flip the least number of nodes in the tree so that the voyage of the tree matches the voyage we are given. If we can do so, then return a list of the values of all nodes flipped.  You may return the answer in any order. If we cannot do so, then return the list [-1].    Example 1:  Input: root = [1,2], voyage = [2,1] Output: [-1]   Example 2:  Input: root = [1,2,3], voyage = [1,3,2] Output: [1]   Example 3:  Input: root = [1,2,3], voyage = [1,2,3] Output: []    Note:  1 <= N <= 100
__label__Strings You are given a string expression representing a Lisp-like expression to return the integer value of.  The syntax for these expressions is given as follows.  An expression is either an integer, a let-expression, an add-expression, a mult-expression, or an assigned variable.  Expressions always evaluate to a single integer.  (An integer could be positive or negative.)  A let-expression takes the form (let v1 e1 v2 e2 ... vn en expr), where let is always the string "let", then there are 1 or more pairs of alternating variables and expressions, meaning that the first variable v1 is assigned the value of the expression e1, the second variable v2 is assigned the value of the expression e2, and so on sequentially; and then the value of this let-expression is the value of the expression expr.  An add-expression takes the form (add e1 e2) where add is always the string "add", there are always two expressions e1, e2, and this expression evaluates to the addition of the evaluation of e1 and the evaluation of e2.  A mult-expression takes the form (mult e1 e2) where mult is always the string "mult", there are always two expressions e1, e2, and this expression evaluates to the multiplication of the evaluation of e1 and the evaluation of e2.  For the purposes of this question, we will use a smaller subset of variable names.  A variable starts with a lowercase letter, then zero or more lowercase letters or digits.  Additionally for your convenience, the names "add", "let", or "mult" are protected and will never be used as variable names.  Finally, there is the concept of scope.  When an expression of a variable name is evaluated, within the context of that evaluation, the innermost scope (in terms of parentheses) is checked first for the value of that variable, and then outer scopes are checked sequentially.  It is guaranteed that every expression is legal.  Please see the examples for more details on scope.  Evaluation Examples: Input: (add 1 2) Output: 3  Input: (mult 3 (add 2 3)) Output: 15  Input: (let x 2 (mult x 5)) Output: 10  Input: (let x 2 (mult x (let x 3 y 4 (add x y)))) Output: 14 Explanation: In the expression (add x y), when checking for the value of the variable x, we check from the innermost scope to the outermost in the context of the variable we are trying to evaluate. Since x = 3 is found first, the value of x is 3.  Input: (let x 3 x 2 x) Output: 2 Explanation: Assignment in let statements is processed sequentially.  Input: (let x 1 y 2 x (add x y) (add x y)) Output: 5 Explanation: The first (add x y) evaluates as 3, and is assigned to x. The second (add x y) evaluates as 3+2 = 5.  Input: (let x 2 (add (let x 3 (let x 4 x)) x)) Output: 6 Explanation: Even though (let x 4 x) has a deeper scope, it is outside the context of the final x in the add-expression.  That final x will equal 2.  Input: (let a1 3 b2 (add a1 1) b2)  Output 4 Explanation: Variable names can contain digits after the first character.   Note: The given string expression is well formatted: There are no leading or trailing spaces, there is only a single space separating different components of the string, and no space between adjacent parentheses.  The expression is guaranteed to be legal and evaluate to an integer. The length of expression is at most 2000.  (It is also non-empty, as that would not be a legal expression.) The answer and all intermediate calculations of that answer are guaranteed to fit in a 32-bit integer.
__label__Array __label__Dynamic-Programming Given an integer array nums, find the contiguous subarray (containing at least one number) which has the largest sum and return its sum. Example: Input: [-2,1,-3,4,-1,2,1,-5,4], Output: 6 Explanation: [4,-1,2,1] has the largest sum = 6.  Follow up: If you have figured out the O(n) solution, try coding another solution using the divide and conquer approach, which is more subtle.
__label__Mathematics __label__Binary-Search Write a program to find the n-th ugly number. Ugly numbers are positive integers which are divisible by a or b or c.   Example 1: Input: n = 3, a = 2, b = 3, c = 5 Output: 4 Explanation: The ugly numbers are 2, 3, 4, 5, 6, 8, 9, 10... The 3rd is 4. Example 2: Input: n = 4, a = 2, b = 3, c = 4 Output: 6 Explanation: The ugly numbers are 2, 3, 4, 6, 8, 9, 10, 12... The 4th is 6.  Example 3: Input: n = 5, a = 2, b = 11, c = 13 Output: 10 Explanation: The ugly numbers are 2, 4, 6, 8, 10, 11, 12, 13... The 5th is 10.  Example 4: Input: n = 1000000000, a = 2, b = 217983653, c = 336916467 Output: 1999999984    Constraints:  1 <= n, a, b, c <= 10^9 1 <= a * b * c <= 10^18 It's guaranteed that the result will be in range [1, 2 * 10^9]
__label__Dynamic-Programming __label__Depth-first-Search Given several boxes with different colors represented by different positive numbers.  You may experience several rounds to remove boxes until there is no box left. Each time you can choose some continuous boxes with the same color (composed of k boxes, k >= 1), remove them and get k*k points. Find the maximum points you can get.  Example 1: Input:  [1, 3, 2, 2, 2, 3, 4, 3, 1]  Output: 23  Explanation:  [1, 3, 2, 2, 2, 3, 4, 3, 1]  ----> [1, 3, 3, 4, 3, 1] (3*3=9 points)  ----> [1, 3, 3, 3, 1] (1*1=1 points)  ----> [1, 1] (3*3=9 points)  ----> [] (2*2=4 points)   Note: The number of boxes n would not exceed 100.
__label__Mathematics __label__Binary-Search For an integer n, we call k>=2 a good base of n, if all digits of n base k are 1. Now given a string representing n, you should return the smallest good base of n in string format. Example 1: Input: "13" Output: "3" Explanation: 13 base 3 is 111.    Example 2: Input: "4681" Output: "8" Explanation: 4681 base 8 is 11111.    Example 3: Input: "1000000000000000000" Output: "999999999999999999" Explanation: 1000000000000000000 base 999999999999999999 is 11.    Note:  The range of n is [3, 10^18]. The string representing n is always valid and will not have leading zeros.
__label__Hash-Table Given n points in the plane that are all pairwise distinct, a "boomerang" is a tuple of points (i, j, k) such that the distance between i and j equals the distance between i and k (the order of the tuple matters). Find the number of boomerangs. You may assume that n will be at most 500 and coordinates of points are all in the range [-10000, 10000] (inclusive). Example: Input: [[0,0],[1,0],[2,0]]  Output: 2  Explanation: The two boomerangs are [[1,0],[0,0],[2,0]] and [[1,0],[2,0],[0,0]]
__label__Dynamic-Programming Divide-and-Conquer on a tree is a powerful approach to solving tree problems.  Imagine a tree, , with  vertices. Let's remove some vertex  from tree , splitting  into zero or more connected components, , with vertices . We can prove that there is a vertex, , such that the size of each formed components is at most . The Divide-and-Conquer approach can be described as follows: Initially, there is a tree, , with  vertices. Find vertex  such that, if  is removed from the tree, the size of each formed component after removing  is at most . Remove  from tree . Perform this approach recursively for each of the connected components. We can prove that if we find such a vertex  in linear time (e.g., using DFS), the entire approach works in . Of course, sometimes there are several such vertices  that we can choose on some step, we can take and remove any of them. However, right now we are interested in trees such that at each step there is a unique vertex  that we can choose. Given , count the number of tree 's such that the Divide-and-Conquer approach works determinately on them. As this number can be quite large, your answer must be modulo . Input Format A single line of two space-separated positive integers describing the respective values of  (the number of vertices in tree ) and  (the modulo value). Constraints    is a prime number. Subtasks  for  of the maximum score.  for  of the maximum score.  Output Format Print a single integer denoting the number of tree 's such that vertex  is unique at each step when applying the Divide-and-Conquer approach, modulo . Sample Input 0 1 103  Sample Output 0  1  Explanation 0 For , there is only one way to build a tree so we print the value of  as our answer. Sample Input 1 2 103  Sample Output 1 0  Explanation 1 For , there is only one way to build a tree:  This tree is not valid because we can choose to remove either node  or node  in the first step. Thus, we print  as no valid tree exists. Sample Input 2 3 103  Sample Output 2 3   Explanation 2 For , there are  valid trees depicted in the diagram below (the unique vertex removed in the first step is shown in red):  Thus, we print the value of  as our answer. Sample Input 3 4 103  Sample Output 3 4  Explanation 3 For , there are  valid trees depicted in the diagram below (the unique vertex removed in the first step is shown in red):  The figure below shows an invalid tree with :  This tree is not valid because we can choose to remove node  or node  in the first step. Because we had four valid trees, we print the value of  as our answer.
__label__Dynamic-Programming Given a string s, find the longest palindromic subsequence's length in s. You may assume that the maximum length of s is 1000.  Example 1: Input:  "bbbab"  Output:  4  One possible longest palindromic subsequence is "bbbb".  Example 2: Input: "cbbd"  Output: 2  One possible longest palindromic subsequence is "bb".
__label__Array You are given an n x n 2D matrix representing an image. Rotate the image by 90 degrees (clockwise). Note: You have to rotate the image in-place, which means you have to modify the input 2D matrix directly. DO NOT allocate another 2D matrix and do the rotation. Example 1: Given input matrix =  [   [1,2,3],   [4,5,6],   [7,8,9] ],  rotate the input matrix in-place such that it becomes: [   [7,4,1],   [8,5,2],   [9,6,3] ]  Example 2: Given input matrix = [   [ 5, 1, 9,11],   [ 2, 4, 8,10],   [13, 3, 6, 7],   [15,14,12,16] ],   rotate the input matrix in-place such that it becomes: [   [15,13, 2, 5],   [14, 3, 4, 1],   [12, 6, 8, 9],   [16, 7,10,11] ]
__label__Strings Count the number of segments in a string, where a segment is defined to be a contiguous sequence of non-space characters. Please note that the string does not contain any non-printable characters. Example: Input: "Hello, my name is John" Output: 5
__label__Hash-Table Given a string which consists of lowercase or uppercase letters, find the length of the longest palindromes that can be built with those letters. This is case sensitive, for example "Aa" is not considered a palindrome here. Note: Assume the length of given string will not exceed 1,010.  Example:  Input: "abccccdd"  Output: 7  Explanation: One longest palindrome that can be built is "dccaccd", whose length is 7.
__label__Strings Roy wanted to increase his typing speed for programming contests.  His friend suggested that he type the sentence "The quick brown fox jumps over the lazy dog" repeatedly.  This sentence is known as a pangram because it contains every letter of the alphabet. After typing the sentence several times, Roy became bored with it so he started to look for other pangrams. Given a sentence, determine whether it is a pangram.  Ignore case. Function Description Complete the function pangrams in the editor below.  It should return the string pangram if the input string is a pangram.  Otherwise, it should return not pangram.   pangram not pangram pangrams has the following parameter(s): s: a string to test Input Format Input consists of a string .  Constraints   Each character of ,  Output Format Output a line containing pangram if  is a pangram, otherwise output not pangram.   Sample Input 0  pangram not pangram We promptly judged antique ivory buckles for the next prize We promptly judged antique ivory buckles for the next prize Sample Output 0 pangram pangram Sample Explanation 0 All of the letters of the alphabet are present in the string.   Sample Input 1  We promptly judged antique ivory buckles for the prize We promptly judged antique ivory buckles for the prize Sample Output 1 not pangram not pangram Sample Explanation 0 The string lacks an x.   x
__label__Dynamic-Programming In Chile, land are partitioned into a one large grid, where each element represents a land of size 1x1.   Shaka is a newcomer in Chile and is trying to start his own business. He is planning to build a store. He has his own ideas for the "perfect store" which can be represented by a HxW grid. Element at position (i, j) represents height of land at index (i, j) in the grid.   Shaka has purchased a land area which can be represented RxC grid (H <= R, W <= C). Shaka is interested in finding best HxW sub-grid in the acquired land. In order to compare the possible sub-grids, Shaka will be using the sum of squared difference between each cell of his "perfect store" and  it's corresponding cell in the subgrid. Amongst all possible sub-grids, he will choose the one with smallest such sum. Note The grids are 1-indexed and rows increase from top to bottom and columns increase from left to right.  If x is the height of a cell in the "perfect store" and y is the height of the corresponding cell in a sub-grid of the acquired land, then the squared difference is defined as (x-y)2  Input Format The first line of the input consists of two integers, R C, separated by single space.  Then R lines follow, each one containing C space separated integers, which describe the height of each land spot of the purchased land.  The next line contains two integers, H W, separated by a single space, followed by H lines with W space separated integers, which describes the "perfect store".   Constraints 1 <= R, C <= 500  1 <= H <= R  1 <= W <= C  No height will have an absolute value greater than 20.   Output Format In the first line, output the smallest possible sum (as defined above) Shaka can find on exploring all the sub-grids (of size HxW)  in the purchased land.  In second line, output two space separated integers, i j, which represents the index of top left corner of sub-grid (on the acquired land) with the minimal such sum. If there are multiple sub-grids with minimal sum, output the one with the smaller row index. If there are still multiple sub-grids with minimal sum, output the one with smaller column index.  Sample Input 3 3 19 19 -12 5 8 -14 -12 -11 9 2 2 -18 -12 -10 -7  Sample Output 937 2 2  Explanation The result is computed as follows: (8 - (-18)) 2 +  (-14 - (-12)) 2 + (-11 - (-10)) 2 + (9 - (-7)) 2 = 937
__label__Strings Sami's spaceship crashed on Mars! She sends a series of SOS messages to Earth for help.  SOS  Letters in some of the SOS messages are altered by cosmic radiation during transmission. Given the signal received by Earth as a string, , determine how many letters of Sami's SOS have been changed by radiation. SOS SOS For example, Earth receives SOSTOT.  Sami's original message was SOSSOS.  Two of the message characters were changed in transit.   SOSTOT SOSSOS Function Description Complete the marsExploration function in the editor below.  It should return an integer representing the number of letters changed during transmission.   marsExploration has the following parameter(s): s: the string as received on Earth   Input Format There is one line of input: a single string, .  Note: As the original message is just SOS repeated  times, 's length will be a multiple of . SOS Constraints    will contain only uppercase English letters, ascii[A-Z]. Output Format Print the number of letters in Sami's message that were altered by cosmic radiation. Sample Input 0 Sample Output 0 Explanation 0  = SOSSPSSQSSOR, and signal length . Sami sent  SOS messages (i.e.: ). SOS We print the number of changed letters. Sample Input 1 Sample Output 1 Explanation 1  = SOSSOT, and signal length . Sami sent  SOS messages (i.e.: ). SOS We print the number of changed letters, which is . Sample Input 2 Sample Output 2 Explanation 2 Since no character is altered, we print 0.
__label__Strings There is a robot starting at position (0, 0), the origin, on a 2D plane. Given a sequence of its moves, judge if this robot ends up at (0, 0) after it completes its moves. The move sequence is represented by a string, and the character moves[i] represents its ith move. Valid moves are R (right), L (left), U (up), and D (down). If the robot returns to the origin after it finishes all of its moves, return true. Otherwise, return false. Note: The way that the robot is "facing" is irrelevant. "R" will always make the robot move to the right once, "L" will always make it move left, etc. Also, assume that the magnitude of the robot's movement is the same for each move. Example 1: Input: "UD" Output: true  Explanation: The robot moves up once, and then down once. All moves have the same magnitude, so it ended up at the origin where it started. Therefore, we return true.    Example 2: Input: "LL" Output: false Explanation: The robot moves left twice. It ends up two "moves" to the left of the origin. We return false because it is not at the origin at the end of its moves.
__label__Strings Given a string containing digits from 2-9 inclusive, return all possible letter combinations that the number could represent. A mapping of digit to letters (just like on the telephone buttons) is given below. Note that 1 does not map to any letters.  Example: Input: "23" Output: ["ad", "ae", "af", "bd", "be", "bf", "cd", "ce", "cf"].  Note: Although the above answer is in lexicographical order, your answer could be in any order you want.
__label__Array __label__Mathematics There are n flights, and they are labeled from 1 to n. We have a list of flight bookings.  The i-th booking bookings[i] = [i, j, k] means that we booked k seats from flights labeled i to j inclusive. Return an array answer of length n, representing the number of seats booked on each flight in order of their label.   Example 1: Input: bookings = [[1,2,10],[2,3,20],[2,5,25]], n = 5 Output: [10,55,45,25,25]    Constraints:  1 <= bookings.length <= 20000 1 <= bookings[i][0] <= bookings[i][1] <= n <= 20000 1 <= bookings[i][2] <= 10000
__label__Strings This challenge uses the famous KMP algorithm. It isn't really important to understand how KMP works, but you should understand what it calculates. A KMP algorithm takes a string, , of length  as input. Let's assume that the characters in  are indexed from  to ; for every prefix of , the algorithm calculates the length of its longest valid border in linear complexity. In other words, for every  (where ) it calculates the largest  (where ) such that for every  (where ) there is . Here is an implementation example of KMP: Given a sequence , construct a string, , that meets the following conditions: The frequency of letter '' in  is exactly , the frequency of letter '' in  is exactly , and so on. Let's assume characters of  are numbered from  to , where . We apply the KMP algorithm to  and get a table, , of size . You must ensure that the sum of  for all  is minimal. If there are multiple strings which fulfill the above conditions, print the lexicographically smallest one. Input Format A single line containing  space-separated integers describing sequence .  Constraints The sum of all  will be a positive integer . Output Format Print a single string denoting . Sample Input 2 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0  Sample Output aabb  Explanation The output string must have two '' and two ''. There are several such strings but we must ensure that sum of  for all  is minimal. See the figure below:  The minimum sum is . Among all the strings that satisfy both the condition, "aabb" is the lexicographically smallest.
__label__Array Given two arrays arr1 and arr2, the elements of arr2 are distinct, and all elements in arr2 are also in arr1. Sort the elements of arr1 such that the relative ordering of items in arr1 are the same as in arr2.  Elements that don't appear in arr2 should be placed at the end of arr1 in ascending order.   Example 1: Input: arr1 = [2,3,1,3,2,4,6,7,9,2,19], arr2 = [2,1,4,3,9,6] Output: [2,2,2,1,4,3,3,9,6,7,19]    Constraints:  arr1.length, arr2.length <= 1000 0 <= arr1[i], arr2[i] <= 1000 Each arr2[i] is distinct. Each arr2[i] is in arr1.
__label__Graph-Algorithms Airports are being built on a straight road according to a new construction plan. For convenience, imagine a number line on which at different points airports can be positioned. Because a plane can't take off and start landing immediately, there will be flight between two airports in locations  and  if and only if , where  is a constant. Changing the position of an airport from  to  costs . The cost to fix a certain plan is the minimum total cost of changing the positions of airports. After the changes, it should be possible to travel between any pair of airports, possibly taking flights through some intermediate airports. Note that it's possible that two airports have the same initial position, and this can be the case  after changes too. On  day, a plan to build a new airport with position  is announced. On each day that a new airport is announced, print the smallest cost to fix the set of airports announced so far . Note that you should not change the positions of any airports, just calculate the cost to do it.  Input Format Input contains multiple queries.  The first line consists of an integer  which is the number of queries. Each query is given as follows.  The first line of each query contains two integers  and , the number of days, and the minimum distance respectively.  The second line of each test case contains  space-separated integers  denoting the position of the airport that was announced on  day. Constraints    the sum of  over all test cases in a file will not exceed  Output Format Print one line for each query.  A line for a query with  airports should have  numbers on it where the  one should be the minimum cost to fix airports in positions . Sample Input 0 Sample Output 0 Explanation 0 The answer for a single airport is always zero. When we have many airports in the same position, it's enough to move only one of them to satisfy the condition from the statement. Sample Input 1 Sample Output 1 Explanation 1  For each new day that an airport is inserted, the cheapest rearranging of existing airports is shown on the diagram above. Note that cost changes for every day and travelling between airports can be done possibly flying through some intermediate ones. Costs are calculated without changing actual positions of the airports.
__label__Dynamic-Programming Borussia Dortmund are a famous football ( soccer ) club from Germany. Apart from their fast-paced style of playing, the thing that makes them unique is the hard to pronounce names of their players ( błaszczykowski , papastathopoulos , großkreutz etc. ). The team's coach is your friend. He is in a dilemma as he can't decide how to make it easier to call the players by name, during practice sessions. So, you advise him to assign easy names to his players. A name is easy to him if  1. It consists of only one word.  2. It consists of only lowercase english letters.  3. Its length is exactly .  4. It contains exactly  different letters from the  letters of English alphabet.  5. At least one of its proper prefixes matches with its proper suffix of same length. Given,  and  you have to tell him the number of easy names he can choose from modulo . Note : A prefix  of a name  is proper if, . Similarly, a suffix  of a name  is proper if, . Input Format  The first line of the input will contain  ( the number of testcases ). Each of the next  lines will contain  space separated integers  and . Output Format  For each testcase, output the number of ways the coach can assign names to his players modulo . Constraints       Sample Input #1 3 1 1 2 1 4 2  Sample Output #1 0   26  2600    Sample Input #2 5   2 2 5 1 3 2 6 2 1 3  Sample Output #2 0 26 650 13650 0
__label__Greedy-Algorithms Given a string S of '(' and ')' parentheses, we add the minimum number of parentheses ( '(' or ')', and in any positions ) so that the resulting parentheses string is valid. Formally, a parentheses string is valid if and only if:  It is the empty string, or It can be written as AB (A concatenated with B), where A and B are valid strings, or It can be written as (A), where A is a valid string.  Given a parentheses string, return the minimum number of parentheses we must add to make the resulting string valid.   Example 1: Input: "())" Output: 1   Example 2: Input: "(((" Output: 3   Example 3: Input: "()" Output: 0   Example 4: Input: "()))((" Output: 4      Note:  S.length <= 1000 S only consists of '(' and ')' characters.
__label__Data-Structures The median of a set of integers is the midpoint value of the data set for which an equal number of integers are less than and greater than the value. To find the median, you must first sort your set of integers in non-decreasing order, then: If your set contains an odd number of elements, the median is the middle element of the sorted sample. In the sorted set ,  is the median. If your set contains an even number of elements, the median is the average of the two middle elements of the sorted sample. In the sorted set ,  is the median. Given an input stream of  integers, you must perform the following task for each  integer: Add the  integer to a running list of integers. Find the median of the updated list (i.e., for the first element through the  element). Print the list's updated median on a new line. The printed value must be a double-precision number scaled to  decimal place (i.e.,  format). Input Format The first line contains a single integer, , denoting the number of integers in the data stream.  Each line  of the  subsequent lines contains an integer, , to be added to your list. Constraints    Output Format After each new integer is added to the list, print the list's updated median on a new line as a single double-precision number scaled to  decimal place (i.e.,  format). Sample Input 6 12 4 5 3 8 7  Sample Output 12.0 8.0 5.0 4.5 5.0 6.0  Explanation There are  integers, so we must print the new median on a new line as each integer is added to the list:
__label__Bit It's New Year's Day and everyone's in line for the Wonderland rollercoaster ride! There are a number of people queued up, and each person wears a sticker indicating their initial position in the queue.  Initial positions increment by  from  at the front of the line to  at the back. Any person in the queue can bribe the person directly in front of them to swap positions. If two people swap positions, they still wear the same sticker denoting their original places in line. One person can bribe at most two others.  For example, if  and  bribes , the queue will look like this: . Fascinated by this chaotic queue, you decide you must know the minimum number of bribes that took place to get the queue into its current state! Function Description Complete the function minimumBribes in the editor below.  It must print an integer representing the minimum number of bribes necessary, or Too chaotic if the line configuration is not possible.   Too chaotic minimumBribes has the following parameter(s): q: an array of integers   Input Format The first line contains an integer , the number of test cases.    Each of the next  pairs of lines are as follows:  - The first line contains an integer , the number of people in the queue  - The second line has  space-separated integers describing the final state of the queue.   Constraints    Subtasks For  score  For  score  Output Format Print an integer denoting the minimum number of bribes needed to get the queue into its final state.  Print Too chaotic if the state is invalid, i.e. it requires a person to have bribed more than  people. Too chaotic Sample Input 2 5 2 1 5 3 4 5 2 5 1 3 4  Sample Output 3 Too chaotic  Explanation Test Case 1 The initial state:  After person  moves one position ahead by bribing person :  Now person  moves another position ahead by bribing person :  And person  moves one position ahead by bribing person :  So the final state is  after three bribing operations. Test Case 2 No person can bribe more than two people, so its not possible to achieve the input state.
__label__Tree Given a binary tree, write a function to get the maximum width of the given tree. The width of a tree is the maximum width among all levels. The binary tree has the same structure as a full binary tree, but some nodes are null. The width of one level is defined as the length between the end-nodes (the leftmost and right most non-null nodes in the level, where the null nodes between the end-nodes are also counted into the length calculation. Example 1: Input:              1          /   \         3     2        / \     \         5   3     9   Output: 4 Explanation: The maximum width existing in the third level with the length 4 (5,3,null,9).  Example 2: Input:             1          /           3            / \              5   3       Output: 2 Explanation: The maximum width existing in the third level with the length 2 (5,3).  Example 3: Input:             1          / \         3   2         /               5        Output: 2 Explanation: The maximum width existing in the second level with the length 2 (3,2).  Example 4: Input:             1          / \         3   2        /     \         5       9       /         \     6           7 Output: 8 Explanation:The maximum width existing in the fourth level with the length 8 (6,null,null,null,null,null,null,7).    Note: Answer will in the range of 32-bit signed integer.
__label__Bit __label__Data-Structures __label__Advanced-Data-Structures You are given an array, , consisting of  integers. A segment, , is beautiful if and only if the bitwise AND of all numbers in  with indices in the inclusive range of  is not greater than . In other words, segment  is beautiful if . You must answer  queries. Each query, , consists of  integers: , , and . The answer for each  is the number of beautiful segments  such that  and . Input Format The first line contains two space-separated integers,  (the number of integers in ) and  (the number of queries). The second line contains  space-separated integers, where the  integer denotes the  element of array . Each line  of the  subsequent lines contains  space-separated integers, , , and , respectively, describing query . Constraints       holds for test cases worth at least  of the problem's score.  holds for test cases worth at least  of the problem's score.  Output Format Print  lines, where the  line contains the number of beautiful segments for query . Sample Input 5 3 1 2 7 3 4 1 5 3 2 4 6 3 5 2  Sample Output 13 5 2  Explanation The beautiful segments for all queries are listed below. Query 0: The beautiful segments are . Query 1: The beautiful segments are . Query 2: The beautiful segments are .
__label__Dynamic-Programming Christy is interning at HackerRank. One day she has to distribute some chocolates to her colleagues. She is biased towards her friends and plans to give them more than the others. One of the program managers hears of this and tells her to make sure everyone gets the same number. To make things difficult, she must equalize the number of chocolates in a series of operations. For each operation, she can give  chocolates to all but one colleague.  Everyone who gets chocolate in a round receives the same number of pieces.   For example, assume the starting distribution is .  She can give  bars to the first two and the distribution will be .  On the next round, she gives the same two  bars each, and everyone has the same number:  . Given a starting distribution, calculate the minimum number of operations needed so that every colleague has the same number of chocolates.  Function Description  Complete the equal function in the editor below.  It should return an integer that reperesents the minimum number of operations required.   equal has the following parameter(s):   arr: an array of integers to equalize   Input Format The first line contains an integer , the number of test cases.    Each test case has  lines.  - The first line contains an integer , the number of colleagues.  - The second line contains  space-separated integers denoting the number of chocolates each colleague has. Constraints     Number of initial chocolates each colleague has <   Output Format Print the minimum number of operations needed for each test case, one to a line. Sample Input 1 4 2 2 3 7  Sample Output 2  Explanation Start with   Add  to all but the 3rd element   Add  to all but the 4th element   Two operations were required. Sample Input 1 1 3 10 7 12  Sample Output 1 3  Explanation 1 Start with   Add  to the first two elements   Add  to the last two elements   Add  to the last two elements   Three operations were required.
__label__Mathematics Madam Hannah Otto, the CEO of Reviver Corp., is fond of palindromes, or words that read the same forwards or backwards. She thinks palindromic brand names are appealing to millennials.   As part of the marketing campaign for the company's new juicer called the Rotator™, Hannah decided to push the marketing team's palindrome-searching skills to a new level with a new challenge.   In this challenge, Hannah provides a string  consisting of lowercase English letters. Every day, for  days, she would select two integers  and , take the substring  (the substring of  from index  to index ), and ask the following question: Consider all the palindromes that can be constructed from some of the letters from . You can reorder the letters as you need. Some of these palindromes have the maximum length among all these palindromes. How many maximum-length palindromes are there?   For example, if ,  and , then we have,  Your job as the head of the marketing team is to answer all the queries. Since the answers can be very large, you are only required to find the answer modulo .   Complete the functions initialize and answerQuery and return the number of maximum-length palindromes modulo .  initialize answerQuery Input Format The first line contains the string . The second line contains a single integer . The  of the next  lines contains two space-separated integers ,  denoting the  and  values Anna selected on the  day.   Constraints Here,  denotes the length of .      Subtasks For 30% of the total score:    For 60% of the total score:   Output Format For each query, print a single line containing a single integer denoting the answer. Sample Input 0 Sample Output 0 Explanation 0 On the first day,  and . The maximum-length palindromes are "ewe" and "eke". On the second day,  and . The maximum-length palindrome is "ee".  Sample Input 1 Sample Output 1 Explanation 1 Here, the maximum-length palindromes are "abba" and "baab".
__label__Hash-Table Implement a magic directory with buildDict, and search methods.   For the method buildDict, you'll be given a list of non-repetitive words to build a dictionary.   For the method search, you'll be given a word, and judge whether if you modify exactly one character into another character in this word, the modified word is in the dictionary you just built.  Example 1: Input: buildDict(["hello", "leetcode"]), Output: Null Input: search("hello"), Output: False Input: search("hhllo"), Output: True Input: search("hell"), Output: False Input: search("leetcoded"), Output: False   Note:  You may assume that all the inputs are consist of lowercase letters a-z. For contest purpose, the test data is rather small by now. You could think about highly efficient algorithm after the contest. Please remember to RESET your class variables declared in class MagicDictionary, as static/class variables are persisted across multiple test cases. Please see here for more details.
__label__Mathematics You are given an array x of n positive numbers. You start at point (0,0) and moves x[0] metres to the north, then x[1] metres to the west, x[2] metres to the south, x[3] metres to the east and so on. In other words, after each move your direction changes counter-clockwise. Write a one-pass algorithm with O(1) extra space to determine, if your path crosses itself, or not.   Example 1: ┌───┐ │   │ └───┼──>     │  Input: [2,1,1,2] Output: true  Example 2: ┌──────┐ │      │ │ │ └────────────>  Input: [1,2,3,4] Output: false   Example 3: ┌───┐ │   │ └───┼>  Input: [1,1,1,1] Output: true
__label__Hash-Table Given a binary array, find the maximum length of a contiguous subarray with equal number of 0 and 1.  Example 1: Input: [0,1] Output: 2 Explanation: [0, 1] is the longest contiguous subarray with equal number of 0 and 1.   Example 2: Input: [0,1,0] Output: 2 Explanation: [0, 1] (or [1, 0]) is a longest contiguous subarray with equal number of 0 and 1.   Note: The length of the given binary array will not exceed 50,000.
__label__Tree __label__Depth-first-Search The thief has found himself a new place for his thievery again. There is only one entrance to this area, called the "root." Besides the root, each house has one and only one parent house. After a tour, the smart thief realized that "all houses in this place forms a binary tree". It will automatically contact the police if two directly-linked houses were broken into on the same night. Determine the maximum amount of money the thief can rob tonight without alerting the police. Example 1: Input: [3,2,3,null,3,null,1]       3     / \    2   3     \   \       3   1  Output: 7  Explanation: Maximum amount of money the thief can rob = 3 + 3 + 1 = 7. Example 2: Input: [3,4,5,1,3,null,1]       3     / \    4   5   / \   \   1   3   1  Output: 9 Explanation: Maximum amount of money the thief can rob = 4 + 5 = 9.
__label__Strings A sentence S is given, composed of words separated by spaces. Each word consists of lowercase and uppercase letters only. We would like to convert the sentence to "Goat Latin" (a made-up language similar to Pig Latin.) The rules of Goat Latin are as follows:  If a word begins with a vowel (a, e, i, o, or u), append "ma" to the end of the word. 	For example, the word 'apple' becomes 'applema'. 	  If a word begins with a consonant (i.e. not a vowel), remove the first letter and append it to the end, then add "ma". 	For example, the word "goat" becomes "oatgma". 	  Add one letter 'a' to the end of each word per its word index in the sentence, starting with 1. 	For example, the first word gets "a" added to the end, the second word gets "aa" added to the end and so on.  Return the final sentence representing the conversion from S to Goat Latin.    Example 1: Input: "I speak Goat Latin" Output: "Imaa peaksmaaa oatGmaaaa atinLmaaaaa"  Example 2: Input: "The quick brown fox jumped over the lazy dog" Output: "heTmaa uickqmaaa rownbmaaaa oxfmaaaaa umpedjmaaaaaa overmaaaaaaa hetmaaaaaaaa azylmaaaaaaaaa ogdmaaaaaaaaaa"    Notes:  S contains only uppercase, lowercase and spaces. Exactly one space between each word. 1 <= S.length <= 150.
__label__Greedy-Algorithms There are 2N people a company is planning to interview. The cost of flying the i-th person to city A is costs[i][0], and the cost of flying the i-th person to city B is costs[i][1]. Return the minimum cost to fly every person to a city such that exactly N people arrive in each city.   Example 1: Input: [[10,20],[30,200],[400,50],[30,20]] Output: 110 Explanation:  The first person goes to city A for a cost of 10. The second person goes to city A for a cost of 30. The third person goes to city B for a cost of 50. The fourth person goes to city B for a cost of 20.  The total minimum cost is 10 + 30 + 50 + 20 = 110 to have half the people interviewing in each city.    Note:  1 <= costs.length <= 100 It is guaranteed that costs.length is even. 1 <= costs[i][0], costs[i][1] <= 1000
__label__Data-Structures The LRT Company has  employees. Each employee has a unique ID number from  to , where the director's ID is number . Every employee in the company has exactly one immediate supervisor — except the director, who has no supervisor. The company's employee hierarchy forms a tree of employee IDs that's rooted at employee number  (the director). The director decides to have a retreat lasting  days. Each day, the employees will be assigned to different groups for team building exercises. Groups are constructed in the following way: An employee can invite their immediate supervisor (the director has no supervisor and, thus, doesn't invite anyone). If employee  is invited by employee , then  and  are considered to be in the same group. Once an employee is invited to be in a group, they are in that group. This means that if two employees have the same immediate supervisor, only one of them can invite that supervisor to be in their group.   Every employee must be in a group, even if they are the only employee in it. The venue where LRT is hosting the retreat has different pricing for each of the  days of the retreat. For each day , there is a cost of  dollars per group and a per-group size limit of  (i.e., the maximum number of people that can be in any group on that day). Help the director find optimal groupings for each day so the cost of the -day retreat is minimal, then print the total cost of the retreat. As this answer can be quite large, your answer must be modulo . Input Format The first line contains two space-separated integers denoting the respective values of  (the number of employees) and  (the retreat's duration in days).  The next line contains  space-separated integers where each integer  denotes  (), which is the ID number of employee 's direct supervisor.  Each line  of the  subsequent lines contain two space-separated integers describing the respective values of  (the cost per group in dollars) and  (the maximum number of people per group) for the  day of the retreat. Constraints    Subtask   for  of the maximum possible score. Output Format Print a single integer denoting the minimum total cost for the -day retreat. As this number can be quite large, print your answer modulo . Sample Input 7 3 1 1 3 4 2 4 5 3 6 2 1 1  Sample Output 46  Explanation In the Sample Case above, the company has  employees and the retreat goes on for  days. The hierarchy looks like this:   On the first day, the cost per group is  dollars and each group has a maximum size of . The employees split into the following three groups: Employee  invites their manager, employee . Employee  then invites their manager, employee  (the director). Employee  invites their manager, employee . Employee  then invites their manager, employee . Employee 's manager is already in another group, so they are in a group by themself. These groupings are demonstrated in the following image where each group has a different pattern:  In other words, the final groups are , , and . This means the total cost for the first day is  dollars. On the second day, they split into  groups with a maximum size of  at a total cost of  dollars. On the third day, they split into  groups of size  at a total cost of  dollars. When we sum the costs for all three days, we get  as our answer.
__label__Mathematics Find the nth digit of the infinite integer sequence 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, ...  Note: n is positive and will fit within the range of a 32-bit signed integer (n < 231).  Example 1: Input: 3  Output: 3   Example 2: Input: 11  Output: 0  Explanation: The 11th digit of the sequence 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, ... is a 0, which is part of the number 10.
__label__Two-Pointers __label__Strings Write a function that reverses a string. The input string is given as an array of characters char[]. Do not allocate extra space for another array, you must do this by modifying the input array in-place with O(1) extra memory. You may assume all the characters consist of printable ascii characters.    Example 1: Input: ["h","e","l","l","o"] Output: ["o","l","l","e","h"]   Example 2: Input: ["H","a","n","n","a","h"] Output: ["h","a","n","n","a","H"]
__label__Tree We are given the root node of a maximum tree: a tree where every node has a value greater than any other value in its subtree. Just as in the previous problem, the given tree was constructed from an list A (root = Construct(A)) recursively with the following Construct(A) routine:  If A is empty, return null. Otherwise, let A[i] be the largest element of A.  Create a root node with value A[i]. The left child of root will be Construct([A[0], A[1], ..., A[i-1]]) The right child of root will be Construct([A[i+1], A[i+2], ..., A[A.length - 1]]) Return root.  Note that we were not given A directly, only a root node root = Construct(A). Suppose B is a copy of A with the value val appended to it.  It is guaranteed that B has unique values. Return Construct(B).   Example 1:  Input: root = [4,1,3,null,null,2], val = 5 Output: [5,4,null,1,3,null,null,2] Explanation: A = [1,4,2,3], B = [1,4,2,3,5]   Example 2:  Input: root = [5,2,4,null,1], val = 3 Output: [5,2,4,null,1,null,3] Explanation: A = [2,1,5,4], B = [2,1,5,4,3]   Example 3:  Input: root = [5,2,3,null,1], val = 4 Output: [5,2,4,null,1,3] Explanation: A = [2,1,5,3], B = [2,1,5,3,4]      Note:  1 <= B.length <= 100
__label__Mathematics __label__Bit An array, , is defined as follows:    for , where  is the symbol for XOR You will be given a left and right index .  You must determine the XOR sum of the segment of  as .  For example, .  The segment from  to  sums to .  Print the answer to each question. Function Description  Complete the xorSequence function in the editor below.  It should return the integer value calculated.   xorSequence has the following parameter(s):   l: the lower index of the range to sum   r: the higher index of the range to sum   Input Format The first line contains an integer , the number of questions.  Each of the next  lines contains two space-separated integers,  and , the inclusive left and right indexes of the segment to query. Constraints     Output Format On a new line for each test case, print the XOR-Sum of 's elements in the inclusive range between indices  and . Sample Input 0 Sample Output 0 Explanation 0 The beginning of our array looks like this:   Test Case 0:   Test Case 1:   Test Case 2:   Sample Input 1 Sample Output 1 Explanation 1 .  Perform the xor sum on each interval:
__label__Data-Structures __label__Data-Structures Given  strings. Each string contains only lowercase letters from (both inclusive). The set of  strings is said to be GOOD SET if no string is prefix of another string else, it is BAD SET. (If two strings are identical, they are considered prefixes of each other.) For example, aab, abcde, aabcd is BAD SET because aab is prefix of aabcd.   Print GOOD SET if it satisfies the problem requirement.  Else, print BAD SET and the first string for which the condition fails.   Input Format  First line contains , the number of strings in the set.  Then next  lines follow, where  line contains  string.   Constraints     Length of the string   Output Format  Output GOOD SET if the set is valid.  Else, output BAD SET followed by the first string for which the condition fails.   GOOD SET BAD SET Sample Input00  7 aab defgab abcde aabcde cedaaa bbbbbbbbbb jabjjjad  Sample Output00  BAD SET aabcde  Sample Input01 4 aab aac aacghgh aabghgh  Sample Output01  BAD SET aacghgh  Explanation  aab is prefix of aabcde. So set is BAD SET and it fails at string aabcde.
__label__Tree __label__Data-Structures One of the most important skills a programmer needs to learn early on is the ability to pose a problem in an abstract way. This skill is important not just for researchers but also in applied fields like software engineering and web development.   You are able to solve most of a problem, except for one last subproblem, which you have posed in an abstract way as follows: Given an array consisting of  integers , define   For example, for an input array [ 10, -5, 5, 20 ], a subsegment  would be computed as follows:    What is , i.e., the maximum value of  among all subsegments ?   Complete the function maximumValue which takes an integer array as input and returns the maximum value of  among all subsegments . maximumValue Note that:   Input Format The first line contains a single integer  The second line contains  space-separated integers  Constraints     Output Format Print a single integer denoting the answer Sample Input 0 Sample Output 0 Explanation 0 The maximum value occurs at  as shown below.   Sample Input 1 Sample Output 1 Explanation 1 The maximum value occurs at .
__label__Strings __label__Dynamic-Programming Given a string, your task is to count how many palindromic substrings in this string. The substrings with different start indexes or end indexes are counted as different substrings even they consist of same characters. Example 1: Input: "abc" Output: 3 Explanation: Three palindromic strings: "a", "b", "c".    Example 2: Input: "aaa" Output: 6 Explanation: Six palindromic strings: "a", "a", "a", "aa", "aa", "aaa".    Note:  The input string length won't exceed 1000.
__label__Strings Given a string of lowercase letters in the range ascii[a-z], determine a character that can be removed to make the string a palindrome.  There may be more than one solution, but any will do.  For example, if your string is "bcbc", you can either remove 'b' at index  or 'c' at index .  If the word is already a palindrome or there is no solution, return -1.  Otherwise, return the index of a character to remove.   Function Description  Complete the palindromeIndex function in the editor below.  It must return the index of the character to remove or .   palindromeIndex has the following parameter(s):   s: a string to analyze Input Format The first line contains an integer , the number of queries.  Each of the next  lines contains a query string . Constraints     All characters are in the range ascii[a-z]. Output Format Print an integer denoting the zero-indexed position of the character to remove to make   a palindrome.  If  is already a palindrome or no such character exists, print .  Sample Input 3 aaab baa aaa  Sample Output 3 0 -1  Explanation Query 1: "aaab"  Removing 'b' at index  results in a palindrome, so we print  on a new line.      Query 2: "baa"  Removing 'b' at index  results in a palindrome, so we print  on a new line. Query 3: "aaa"  This string is already a palindrome, so we print .  Removing any one of the characters would result in a palindrome, but this test comes first. Note: The custom checker logic for this challenge is available here.
__label__Binary-Search Given the root of a binary search tree with distinct values, modify it so that every node has a new value equal to the sum of the values of the original tree that are greater than or equal to node.val. As a reminder, a binary search tree is a tree that satisfies these constraints:  The left subtree of a node contains only nodes with keys less than the node's key. The right subtree of a node contains only nodes with keys greater than the node's key. Both the left and right subtrees must also be binary search trees.    Example 1:  Input: [4,1,6,0,2,5,7,null,null,null,3,null,null,null,8] Output: [30,36,21,36,35,26,15,null,null,null,33,null,null,null,8]      Note:  The number of nodes in the tree is between 1 and 100. Each node will have value between 0 and 100. The given tree is a binary search tree.
__label__Array __label__Mathematics Given an array containing n distinct numbers taken from 0, 1, 2, ..., n, find the one that is missing from the array. Example 1: Input: [3,0,1] Output: 2  Example 2: Input: [9,6,4,2,3,5,7,0,1] Output: 8  Note: Your algorithm should run in linear runtime complexity. Could you implement it using only constant extra space complexity?
__label__Depth-first-Search There are a total of n courses you have to take, labeled from 0 to n-1. Some courses may have prerequisites, for example to take course 0 you have to first take course 1, which is expressed as a pair: [0,1] Given the total number of courses and a list of prerequisite pairs, return the ordering of courses you should take to finish all courses. There may be multiple correct orders, you just need to return one of them. If it is impossible to finish all courses, return an empty array. Example 1: Input: 2, [[1,0]]  Output: [0,1] Explanation: There are a total of 2 courses to take. To take course 1 you should have finished                 course 0. So the correct course order is [0,1] . Example 2: Input: 4, [[1,0],[2,0],[3,1],[3,2]] Output: [0,1,2,3] or [0,2,1,3] Explanation: There are a total of 4 courses to take. To take course 3 you should have finished both                   courses 1 and 2. Both courses 1 and 2 should be taken after you finished course 0.               So one correct course order is [0,1,2,3]. Another correct ordering is [0,2,1,3] . Note:  The input prerequisites is a graph represented by a list of edges, not adjacency matrices. Read more about how a graph is represented. You may assume that there are no duplicate edges in the input prerequisites.
__label__Greedy-Algorithms You are given two  arrays,  and , both containing  integers. A pair of indices  is beautiful if the  element of array  is equal to the  element of array . In other words, pair  is beautiful if and only if . A set containing beautiful pairs is called a beautiful set. A beautiful set is called pairwise disjoint if for every pair  belonging to the set there is no repetition of either  or  values. For instance, if  and  the beautiful set  is not pairwise disjoint as there is a repetition of , that is .  Your task is to change exactly  element in  so that the size of the pairwise disjoint beautiful set is maximum. Function Description  Complete the beautifulPairs function in the editor below.  It should return an integer that represents the maximum number of pairwise disjoint beautiful pairs that can be formed.   beautifulPairs has the following parameters:   A: an array of integers   B: an array of integers   Input Format The first line contains a single integer , the number of elements in  and .  The second line contains  space-separated integers .  The third line contains  space-separated integers . Constraints   Output Format Determine and print the maximum possible number of pairwise disjoint beautiful pairs.  Note: You must first change  element in , and your choice of element must be optimal. Sample Input 0 Sample Output 0 Explanation 0 You are given  and .  The beautiful set is  and maximum sized pairwise disjoint beautiful set is either  or .  We can do better. We change the  element of array  from  to . Now new B array is:  and the pairwise disjoint beautiful set is . So, the answer is 4.  Note that we could have also selected index 3 instead of index 2 but it would have yeilded the same result. Any other choice of index is not optimal. Sample Input 1 Sample Output 1
__label__Depth-first-Search Two strings X and Y are similar if we can swap two letters (in different positions) of X, so that it equals Y. For example, "tars" and "rats" are similar (swapping at positions 0 and 2), and "rats" and "arts" are similar, but "star" is not similar to "tars", "rats", or "arts". Together, these form two connected groups by similarity: {"tars", "rats", "arts"} and {"star"}.  Notice that "tars" and "arts" are in the same group even though they are not similar.  Formally, each group is such that a word is in the group if and only if it is similar to at least one other word in the group. We are given a list A of strings.  Every string in A is an anagram of every other string in A.  How many groups are there? Example 1: Input: ["tars","rats","arts","star"] Output: 2 Note:  A.length <= 2000 A[i].length <= 1000 A.length * A[i].length <= 20000 All words in A consist of lowercase letters only. All words in A have the same length and are anagrams of each other. The judging time limit has been increased for this question.
__label__Binary-Search Koko loves to eat bananas.  There are N piles of bananas, the i-th pile has piles[i] bananas.  The guards have gone and will come back in H hours. Koko can decide her bananas-per-hour eating speed of K.  Each hour, she chooses some pile of bananas, and eats K bananas from that pile.  If the pile has less than K bananas, she eats all of them instead, and won't eat any more bananas during this hour. Koko likes to eat slowly, but still wants to finish eating all the bananas before the guards come back. Return the minimum integer K such that she can eat all the bananas within H hours.      Example 1: Input: piles = [3,6,7,11], H = 8 Output: 4   Example 2: Input: piles = [30,11,23,4,20], H = 5 Output: 30   Example 3: Input: piles = [30,11,23,4,20], H = 6 Output: 23    Note:  1 <= piles.length <= 10^4 piles.length <= H <= 10^9 1 <= piles[i] <= 10^9
__label__Bit Given a long integer , count the number of values of  satisfying the following conditions:     where  and  are long integers and  is the bitwise XOR operator.   You are given  queries, and each query is in the form of a long integer denoting . For each query, print the total number of values of  satisfying the conditions above on a new line. For example, you are given the value .  Condition  requires that .  The following tests are run:           We find that there are  values meeting the first condition:  and .   Function Description  Complete the theGreatXor function in the editor below.  It should return an integer that represents the number of values satisfying the constraints.   theGreatXor has the following parameter(s): x: an integer   Input Format The first line contains an integer , the number of queries.  Each of the next  lines contains a long integer describing the value of  for a query.   Constraints   Subtasks For  of the maximum score:   Output Format For each query, print the number of values of  satisfying the given conditions on a new line. Sample Input 0 Sample Output 0 Explanation 0 We perform the following  queries: For  the only value of  satisfying  is . This also satisfies our other condition, as  and . Because we have one valid  and there are no more values to check, we print  on a new line. For , the following values of  satisfy our conditions:          There are five valid values of . For , the following values of  satisfy our conditions:          There are five valid values of . Sample Input 1 Sample Output 1 Explanation 1 In the first case:      In the second case, the first 10 values are:
__label__Mathematics __label__Dynamic-Programming A sequence of number is called arithmetic if it consists of at least three elements and if the difference between any two consecutive elements is the same. For example, these are arithmetic sequence: 1, 3, 5, 7, 9 7, 7, 7, 7 3, -1, -5, -9 The following sequence is not arithmetic. 1, 1, 2, 5, 7  A zero-indexed array A consisting of N numbers is given. A slice of that array is any pair of integers (P, Q) such that 0 <= P < Q < N. A slice (P, Q) of array A is called arithmetic if the sequence:     A[P], A[p + 1], ..., A[Q - 1], A[Q] is arithmetic. In particular, this means that P + 1 < Q. The function should return the number of arithmetic slices in the array A.   Example: A = [1, 2, 3, 4]  return: 3, for 3 arithmetic slices in A: [1, 2, 3], [2, 3, 4] and [1, 2, 3, 4] itself.
__label__Tree __label__Data-Structures Complete the inOrder function in your editor below, which has  parameter: a pointer to the root of a binary tree. It must print the values in the tree's inorder traversal as a single line of space-separated values.   Input Format Our hidden tester code passes the root node of a binary tree to your inOrder function. Constraints 1 Nodes in the tree   500 Output Format Print the tree's inorder traversal as a single line of space-separated values. Sample Input      1       \        2         \          5         /  \        3    6         \          4    Sample Output 1 2 3 4 5 6
__label__Strings __label__Dynamic-Programming Given a string S, find the number of different non-empty palindromic subsequences in S, and return that number modulo 10^9 + 7.  A subsequence of a string S is obtained by deleting 0 or more characters from S.  A sequence is palindromic if it is equal to the sequence reversed.  Two sequences A_1, A_2, ... and B_1, B_2, ... are different if there is some i for which A_i != B_i.  Example 1: Input:  S = 'bccb' Output: 6 Explanation:  The 6 different non-empty palindromic subsequences are 'b', 'c', 'bb', 'cc', 'bcb', 'bccb'. Note that 'bcb' is counted only once, even though it occurs twice.   Example 2: Input:  S = 'abcdabcdabcdabcdabcdabcdabcdabcddcbadcbadcbadcbadcbadcbadcbadcba' Output: 104860361 Explanation:  There are 3104860382 different non-empty palindromic subsequences, which is 104860361 modulo 10^9 + 7.   Note: The length of S will be in the range [1, 1000]. Each character S[i] will be in the set {'a', 'b', 'c', 'd'}.
__label__Hash-Table Given a set of points in the xy-plane, determine the minimum area of a rectangle formed from these points, with sides parallel to the x and y axes. If there isn't any rectangle, return 0.    Example 1: Input: [[1,1],[1,3],[3,1],[3,3],[2,2]] Output: 4   Example 2: Input: [[1,1],[1,3],[3,1],[3,3],[4,1],[4,3]] Output: 2    Note:  1 <= points.length <= 500 0 <= points[i][0] <= 40000 0 <= points[i][1] <= 40000 All points are distinct.
__label__Hash-Table __label__Mathematics Given two integers representing the numerator and denominator of a fraction, return the fraction in string format. If the fractional part is repeating, enclose the repeating part in parentheses. Example 1: Input: numerator = 1, denominator = 2 Output: "0.5"  Example 2: Input: numerator = 2, denominator = 1 Output: "2" Example 3: Input: numerator = 2, denominator = 3 Output: "0.(6)"
__label__Depth-first-Search In a N x N grid composed of 1 x 1 squares, each 1 x 1 square consists of a /, \, or blank space.  These characters divide the square into contiguous regions. (Note that backslash characters are escaped, so a \ is represented as "\\".) Return the number of regions.                Example 1: Input: [   " /",   "/ " ] Output: 2 Explanation: The 2x2 grid is as follows:    Example 2: Input: [   " /",   "  " ] Output: 1 Explanation: The 2x2 grid is as follows:    Example 3: Input: [   "\\/",   "/\\" ] Output: 4 Explanation: (Recall that because \ characters are escaped, "\\/" refers to \/, and "/\\" refers to /\.) The 2x2 grid is as follows:    Example 4: Input: [   "/\\",   "\\/" ] Output: 5 Explanation: (Recall that because \ characters are escaped, "/\\" refers to /\, and "\\/" refers to \/.) The 2x2 grid is as follows:    Example 5: Input: [   "//",   "/ " ] Output: 3 Explanation: The 2x2 grid is as follows:     Note:  1 <= grid.length == grid[0].length <= 30 grid[i][j] is either '/', '\', or ' '.
__label__Mathematics A Tic-Tac-Toe board is given as a string array board. Return True if and only if it is possible to reach this board position during the course of a valid tic-tac-toe game. The board is a 3 x 3 array, and consists of characters " ", "X", and "O".  The " " character represents an empty square. Here are the rules of Tic-Tac-Toe:  Players take turns placing characters into empty squares (" "). The first player always places "X" characters, while the second player always places "O" characters. "X" and "O" characters are always placed into empty squares, never filled ones. The game ends when there are 3 of the same (non-empty) character filling any row, column, or diagonal. The game also ends if all squares are non-empty. No more moves can be played if the game is over.  Example 1: Input: board = ["O  ", "   ", "   "] Output: false Explanation: The first player always plays "X".  Example 2: Input: board = ["XOX", " X ", "   "] Output: false Explanation: Players take turns making moves.  Example 3: Input: board = ["XXX", "   ", "OOO"] Output: false  Example 4: Input: board = ["XOX", "O O", "XOX"] Output: true  Note:  board is a length-3 array of strings, where each string board[i] has length 3. Each board[i][j] is a character in the set {" ", "X", "O"}.
__label__Strings A query word matches a given pattern if we can insert lowercase letters to the pattern word so that it equals the query. (We may insert each character at any position, and may insert 0 characters.) Given a list of queries, and a pattern, return an answer list of booleans, where answer[i] is true if and only if queries[i] matches the pattern.   Example 1: Input: queries = ["FooBar","FooBarTest","FootBall","FrameBuffer","ForceFeedBack"], pattern = "FB" Output: [true,false,true,true,false] Explanation:  "FooBar" can be generated like this "F" + "oo" + "B" + "ar". "FootBall" can be generated like this "F" + "oot" + "B" + "all". "FrameBuffer" can be generated like this "F" + "rame" + "B" + "uffer". Example 2: Input: queries = ["FooBar","FooBarTest","FootBall","FrameBuffer","ForceFeedBack"], pattern = "FoBa" Output: [true,false,true,false,false] Explanation:  "FooBar" can be generated like this "Fo" + "o" + "Ba" + "r". "FootBall" can be generated like this "Fo" + "ot" + "Ba" + "ll".  Example 3: Input: queries = ["FooBar","FooBarTest","FootBall","FrameBuffer","ForceFeedBack"], pattern = "FoBaT" Output: [false,true,false,false,false] Explanation:  "FooBarTest" can be generated like this "Fo" + "o" + "Ba" + "r" + "T" + "est".    Note:  1 <= queries.length <= 100 1 <= queries[i].length <= 100 1 <= pattern.length <= 100 All strings consists only of lower and upper case English letters.
__label__Dynamic-Programming There are  balls in a row, and each ball is either black (B) or white (W). Perform  removal operations with the goal of maximizing the number of white balls picked. For each operation  (where ): B W Choose an integer, , uniformly and independently from  to  (inclusive). Remove the  ball from either the left end or right end of the row, which decrements the number of available balls in the row by . You can choose to remove the ball from whichever end in each step maximizing the expected total number of white balls picked at the end. Given a string describing the initial row of balls as a sequence of  W's and B's, find and print the expected number of white balls providing that you make all choices optimally. A correct answer has an absolute error of at most .   W B Input Format The first line contains two space-separated integers describing the respective values of  (the number of balls) and  (the number of operations).  The second line describes the initial sequence balls as a single string of  characters; each character is either B or W and describes a black or white ball, respectively. B W Constraints  Output Format Print a single floating-point number denoting the expected number of white balls picked. Your answer is considered to be correct if it has an absolute error of at most .   Sample Input 0 Sample Output 0 Explanation 0  Independent of your choice of , one white ball will always be picked so the expected number of white balls chosen after  operation is . Thus, we print  as our answer. Sample Input 1 Sample Output 1 Explanation 1 We perform the following  operations:   Independent of your choice of , a white ball will always be chosen during the first operation (meaning the expected number of white balls in the first operation is ).   For the second operation, there are  possible row orderings (depending on which ball was picked during the first operation). In the first possible row ordering, the probability of picking a white ball is . In the second possible row ordering, the probability of picking a white ball is . This means the expected number of white balls chosen in the second operation is . After performing all  operations, we print the total expected number of white balls chosen, which is .
__label__Strings A string is said to be a child of a another string if it can be formed by deleting 0 or more characters from the other string.  Given two strings of equal length, what's the longest string  that can be constructed such that it is a child of both?   For example, ABCD and ABDC have two children with maximum length 3, ABC and ABD.  They can be formed by eliminating either the D or C from both strings.  Note that we will not consider ABCD as a common child because we can't rearrange characters and ABCD  ABDC.   ABCD ABDC ABC ABD D C ABCD ABCD ABDC Function Description Complete the commonChild function in the editor below.  It should return the longest string which is a common child of the input strings. commonChild has the following parameter(s): s1, s2:  two equal length strings   Input Format There is one line with two space-separated strings,  and .  Constraints   All characters are upper case in the range ascii[A-Z]. Output Format Print the length of the longest string , such that  is a child of both  and .  Sample Input HARRY SALLY  Sample Output  2  Explanation The longest string that can be formed by deleting zero or more characters from  and  is , whose length is 2. Sample Input 1 AA BB  Sample Output 1 0  Explanation 1  and  have no characters in common and hence the output is 0. Sample Input 2 SHINCHAN NOHARAAA  Sample Output 2 3  Explanation 2 The longest string that can be formed between  and  while maintaining the order is . Sample Input 3 ABCDEF FBDAMN  Sample Output 3 2  Explanation 3   is the longest child of the given strings.
__label__Bit Consider two non-negative long integers,  and , where . The bitwise AND of all long integers in the inclusive range between  and  can be expressed as , where  is the bitwise AND operator.  Given  pairs of long integers,  and , compute and print the bitwise AND of all natural numbers in the inclusive range between  and . For example, if  and , the calculation is .   Function Description  Complete the andProduct in the editor below.  It should return the computed value as an integer.   andProduct has the following parameter(s):   a: an integer   b: an integer   Input Format The first line contains a single integer , the number of intervals to test.  Each of the next  lines contains two space-separated integers  and . Constraints    Output Format For each pair of long integers, print the bitwise AND of all numbers in the inclusive range between  and  on a new line. Sample Input 0 Sample Output 0 Explanation 0 There are three pairs to compute results for:  and   , so we print  on a new line.  and     and    Sample Input 1 Sample Output 1
__label__Strings Louise joined a social networking site to stay in touch with her friends. The signup page required her to input a name and a password. However, the password must be strong. The website considers a password to be strong if it satisfies the following criteria: Its length is at least .   It contains at least one digit.   It contains at least one lowercase English character.  It contains at least one uppercase English character.  It contains at least one special character. The special characters are: !@#$%^&*()-+  !@#$%^&*()-+ She typed a random string of length  in the password field but wasn't sure if it was strong. Given the string she typed, can you find the minimum number of characters she must add to make her password strong? Note: Here's the set of types of characters in a form you can paste in your solution: Input Format The first line contains an integer  denoting the length of the string. The second line contains a string consisting of  characters, the password typed by Louise. Each character is either a lowercase/uppercase English alphabet, a digit, or a special character. Constraints   Output Format Print a single line containing a single integer denoting the answer to the problem. Sample Input 0 Sample Output 0 Explanation 0 She can make the password strong by adding  characters, for example, $hk, turning the password into Ab1$hk which is strong.  $hk Ab1$hk  characters aren't enough since the length must be at least .   Sample Input 1 Sample Output 1 Explanation 1 The password isn't strong, but she can make it strong by adding a single digit.
__label__Strings Given two strings A and B of lowercase letters, return true if and only if we can swap two letters in A so that the result equals B.   Example 1:  Input: A = "ab", B = "ba" Output: true   Example 2: Input: A = "ab", B = "ab" Output: false   Example 3: Input: A = "aa", B = "aa" Output: true   Example 4: Input: A = "aaaaaaabc", B = "aaaaaaacb" Output: true   Example 5: Input: A = "", B = "aa" Output: false    Note:  0 <= A.length <= 20000 0 <= B.length <= 20000 A and B consist only of lowercase letters.
__label__Two-Pointers Given a linked list, return the node where the cycle begins. If there is no cycle, return null. To represent a cycle in the given linked list, we use an integer pos which represents the position (0-indexed) in the linked list where tail connects to. If pos is -1, then there is no cycle in the linked list. Note: Do not modify the linked list.   Example 1: Input: head = [3,2,0,-4], pos = 1 Output: tail connects to node index 1 Explanation: There is a cycle in the linked list, where tail connects to the second node.   Example 2: Input: head = [1,2], pos = 0 Output: tail connects to node index 0 Explanation: There is a cycle in the linked list, where tail connects to the first node.   Example 3: Input: head = [1], pos = -1 Output: no cycle Explanation: There is no cycle in the linked list.     Follow-up: Can you solve it without using extra space?
__label__Array Given an array of integers, 1 ≤ a[i] ≤ n (n = size of array), some elements appear twice and others appear once. Find all the elements that appear twice in this array. Could you do it without extra space and in O(n) runtime?  Example: Input: [4,3,2,7,8,2,3,1]  Output: [2,3]
__label__Strings Given two strings, determine if they share a common substring.  A substring may be as small as one character.   For example, the words "a", "and", "art" share the common substring .  The words "be" and "cat" do not share a substring.   Function Description Complete the function twoStrings in the editor below.  It should return a string, either YES or NO based on whether the strings share a common substring.   YES NO twoStrings has the following parameter(s):   s1, s2: two strings to analyze .  Input Format The first line contains a single integer , the number of test cases.      The following  pairs of lines are as follows: The first line contains string . The second line contains string . Constraints  and  consist of characters in the range ascii[a-z].   Output Format For each pair of strings, return YES or NO. YES NO Sample Input 2 hello world hi world  Sample Output YES NO  Explanation We have  pairs to check: , . The substrings  and  are common to both strings.   , .  and  share no common substrings.
__label__Tree __label__Depth-first-Search Given a binary tree, determine if it is height-balanced. For this problem, a height-balanced binary tree is defined as:  a binary tree in which the depth of the two subtrees of every node never differ by more than 1.  Example 1: Given the following tree [3,9,20,null,null,15,7]:     3    / \   9  20     /  \    15   7 Return true.  Example 2: Given the following tree [1,2,2,3,3,null,null,4,4]:        1       / \      2   2     / \    3   3   / \  4   4  Return false.
__label__Greedy-Algorithms Jim's Burgers has a line of hungry customers.  Orders vary in the time it takes to prepare them.  Determine the order the customers receive their orders.  Start by numbering each of the customers from  to , front of the line to the back.  You will then be given an order number and a preparation time for each customer.    The time of delivery is calculated as the sum of the order number and the preparation time.  If two orders are delivered at the same time, assume they are delivered in ascending customer number order. For example, there are  customers in line.  They each receive an order number  and a preparation time .: We see that the orders are delivered to customers in the following order: Function Description  Complete the jimOrders function in the editor below.  It should return an array of integers that represent the order that customers' orders are delivered.   jimOrders has the following parameter(s):   orders: a 2D integer array where each  is in the form .   Input Format The first line contains an integer , the number of customers.  Each of the next  lines contains two space-separated integers, an order number and prep time for .       Constraints      Output Format Print a single line of  space-separated customer numbers (recall that customers are numbered from  to ) that describes the sequence in which the customers receive their burgers. If two or more customers receive their burgers at the same time, print their numbers in ascending order. Sample Input 0 3 1 3 2 3 3 3  Sample Output 0 1 2 3  Explanation 0  Jim has the following orders: . This order is delivered at time . . This order is delivered at time . . This order is delivered at time . The orders were delivered in the same order as the customers stood in line. The index in  is the customer number and is what is printed.  In this case, the customer numbers match the order numbers. Sample Input 1 5 8 1 4 2 5 6 3 1 4 3  Sample Output 1 4 2 5 1 3  Explanation 1  Jim has the following orders: . This order is delivered at time . . This order is delivered at time . . This order is delivered at time . . This order is delivered at time . . This order is delivered at time . When we order these by ascending fulfillment time, we get: : customer . : customer . : customer . : customer . : customer . We print the ordered numbers in the bulleted listed above as 4 2 5 1 3.  4 2 5 1 3 Note: While not demonstrated in these sample cases, recall that any orders fulfilled at the same time must be listed by ascending order number.
__label__Strings __label__Mathematics Dothraki are planning an attack to usurp King Robert's throne. King Robert learns of this conspiracy from Raven and plans to lock the single door through which the enemy can enter his kingdom.  But, to lock the door he needs a key that is an anagram of a palindrome.  He starts to go through his box of strings, checking to see if they can be rearranged into a palindrome. For example, given the string , one way it can be arranged into a palindrome is . Function Description  Complete the gameOfThrones function below to determine whether a given string can be rearranged into a palindrome. If it is possible, return YES, otherwise return NO.   YES NO gameOfThrones has the following parameter(s):   s: a string to analyze   Input Format A single line which contains , the input string. Constraints  |s|    contains only lowercase letters in the range  Output Format A single line which contains YES or NO. YES NO Sample Input 0 Sample Output 0 Explanation 0 A palindromic permutation of the given string is bbaaabb.    Sample Input 1 Sample Output 1 Explanation 1 Palindromes longer than 1 character are made up of pairs of characters.  There are none here.   Sample Input 2 Sample Output 2 Explanation 2 An example palindrome from the string:  ddcceefeeccdd.
__label__Array __label__Two-Pointers Given an array nums, write a function to move all 0's to the end of it while maintaining the relative order of the non-zero elements. Example: Input: [0,1,0,3,12] Output: [1,3,12,0,0] Note:  You must do this in-place without making a copy of the array. Minimize the total number of operations.
__label__Strings We are given two arrays A and B of words.  Each word is a string of lowercase letters. Now, say that word b is a subset of word a if every letter in b occurs in a, including multiplicity.  For example, "wrr" is a subset of "warrior", but is not a subset of "world". Now say a word a from A is universal if for every b in B, b is a subset of a.  Return a list of all universal words in A.  You can return the words in any order.      Example 1: Input: A = ["amazon","apple","facebook","google","leetcode"], B = ["e","o"] Output: ["facebook","google","leetcode"]   Example 2: Input: A = ["amazon","apple","facebook","google","leetcode"], B = ["l","e"] Output: ["apple","google","leetcode"]   Example 3: Input: A = ["amazon","apple","facebook","google","leetcode"], B = ["e","oo"] Output: ["facebook","google"]   Example 4: Input: A = ["amazon","apple","facebook","google","leetcode"], B = ["lo","eo"] Output: ["google","leetcode"]   Example 5: Input: A = ["amazon","apple","facebook","google","leetcode"], B = ["ec","oc","ceo"] Output: ["facebook","leetcode"]    Note:  1 <= A.length, B.length <= 10000 1 <= A[i].length, B[i].length <= 10 A[i] and B[i] consist only of lowercase letters. All words in A[i] are unique: there isn't i != j with A[i] == A[j].
__label__Array Given an array A of 0s and 1s, consider N_i: the i-th subarray from A[0] to A[i] interpreted as a binary number (from most-significant-bit to least-significant-bit.) Return a list of booleans answer, where answer[i] is true if and only if N_i is divisible by 5. Example 1: Input: [0,1,1] Output: [true,false,false] Explanation:  The input numbers in binary are 0, 01, 011; which are 0, 1, and 3 in base-10.  Only the first number is divisible by 5, so answer[0] is true.  Example 2: Input: [1,1,1] Output: [false,false,false]  Example 3: Input: [0,1,1,1,1,1] Output: [true,false,false,false,true,false]  Example 4: Input: [1,1,1,0,1] Output: [false,false,false,false,false]    Note:  1 <= A.length <= 30000 A[i] is 0 or 1
__label__Dynamic-Programming Alice is a kindergarten teacher. She wants to give some candies to the children in her class.  All the children sit in a line and each of them has a rating score according to his or her performance in the class.  Alice wants to give at least 1 candy to each child. If two children sit next to each other, then the one with the higher rating must get more candies. Alice wants to minimize the total number of candies she must buy. For example, assume her students' ratings are [4, 6, 4, 5, 6, 2].  She gives the students candy in the following minimal amounts: [1, 2, 1, 2, 3, 1].  She must buy a minimum of 10 candies.   Function Description Complete the candies function in the editor below.  It must return the minimum number of candies Alice must buy.   candies has the following parameter(s):   n: an integer, the number of children in the class   arr: an array of integers representing the ratings of each student   Input Format The first line contains an integer, , the size of .  Each of the next  lines contains an integer  indicating the rating of the student at position . Constraints     Output Format Output a single line containing the minimum number of candies Alice must buy. Sample Input 0 Sample Output 0 Explanation 0 Here 1, 2, 2 is the rating. Note that when two children have equal rating, they are allowed to have different number of candies. Hence optimal distribution will be 1, 2, 1. Sample Input 1 Sample Output 1 Explanation 1 Optimal distribution will be  Sample Input 2 Sample Output 2 Explanation 2 Optimal distribution will be .
__label__Array __label__Hash-Table Given an array of integers and an integer k, you need to find the total number of continuous subarrays whose sum equals to k. Example 1: Input:nums = [1,1,1], k = 2 Output: 2   Note:  The length of the array is in range [1, 20,000]. The range of numbers in the array is [-1000, 1000] and the range of the integer k is [-1e7, 1e7].
__label__Dynamic-Programming There are N cities and N directed roads in Steven's world. The cities are numbered from 0 to N - 1. Steven can travel from city i to city (i + 1) % N, ( 0-> 1 -> 2 -> .... -> N - 1 -> 0).  Steven wants to travel around the world by car. The capacity of his car's fuel tank is C gallons. There are a[i] gallons he can use at the beginning of city i and the car takes b[i] gallons to travel from city i to (i + 1) % N.   How many cities can Steven start his car from so that he can travel around the world and reach the same city he started?  Note  The fuel tank is initially empty.  Input Format The first line contains two integers (separated by a space): city number N and capacity C.  The second line contains N space-separated integers: a[0], a[1], … , a[N - 1].  The third line contains N space-separated integers: b[0], b[1], … , b[N - 1].   Constraints 2 ≤ N ≤ 105  1 ≤ C ≤ 1018  0 ≤ a[i], b[i] ≤ 109  Output Format The number of cities which can be chosen as the start city. Sample Input 3 3 3 1 2 2 2 2  Sample Output 2  Explanation Steven starts from city 0, fills his car with 3 gallons of fuel, and use 2 gallons of fuel to travel to city 1. His fuel tank now has 1 gallon of fuel.  On refueling 1 gallon of fuel at city 1, he then travels to city 2 by using 2 gallons of fuel. His fuel tank is now empty.  On refueling 2 gallon of fuel at city 2, he then travels back to city 0 by using 2 gallons of fuel.   Here is the second possible solution.  Steven starts from city 2, fill his car with 2 gallons, and travels to city 0.  On refueling 3 gallons of fuel from city 0, he then travels to city 1, and exhausts 2 gallons of fuel. His fuel tank contains 1 gallon of fuel now. He can then refuel 1 gallon of fuel at City 1, and increase his car's fuel to 2 gallons and travel to city 2.  However, Steven cannot start from city 1, because he is given only 1 gallon of fuel, but travelling to city 2 requires 2 gallons.  Hence the answer 2.
__label__Game-Theory Alice and Bob invented the following silly game: The game starts with an integer, , that's used to build a  of  distinct integers in the inclusive range from  to  (i.e., ). Alice always plays first, and the two players move in alternating turns. During each move, the current player chooses a prime number, , from . The player then removes  and all of its multiples from . The first player to be unable to make a move loses the game. Alice and Bob play  games. Given the value of  for each game, print the name of the game's winner on a new line. If Alice wins, print Alice; otherwise, print Bob. Alice Bob Note: Each player always plays optimally, meaning they will not make a move that causes them to lose the game if some better, winning move exists. Input Format The first line contains an integer, , denoting the number of games Alice and Bob play.  Each line  of the  subsequent lines contains a single integer, , describing a game. Constraints    Subtasks  for  of the maximum score Output Format For each game, print the name of the winner on a new line. If Alice wins, print Alice; otherwise, print Bob. Alice Bob Sample Input 0 Sample Output 0 Explanation 0 Alice and Bob play the following  games: We are given , so . Because Alice has no valid moves (there are no prime numbers in the set), she loses the game. Thus, we print Bob on a new line. Bob We are given , so . Alice chooses the prime number  and deletes it from the set, which becomes . Because Bob has no valid moves (there are no prime numbers in the set), he loses the game. Thus, we print Alice on a new line. Alice We are given , so . Alice chooses the prime number  and deletes the numbers  and  from the set, which becomes . Now there are two primes left,  and . Bob can remove either prime from the set, and then Alice can remove the remaining prime. Because Bob is left without a final move, Alice will always win. Thus, we print Alice on a new line. Alice
__label__Bit Consider four numbers: , , , and . You must change at most  bits in  and  to form the numbers  and  satisfying the equation . Here, the | symbol denotes the bitwise OR operation. Given  sets of the numbers defined above, find and print the respective values of  and  on new lines; if no such value exists, print  instead. If there are multiple solutions, make  as small as possible; if there are still multiple solutions, make  as small as possible.  Notes:  , , and  are given in Hexadecimal (base 16), and  is given in decimal (base 10). If the number of bits changed in  is  and the number of bits changed in B is , then  must be . Input Format The first line contains an integer, , denoting the number of queries. The subsequent lines describe each respective query as follows: The first line contains a single integer denoting the value of . Each of the next  lines contains a Hexadecimal (base 16) number describing the respective values of , , and . Constraints    Output Format Print two lines of output for each query: The first line should contain a Hexadecimal (base 16) number denoting the value of . The second line must contain a Hexadecimal (base 16) number denoting the value of .  If no valid answer exists, you must instead print one line of output with the integer . Note: The letters in Hexadecimal numbers must be in uppercase. Sample Input 3 8 2B 9F 58 5 B9 40 5A 2 91 BE A8  Sample Output 8 58 18 42 -1  Explanation Query 0:  In this query, .  Change  to .  bits are changed.  Change B =  to .  bits are changed.   Query 1:  In this query, .  Change  to .  bits are changed.  Change  to . Only  bit is changed.  Query 2:  There is no valid answer, so we print .
__label__Dynamic-Programming Given a string s, partition s such that every substring of the partition is a palindrome. Return the minimum cuts needed for a palindrome partitioning of s. Example: Input: "aab" Output: 1 Explanation: The palindrome partitioning ["aa","b"] could be produced using 1 cut.
__label__Graph-Algorithms Update: A slight modification in the problem statement (see below)   Evil Nation A is angry and plans to launch N guided-missiles at the peaceful Nation B in an attempt to wipe out all of Nation B's people. Nation A's missile i will arrive in nation B at time ti. Missile i communicates with its headquarters by unique radio signals with a frequency equal to fi. Can you help the peaceful Nation B survive by building a defensive system that will stop the missiles dead in the sky? Defensive system:  The only way to defend Nation B from the attacking missile is by counter attacking them with a hackerX missile. You have a lot of hackerX missiles and each one of them has its own radio frequency. An individual hackerX missile can destroy Evil Nation A’s attacking missile if the radio frequency of both of the missiles match. Each hackerX missile can be used an indefinite number of times. Its invincible and doesn't get destroyed in the collision. The good news is you can adjust the frequency of the hackerX missile to match the evil missiles' frequency. When changing the hackerX missile's initial frequency fA to the new defending frequency fB, you will need \|fB - fA\| units of time to do.  Each hackerX missile can only destroy one of Nation A's missile at a time. So if two evil missiles with same frequency arrive at the same time, you need at least two hackerX missiles with the same frequency as the evil missiles to avoid damage.  If two evil missles with same frequency arrive at the same time, we can destroy them both with one hackerX missile. You can set the frequency of a hackerX missile to any value when its fired.   What is the minimum number of hackerX missiles you must launch to keep Nation B safe? Input Format:  The first line contains a single integer N denoting the number of missiles.  This is followed by N lines each containing two integers ti and fi denoting the time & frequency of the ith missile. Output Format:  A single integer denoting the minimum number of hackerX missiles you need to defend the nation. Constraints:  1 <=  N  <= 100000  0 <= ti <= 100000  0 <= fi <= 100000  t1 <= t2 <= ... <= tN  Sample Input #00  4 1 1 2 2 3 1 5 1  Sample Output #00  1  Explanation #00 A HackerX missile is launched at t = 1 with a frequency f = 1, and destroys the first missile. It re-tunes its frequency to f = 2 in 1 unit of time, and destroys the missile that is going to hit Nation B at t = 2. It re-tunes its frequency back to 1 in 1 unit of time and destroys the missile that is going to hit the nation at t = 3. It is relaunched at t = 5 with f = 1 and destroys the missile that is going to hit nation B at t = 5. Hence, you need only 1 HackerX to protect nation B.  Sample Input #01  4 1 1 2 3 3 1 5 1  Sample Output #01  2  Explanation #01 Destroy 1 missile at t = 1, f = 1. now at t = 2, there is a missile with frequency 3. The launched missile takes 2 units of time to destroy this, hence we need a new hackerX missile to destroy this one. The first hackerX missile can destroy the 3rd missile which has the same frequency as itself. The same hackerX missile destroys the missile that is hitting its city at t = 5. Thus, we need atleast 2 hackerX missiles.
__label__Data-Structures Victoria has a tree, , consisting of  nodes numbered from  to . Each edge from node  to  in tree  has an integer weight, . Let's define the cost, , of a path from some node  to some other node  as the maximum weight () for any edge in the unique path from node  to node . Victoria wants your help processing  queries on tree , where each query contains  integers,  and , such that . For each query, she wants to print the number of different paths in  that have a cost, , in the inclusive range . It should be noted that path from some node  to some other node  is considered same as path from node  to  i.e  is same as .  Input Format The first line contains  space-separated integers,  (the number of nodes) and  (the number of queries), respectively.  Each of the  subsequent lines contain  space-separated integers, , , and , respectively, describing a bidirectional road between nodes  and  which has weight .  The  subsequent lines each contain  space-separated integers denoting  and . Constraints         Scoring  for  of the test data.    for  of the test data. Output Format For each of the  queries, print the number of paths in  having cost  in the inclusive range  on a new line. Sample Input 5 5 1 2 3 1 4 2 2 5 6 3 4 1 1 1 1 2 2 3 2 5 1 6  Sample Output 1 3 5 5 10  Explanation :   :   :   :   ...etc.
__label__Depth-first-Search Given an integer array, your task is to find all the different possible increasing subsequences of the given array, and the length of an increasing subsequence should be at least 2.   Example: Input: [4, 6, 7, 7] Output: [[4, 6], [4, 7], [4, 6, 7], [4, 6, 7, 7], [6, 7], [6, 7, 7], [7,7], [4,7,7]]    Note:  The length of the given array will not exceed 15. The range of integer in the given array is [-100,100]. The given array may contain duplicates, and two equal integers should also be considered as a special case of increasing sequence.
__label__Tree Given a binary tree rooted at root, the depth of each node is the shortest distance to the root. A node is deepest if it has the largest depth possible among any node in the entire tree. The subtree of a node is that node, plus the set of all descendants of that node. Return the node with the largest depth such that it contains all the deepest nodes in its subtree.   Example 1: Input: [3,5,1,6,2,0,8,null,null,7,4] Output: [2,7,4] Explanation:    We return the node with value 2, colored in yellow in the diagram. The nodes colored in blue are the deepest nodes of the tree. The input "[3, 5, 1, 6, 2, 0, 8, null, null, 7, 4]" is a serialization of the given tree. The output "[2, 7, 4]" is a serialization of the subtree rooted at the node with value 2. Both the input and output have TreeNode type.    Note:  The number of nodes in the tree will be between 1 and 500. The values of each node are unique.
__label__Graph-Algorithms HackerRank is starting a bus service in MountainView, California. The bus starts at time T = 0 at station1 and goes through station2, station3, station4 in that order and reaches the headquarters located at stationn. At every station, the bus waits for various commuters to arrive before it departs to the next station. Ignoring the acceleration, the bus moves at 1 meter / second. i.e., if stationi and stationj are 1000 meters apart, the bus takes 1000 seconds to travel from stationi to stationj.  The bus is equipped with K units of Nitro (N2O). If going from stationi to stationj takes x seconds, then using t units of nitro can decrease the time taken to max(x-t, 0) seconds where max(a,b) denotes the greater of the two values between a & b. The Nitro can be used all at once or in multiples of 1 unit.  If the bus driver travels optimally, what is the minimum sum of travelling time for all commuters? The travelling time equals to the time he/she arrived at the destination minus the time he/she arrived the start station.  Please remember that the driver must take all passengers to their destination.   Input Format The first line contains 3 space separated integers n, m and K which indicate the number of stations, total number of people who board the bus at various stations and the total units of Nitro (N2O) present in the bus.   The second line contains n-1 space separated integers where the ith integer indicates the distance between station(i-1) to stationi.   m lines follow each containing 3 space separated integers. The ith line contains ti, si and ei in that order indicating the arrival time of the commuter at si at time ti with his destination being ei.  n m K   d1 d2 ... dn-1   // di: the distance between station_i to station_(i+1). t1 s1 e1         // commuter 1 arrives at his boarding point at s1 and his destination is e1 t2 s2 e2 ... tm sm em  Constraints 0 < n <= 100000  0 < m <= 100000  0 <= K <= 10000000  0 < di <= 100  0 <= ti <= 10000000  1 <= si < ei <= n   Output Format The minimal total travel time.  Sample Input 3 3 2 1 4 1 1 3 2 1 2 5 2 3  Sample Output 9  Explanation The bus waits for the 1st and the 2nd commuter to arrive at station1 and travels to station2 carrying 2 passengers. The travel time from station1 to station2 is 1 second. It then waits for the 3rd commuter to board the bus at time = 5, 2nd commuter deboards the bus. The 3rd commuter boards the bus at t = 5. The bus now uses 2 units of nitro, this reduces the commute time to travel to station3 from 4 to 2.  Hence, the total time spent by each of the passengers on the bus is  1 (time spent waiting for commuter 2) + 1 (travel time from station1 to station2) + 2 (time spent waiting for commuter 3) + 2 (travel time from station2 to station3) = 6 1 (travel time from station1 to station2) 2 (travel time from station2 to station3) 6+1+2 = 9 2 (travel time from station2 to station3) 6+1+2 = 9 hence the answer.  Timelimits Timelimits for this challenge can be seen here
__label__Array Given an array arr that is a permutation of [0, 1, ..., arr.length - 1], we split the array into some number of "chunks" (partitions), and individually sort each chunk.  After concatenating them, the result equals the sorted array. What is the most number of chunks we could have made? Example 1: Input: arr = [4,3,2,1,0] Output: 1 Explanation: Splitting into two or more chunks will not return the required result. For example, splitting into [4, 3], [2, 1, 0] will result in [3, 4, 0, 1, 2], which isn't sorted.  Example 2: Input: arr = [1,0,2,3,4] Output: 4 Explanation: We can split into two chunks, such as [1, 0], [2, 3, 4]. However, splitting into [1, 0], [2], [3], [4] is the highest number of chunks possible.  Note:  arr will have length in range [1, 10]. arr[i] will be a permutation of [0, 1, ..., arr.length - 1].
__label__Strings Ashton appeared for a job interview and is asked the following question. Arrange all the distinct substrings  of a given string in lexicographical order and concatenate them. Print the  character of the concatenated string. It is assured that given value of  will be valid i.e. there will be a  character. Can you help Ashton out with this?   For example, given the string , its distinct substrings are .  Sorted and concatenated, they make the string .  If  then, the answer is , the  character of the 1-indexed concatenated string.   Note We have distinct substrings here, i.e. if string is aa, it's distinct substrings are a and aa.   aa a aa Function Description  Complete the ashtonString function in the editor below.  It should return the  character from the concatenated string, 1-based indexing.   ashtonString has the following parameters:  - s: a string  - k: an integer   Input Format The first line will contain an integer , the number of test cases.   Each of the subsequent  pairs of lines is as follows:  - The first line of each test case contains a string, .  - The second line contains an integer, .   Constraints     Each character of string    will be an appropriate integer.  Output Format Print the  character (1-based index) of the concatenation of the ordered distinct substrings of . Sample Input 1 dbac 3  Sample Output c  Explanation The substrings when arranged in lexicographic order are as follows    a, ac, b, ba, bac, c, d, db, dba, dbac  On concatenating them, we get  aacbbabaccddbdbadbac  The third character in this string is c.  c
__label__Greedy-Algorithms Victoria is splurging on expensive accessories at her favorite stores. Each store stocks  types of accessories, where the  accessory costs  dollars (). Assume that an item's type identifier is the same as its cost, and the store has an unlimited supply of each accessory. Victoria wants to purchase a total of  accessories according to the following rule: Any -element subset of the purchased items must contain at least  different types of accessories.  For example, if , , and , then she must choose  accessories such that any subset of  of the  accessories will contain at least  distinct types of items.  Given , , , and  values for  shopping trips, find and print the maximum amount of money that Victoria can spend during each trip; if it's not possible for Victoria to make a purchase during a certain trip, print SAD instead. You must print your answer for each trip on a new line. SAD Input Format The first line contains an integer, , denoting the number of shopping trips.  Each of the  subsequent lines describes a single shopping trip as four space-separated integers corresponding to , , , and , respectively. Constraints       The sum of the 's for all  shopping trips .   Output Format For each shopping trip, print a single line containing either the maximum amount of money Victoria can spend; if there is no collection of items satisfying her shopping rule for the trip's , , , and  values, print SAD instead. SAD Sample Input 2 6 5 3 2 2 1 2 2  Sample Output 24 SAD  Explanation Shopping Trip 1:  We know that: Victoria wants to buy  accessories.  The store stocks the following  types of accessories: .  For any grouping of  of her  accessories, there must be at least  distinct types of accessories.   Victoria can satisfy her shopping rule and spend the maximum amount of money by purchasing the following set of accessories: . The total cost is , so we print  on a new line. Shopping Trip 2:  We know that: Victoria wants to buy  accessories. The store stocks  type of accessory: .  For any grouping of  of her  accessories, there must be at least  distinct types of accessories.  Because the store only carries  type of accessory, Victoria cannot make a purchase satisfying the constraint that there be at least  distinct types of accessories. Because Victoria will not purchase anything, we print that she is SAD on a new line.  SAD
__label__Array Given an array of integers nums, write a method that returns the "pivot" index of this array. We define the pivot index as the index where the sum of the numbers to the left of the index is equal to the sum of the numbers to the right of the index. If no such index exists, we should return -1. If there are multiple pivot indexes, you should return the left-most pivot index. Example 1: Input:  nums = [1, 7, 3, 6, 5, 6] Output: 3 Explanation:  The sum of the numbers to the left of index 3 (nums[3] = 6) is equal to the sum of numbers to the right of index 3. Also, 3 is the first index where this occurs.    Example 2: Input:  nums = [1, 2, 3] Output: -1 Explanation:  There is no index that satisfies the conditions in the problem statement.    Note:  The length of nums will be in the range [0, 10000]. Each element nums[i] will be an integer in the range [-1000, 1000].
__label__Bit Louise and Richard have developed a numbers game.  They pick a number and check to see if it is a power of .  If it is, they divide it by .  If not, they reduce it by the next lower number which is a power of .  Whoever reduces the number to  wins the game.  Louise always starts. Given an initial value, determine who wins the game. As an example, let the initial value .  It's Louise's turn so she first determines that  is not a power of .  The next lower power of  is , so she subtracts that from  and passes  to Richard.   is a power of , so Richard divides it by  and passes  to Louise.  Likewise,  is a power so she divides it by  and reaches .  She wins the game. Update If they initially set counter to , Richard wins.  Louise cannot make a move so she loses. Function Description  Complete the counterGame function in the editor below.  It should return the winner's name, either Richard or Louise.   Richard Louise counterGame has the following parameter(s):   n: an integer to initialize the game counter   Input Format The first line contains an integer , the number of testcases.  Each of the next  lines contains an integer , the initial value for the game.   Constraints   Output Format For each test case, print the winner's name on a new line in the form Louise or Richard. Louise Richard Sample Input 0 Sample Output 0 Explanation 0  is not a power of  so Louise reduces it by the largest power of  less than :.    is a power of  so Richard divides by  to get  and wins the game.
__label__Array __label__Two-Pointers Given n non-negative integers a1, a2, ..., an , where each represents a point at coordinate (i, ai). n vertical lines are drawn such that the two endpoints of line i is at (i, ai) and (i, 0). Find two lines, which together with x-axis forms a container, such that the container contains the most water. Note: You may not slant the container and n is at least 2.    The above vertical lines are represented by array [1,8,6,2,5,4,8,3,7]. In this case, the max area of water (blue section) the container can contain is 49.    Example: Input: [1,8,6,2,5,4,8,3,7] Output: 49
__label__Array Given an integer array, you need to find one continuous subarray that if you only sort this subarray in ascending order, then the whole array will be sorted in ascending order, too.  You need to find the shortest such subarray and output its length. Example 1: Input: [2, 6, 4, 8, 10, 9, 15] Output: 5 Explanation: You need to sort [6, 4, 8, 10, 9] in ascending order to make the whole array sorted in ascending order.   Note:  Then length of the input array is in range [1, 10,000]. The input array may contain duplicates, so ascending order here means <=.
__label__Dynamic-Programming Penny has an array of  integers, . She wants to find the number of unique multisets she can form using elements from the array such that the bitwise XOR of all the elements of the multiset is a prime number. Recall that a multiset is a set which can contain duplicate elements. Given  queries where each query consists of an array of integers, can you help Penny find and print the number of valid multisets for each array? As these values can be quite large, modulo each answer by  before printing it on a new line. Input Format The first line contains a single integer, , denoting the number of queries. The  subsequent lines describe each query in the following format: The first line contains a single integer, , denoting the number of integers in the array. The second line contains  space-separated integers describing the respective values of . Constraints     Output Format On a new line for each query, print a single integer denoting the number of unique multisets Penny can construct using numbers from the array such that the bitwise XOR of all the multiset's elements is prime. As this value is quite large, your answer must be modulo . Sample Input 1    3    3511 3671 4153    Sample Output 4  Explanation The valid multisets are:  is prime.  is prime.  is prime. , which is prime. Because there are four valid multisets, we print the value of  on a new line.
__label__Strings Alice wrote a sequence of words in CamelCase as a string of letters, , having the following properties: It is a concatenation of one or more words consisting of English letters. All letters in the first word are lowercase.  For each of the subsequent words, the first letter is uppercase and rest of the letters are lowercase. Given , print the number of words in  on a new line. For example, .  There are  words in the string.   Function Description Complete the camelcase function in the editor below.  It must return the integer number of words in the input string.   camelcase has the following parameter(s): s: the string to analyze   Input Format A single line containing string . Constraints  Output Format Print the number of words in string . Sample Input saveChangesInTheEditor  Sample Output 5  Explanation String  contains five words: save Changes In The Editor Thus, we print  on a new line. Need help? Try this problem first to get familiar with HackerRank environment.
__label__Search __label__Dynamic-Programming __label__Tree ADZEN is a popular advertising firm in your city that owns all  billboard locations on Main street. The city council passed a new zoning ordinance mandating that no more than  consecutive billboards may be up at any given time. For example, if there are  billboards on Main street and , ADZEN must remove either the middle billboard, the first two billboards, the last two billboards or the first and last billboard. Being a for-profit company, ADZEN wants to lose as little advertising revenue as possible when removing the billboards. They want to comply with the new ordinance in such a way that the remaining billboards maximize their total revenues (i.e., the sum of  revenues generated by the billboards left standing on Main street). Given , , and the revenue of each of the  billboards, find and print the maximum profit that ADZEN can earn while complying with the zoning ordinance. Assume that Main street is a straight, contiguous block of  billboards that can be removed but cannot be reordered in any way.   For example, if there are  billboards, and  is the maximum number of consecutive billboards that can be active, with , then the maximum revenue that can be generated is : .   Function Description  Complete the billboards function in the editor below.  It should return an integer that represents the maximum revenue that can be generated under the rules.   billboards has the following parameter(s):   k: an integer that represents the longest contiguous group of billboards allowed   revenue: an integer array where each element represents the revenue potential for a billboard at that index   Input Format The first line contains two space-separated integers,  (the number of billboards) and  (the maximum number of billboards that can stand together on any part of the road).  Each line  of the  subsequent lines contains an integer denoting the revenue value of billboard  (where ). Constraints    Output Format Print a single integer denoting the maximum profit ADZEN can earn from Main street after complying with the city's ordinance. Sample Input 0  6 2    1   2   3   1   6   10   Sample Output 0  21  Explanation 0  There are  billboards, and we must remove some of them so that no more than  billboards are immediately next to one another. We remove the first and fourth billboards, which gives us the configuration _ 2 3 _ 6 10 and a profit of . As no other configuration has a profit greater than , we print  as our answer. _ 2 3 _ 6 10 Sample Input 1  5 4 1 2 3 4 5  Sample Output 1  14  Explanation 1  There are  billboards, and we must remove some of them so that no more than  billboards are immediately next to one another. We remove the first billboard, which gives us the configuration _ 2 3 4 5 and a profit of . As no other configuration has a profit greater than , we print  as our answer. _ 2 3 4 5
__label__Tree We are given the head node root of a binary tree, where additionally every node's value is either a 0 or a 1. Return the same tree where every subtree (of the given tree) not containing a 1 has been removed. (Recall that the subtree of a node X is X, plus every node that is a descendant of X.) Example 1: Input: [1,null,0,0,1] Output: [1,null,0,null,1]   Explanation:  Only the red nodes satisfy the property "every subtree not containing a 1". The diagram on the right represents the answer.    Example 2: Input: [1,0,1,0,0,0,1] Output: [1,null,1,null,1]     Example 3: Input: [1,1,0,1,1,0,1,0] Output: [1,1,0,1,1,null,1]     Note:   The binary tree will have at most 100 nodes. The value of each node will only be 0 or 1.
__label__Greedy-Algorithms Given an array nums sorted in ascending order, return true if and only if you can split it into 1 or more subsequences such that each subsequence consists of consecutive integers and has length at least 3.   Example 1: Input: [1,2,3,3,4,5] Output: True Explanation: You can split them into two consecutive subsequences :  1, 2, 3 3, 4, 5   Example 2: Input: [1,2,3,3,4,4,5,5] Output: True Explanation: You can split them into two consecutive subsequences :  1, 2, 3, 4, 5 3, 4, 5   Example 3: Input: [1,2,3,4,4,5] Output: False    Constraints:  1 <= nums.length <= 10000
__label__Search __label__Dynamic-Programming Given a set of  intervals, find the size of its largest possible subset of intervals such that no three intervals in the subset share a common point. Input Format The first line contains an integer, , denoting the number of interval sets you must find answers for. The  subsequent lines describe each of the  interval sets as follows: The first line contains an integer, , denoting the number of intervals in the list.  Each line  of the  subsequent lines contains two space-separated integers describing the respective starting () and ending () boundaries of an interval. Constraints     Output Format For each of the  interval sets, print an integer denoting the size of the largest possible subset of intervals in the given set such that no three points in the subset overlap. Sample Input 4 3 1 2 2 3 2 4 3 1 5 1 5 1 5 4 1 10 1 3 4 6 7 10 4 1 10 1 3 3 6 7 10  Sample Output 2 2 4 3  Explanation For set , all three intervals fall on point  so we can only choose any  of the intervals. Thus, we print  on a new line. For set , all three intervals span the range from  to  so we can only choose any  of them. Thus, we print  on a new line. For set , we can choose all  intervals without having more than two of them overlap at any given point. Thus, we print  on a new line. For set , the intervals , , and  all overlap at point , so we must only choose  of these intervals to combine with the last interval, , for a total of  qualifying intervals. Thus, we print  on a new line.
__label__Array __label__Hash-Table __label__Dynamic-Programming Given a 2D binary matrix filled with 0's and 1's, find the largest rectangle containing only 1's and return its area. Example: Input: [   ["1","0","1","0","0"],   ["1","0","1","1","1"],   ["1","1","1","1","1"],   ["1","0","0","1","0"] ] Output: 6
__label__Hash-Table Given a string s and a non-empty string p, find all the start indices of p's anagrams in s. Strings consists of lowercase English letters only and the length of both strings s and p will not be larger than 20,100. The order of output does not matter. Example 1: Input: s: "cbaebabacd" p: "abc"  Output: [0, 6]  Explanation: The substring with start index = 0 is "cba", which is an anagram of "abc". The substring with start index = 6 is "bac", which is an anagram of "abc".   Example 2: Input: s: "abab" p: "ab"  Output: [0, 1, 2]  Explanation: The substring with start index = 0 is "ab", which is an anagram of "ab". The substring with start index = 1 is "ba", which is an anagram of "ab". The substring with start index = 2 is "ab", which is an anagram of "ab".
__label__Binary-Search A sorted list A contains 1, plus some number of primes.  Then, for every p < q in the list, we consider the fraction p/q. What is the K-th smallest fraction considered?  Return your answer as an array of ints, where answer[0] = p and answer[1] = q. Examples: Input: A = [1, 2, 3, 5], K = 3 Output: [2, 5] Explanation: The fractions to be considered in sorted order are: 1/5, 1/3, 2/5, 1/2, 3/5, 2/3. The third fraction is 2/5.  Input: A = [1, 7], K = 1 Output: [1, 7]  Note:  A will have length between 2 and 2000. Each A[i] will be between 1 and 30000. K will be between 1 and A.length * (A.length - 1) / 2.
__label__Array __label__Dynamic-Programming Given a triangle, find the minimum path sum from top to bottom. Each step you may move to adjacent numbers on the row below. For example, given the following triangle [      [2],     [3,4],    [6,5,7],   [4,1,8,3] ]  The minimum path sum from top to bottom is 11 (i.e., 2 + 3 + 5 + 1 = 11). Note: Bonus point if you are able to do this using only O(n) extra space, where n is the total number of rows in the triangle.
__label__Dynamic-Programming Define S = [s,n] as the string S which consists of n connected strings s. For example, ["abc", 3] ="abcabcabc".  On the other hand, we define that string s1 can be obtained from string s2 if we can remove some characters from s2 such that it becomes s1. For example, “abc”  can be obtained from “abdbec” based on our definition, but it can not be obtained from “acbbe”. You are given two non-empty strings s1 and s2 (each at most 100 characters long) and two integers 0 ≤ n1 ≤ 106 and 1 ≤ n2 ≤ 106. Now consider the strings S1 and S2, where S1=[s1,n1] and S2=[s2,n2]. Find the maximum integer M such that [S2,M] can be obtained from S1. Example: Input: s1="acb", n1=4 s2="ab", n2=2  Return: 2
__label__Array __label__Binary-Search Suppose an array sorted in ascending order is rotated at some pivot unknown to you beforehand. (i.e., [0,0,1,2,2,5,6] might become [2,5,6,0,0,1,2]). You are given a target value to search. If found in the array return true, otherwise return false. Example 1: Input: nums = [2,5,6,0,0,1,2], target = 0 Output: true  Example 2: Input: nums = [2,5,6,0,0,1,2], target = 3 Output: false Follow up:  This is a follow up problem to Search in Rotated Sorted Array, where nums may contain duplicates. Would this affect the run-time complexity? How and why?
__label__Mathematics There are 1000 buckets, one and only one of them is poisonous, while the rest are filled with water. They all look identical. If a pig drinks the poison it will die within 15 minutes. What is the minimum amount of pigs you need to figure out which bucket is poisonous within one hour? Answer this question, and write an algorithm for the general case.   General case:  If there are n buckets and a pig drinking poison will die within m minutes, how many pigs (x) you need to figure out the poisonous bucket within p minutes? There is exactly one bucket with poison.   Note:  A pig can be allowed to drink simultaneously on as many buckets as one would like, and the feeding takes no time. After a pig has instantly finished drinking buckets, there has to be a cool down time of m minutes. During this time, only observation is allowed and no feedings at all. Any given bucket can be sampled an infinite number of times (by an unlimited number of pigs).
__label__Tree __label__Data-Structures __label__Advanced-Data-Structures Treeland is a country with  cities and  roads. There is exactly one path between any two cities.   The ruler of Treeland wants to implement a self-driving bus system and asks tree-loving Alex to plan the bus routes. Alex decides that each route must contain a subset of connected cities; a subset of cities is connected if the following two conditions are true: There is a path between every pair of cities which belongs to the subset. Every city in the path must belong to the subset.  In the figure above,  is a connected subset, but  is not  (for the second condition to be true,  would need to be part of the subset). Each self-driving bus will operate within a connected segment of Treeland. A connected segment  where  is defined by the connected subset of cities .  In the figure above,  is a connected segment that represents the subset . Note that a single city can be a segment too. Help Alex to find number of connected segments in Treeland. Input Format The first line contains a single positive integer, .  The  subsequent lines each contain two positive space-separated integers,  and , describe an edge connecting two nodes in tree . Constraints   Subtasks  For  score:  For  score:  Output Format Print a single integer: the number of segments , which are connected in tree . Sample Input 3 1 3 3 2  Sample Output 5  Explanation The connected segments for our test case are: , , , , and . These segments can be represented by the respective subsets: , , , , and .  Note:  is not a connected segment. It represents the subset  and the path between  and  goes through  which is not a member of the subset.
__label__Dynamic-Programming We define a modified Fibonacci sequence using the following definition: Given terms  and  where , term  is computed using the following relation:     For example, if  and ,   ,   ,   ,   and so on.   Given three integers, , , and , compute and print the  term of a modified Fibonacci sequence. Function Description  Complete the fibonacciModified function in the editor below.  It must return the  number in the sequence.   fibonacciModified has the following parameter(s):   t1: an integer   t2: an integer   n: an integer   Note: The value of  may far exceed the range of a -bit integer. Many submission languages have libraries that can handle such large results but, for those that don't (e.g., C++), you will need to compensate for the size of the result. Input Format A single line of three space-separated integers describing the respective values of , , and . Constraints     may far exceed the range of a -bit integer.  Output Format Print a single integer denoting the value of term  in the modified Fibonacci sequence where the first two terms are  and .  Sample Input 0 1 5  Sample Output 5  Explanation The first two terms of the sequence are  and , which gives us a modified Fibonacci sequence of . Because , we return the  term.
__label__Array Given a sorted integer array without duplicates, return the summary of its ranges. Example 1: Input:  [0,1,2,4,5,7] Output: ["0->2","4->5","7"] Explanation: 0,1,2 form a continuous range; 4,5 form a continuous range.  Example 2: Input:  [0,2,3,4,6,8,9] Output: ["0","2->4","6","8->9"] Explanation: 2,3,4 form a continuous range; 8,9 form a continuous range.
__label__Two-Pointers __label__Strings Implement strStr(). Return the index of the first occurrence of needle in haystack, or -1 if needle is not part of haystack. Example 1: Input: haystack = "hello", needle = "ll" Output: 2  Example 2: Input: haystack = "aaaaa", needle = "bba" Output: -1  Clarification: What should we return when needle is an empty string? This is a great question to ask during an interview. For the purpose of this problem, we will return 0 when needle is an empty string. This is consistent to C's strstr() and Java's indexOf().
__label__Dynamic-Programming Superman has been invited to India to celebrate Diwali. Unfortunately, on his arrival he learns that he has been invited mainly to help rescue people from a fire accident that has happened in a posh residential locale of New Delhi, where rescue is proving to be especially difficult. As he reaches the place of the fire, before him there are  buildings, each of the same height , which are on fire. Since it is Diwali, some floors of the buildings are empty as the occupants have gone elsewhere for celebrations. In his hurry to start the rescue Superman reaches the top of the building, but realizes that his jumping power is depleted and restricted due to change in his geographical setting. He soon understands the restrictions of his jumping power, and they are as follows:  He can use the jumping power any number of times until he reaches the bottom floor, which means he can use the jumping power only until before he reaches the bottom (Ground floor), which means, once he reaches the bottom floor, he cannot move to the top floor again and try to save people. (In one single drop from the top to bottom) He can use the jumping power any number of times until he reaches the bottom floor, which means he can use the jumping power only until before he reaches the bottom (Ground floor), which means, once he reaches the bottom floor, he cannot move to the top floor again and try to save people. (In one single drop from the top to bottom) While switching buildings, he loses height  while jumping. While switching buildings, he loses height  while jumping. The second restriction is explained below with an example. Assume . Now Superman is in the 2nd building 5th floor (, ). If he wants to switch to the fifth building (), he will lose height (), which means he will be at floor 3 at building 5 (, ). He can jump freely from the current floor to the floor below on the same building . That is, suppose if he is at , he can go to  without any restrictions. He cannot skip a floor while jumping in the same building. He can go to the floor below the current floor of the same building or use his jumping power, switch building, and lose height . Given the information about the occupied floors in each of the  buildings, help Superman to determine the maximum number of people he can save in one single drop from the top to the bottom floor with the given restrictions. Input Format Input starts with three values:  the number of buildings , the height of the buildings , and the height Superman will lose when he switches buildings . These are followed by  lines. Each  line starts with a non negative integer  indicating how many people are in the th building. Each of the following  integers indicates that a person is at height  in the  buiding. Each of the following  integers are given and repetitions are allowed which means there can be more than one person in a floor.  indicates building number and  indicates floor number. Building number will not be given; since  lines follow the first line, you can assume that the  line indicates the  building's specifications. Constraints       (for each , which means the maximum number of people in a particular building will not exceed )   Output Format Output the maximum number of people Superman can save. Sample Input 4 15 2  5 1 1 1 4 10 8 9 5 7 7 3 9 8 8 5 9 5 6 4 3 0     Sample Output 12  Explanation Input starts with , ,  .  lines follow. Each line describes building . Each line begins with , which denotes the number of persons in a particular building, followed by floor number, where each person resides. Floor number can repeat as any number of people can reside on a particular floor.   I've attached a figure here to explain the sample test case.   You can verify the first building's specifications with the figure.   (Total number of persons in the first building), followed by 1 1 1 4 10(Floor numbers).   floor = 3 persons.  floor = 1 person.  floor = 1 person.  Similarly, the specifications for the other three buildings follow.  The connected line shows the path which Superman can use to save the maximum number of people. In this case, that number is . You can also note in the figure that when he switches from Building 2 to Building 3, he loses height  (). Similarly, when he switches from Building 3 to Building 1 ,the same height loss happens as mentioned in the problem statement.
